<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Kafka-Docker环境跨主机集群安装</title>
      <link href="/2019/02/18/Kafka-Docker%E7%8E%AF%E5%A2%83%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
      <url>/2019/02/18/Kafka-Docker%E7%8E%AF%E5%A2%83%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>单节点主机多容器的Kafka集群挂掉了，进行三个节点主机Docker环境下的Kafka集群安装。<br><a id="more"></a></p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h2><p>目前有三台物理机，计划对应zk+kafka节点为：</p><ul><li>172.10.0.1 –&gt; broker1</li><li>172.10.0.2 –&gt; broker2</li><li>172.10.0.3 –&gt; broker3</li></ul><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>使用的ZK为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">zookeeper-3</span><span class="selector-class">.4</span><span class="selector-class">.13</span></span><br></pre></td></tr></table></figure></p><p>使用的Kafka为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">kafka_2</span><span class="selector-class">.11-2</span><span class="selector-class">.0</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure></p><p>Dockerfile文件为：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker image of kafka cluster</span></span><br><span class="line"><span class="comment"># VERSION 0.0.1</span></span><br><span class="line"><span class="comment"># Author: xukf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> daocloud.io/centos:<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> xukf &lt;xukf.me&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义工作目录</span></span><br><span class="line"><span class="keyword">ENV</span> WORK_PATH /usr/local/work</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义日志目录</span></span><br><span class="line"><span class="keyword">ENV</span> LOG_PATH /usr/local/work/log</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义zookeeper的Data目录</span></span><br><span class="line"><span class="keyword">ENV</span> ZK_DATA_PATH $WORK_PATH/zkdata</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义zookeeper文件夹名称</span></span><br><span class="line"><span class="keyword">ENV</span> ZK_PACKAGE_NAME zookeeper-<span class="number">3.4</span>.<span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义kafka文件夹名称</span></span><br><span class="line"><span class="keyword">ENV</span> KAFKA_PACKAGE_NAME kafka_2.<span class="number">11</span>-<span class="number">2.0</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将kafka的bin目录加入PATH</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $WORK_PATH/$KAFKA_PACKAGE_NAME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装JDK</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./jdk-8u181-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="bash">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk1.8.0_181</span></span><br><span class="line"><span class="bash">ENV JRE_HOME <span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span></span><br><span class="line"><span class="bash">ENV CLASSPATH .:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span></span><br><span class="line"><span class="bash">ENV PATH <span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#创建工作目录</span></span></span><br><span class="line"><span class="bash">RUN mkdir -p <span class="variable">$WORK_PATH</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#创建日志目录</span></span></span><br><span class="line"><span class="bash">RUN mkdir -p <span class="variable">$LOG_PATH</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#创建zookeeper的Data目录</span></span></span><br><span class="line"><span class="bash">RUN mkdir -p <span class="variable">$ZK_DATA_PATH</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#安装kafka</span></span></span><br><span class="line"><span class="bash">ADD ./kafka_2.11-2.0.0.tgz <span class="variable">$WORK_PATH</span>/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#拷贝解压缩的zk</span></span></span><br><span class="line"><span class="bash">COPY ./<span class="variable">$ZK_PACKAGE_NAME</span> <span class="variable">$WORK_PATH</span>/<span class="variable">$ZK_PACKAGE_NAME</span></span></span><br></pre></td></tr></table></figure></p><h2 id="使用现有仓库中的镜像"><a href="#使用现有仓库中的镜像" class="headerlink" title="使用现有仓库中的镜像"></a>使用现有仓库中的镜像</h2><h3 id="现有镜像提交私有仓库"><a href="#现有镜像提交私有仓库" class="headerlink" title="现有镜像提交私有仓库"></a>现有镜像提交私有仓库</h3><p>Docker部署程序通过镜像直接拉取容器。将原来的Kafka节点镜像上传到私有仓库，新增主机上通过拉取镜像进行节点部署。</p><p>以broker2节点为例<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">push</span> <span class="number">172.10</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/broker2:<span class="number">0.0</span><span class="meta">.2</span></span><br></pre></td></tr></table></figure></p><h3 id="配置新增主机上Docker环境"><a href="#配置新增主机上Docker环境" class="headerlink" title="配置新增主机上Docker环境"></a>配置新增主机上Docker环境</h3><ul><li>主机上Docker环境搭建好</li><li>配置私有仓库信息</li></ul><p><code>daemon.json</code>文件大概是这个样子：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"storage-driver"</span>: <span class="string">"overlay"</span>,</span><br><span class="line">  <span class="attr">"max-concurrent-uploads"</span>: <span class="number">16</span>,</span><br><span class="line">  <span class="attr">"max-concurrent-downloads"</span>: <span class="number">16</span>,</span><br><span class="line">  <span class="attr">"graph"</span>:<span class="string">"/var/lib/docker"</span>,</span><br><span class="line">  <span class="attr">"insecure-registries"</span>:[<span class="string">"172.10.0.1:5000"</span>],</span><br><span class="line">  <span class="attr">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="attr">"max-size"</span>: <span class="string">"50m"</span>,</span><br><span class="line">    <span class="attr">"max-file"</span>: <span class="string">"6"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hosts"</span>:[<span class="string">"tcp://0.0.0.0:2376"</span>, <span class="string">"unix:///var/run/docker.sock"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>insecure-registries</code>配置为原单节点主机的私有仓库，如果私有仓库制定了端口号，需要配置上相应端口号。</p><p>注意配置完后，如果获取私有仓库镜像遇到下面报错信息，多半是json配置文件没有生效：</p><blockquote><p>Error response from daemon: Get <a href="https://172.10.0.1:5000/v2/" target="_blank" rel="noopener">https://172.10.0.1:5000/v2/</a>: http: server gave HTTP response to HTTPS client</p></blockquote><p>执行以下命令进行生效（root用户）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p><h3 id="获取私有仓库镜像"><a href="#获取私有仓库镜像" class="headerlink" title="获取私有仓库镜像"></a>获取私有仓库镜像</h3><p>以broker2节点为例<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull <span class="number">172.10</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/broker2:<span class="number">0.0</span><span class="meta">.2</span></span><br></pre></td></tr></table></figure></p><h1 id="Kafka集群部署"><a href="#Kafka集群部署" class="headerlink" title="Kafka集群部署"></a>Kafka集群部署</h1><h2 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h2><p>目前使用<code>docker-compose</code>来进行各主机上的容器管理：</p><ul><li>安装<code>docker-compose</code></li><li>配置yml文件</li></ul><p>以broker2节点为例：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  broker2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="number">172.10</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5000/broker2:0.0.2</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">broker2</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"19092:19092"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"18888:18888"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"19888:19888"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"22181:22181"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"19012:22"</span></span><br><span class="line"><span class="attr">    tty:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    network_mode:</span> <span class="string">"host"</span></span><br><span class="line"><span class="attr">  producer1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="number">172.10</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5000/producer:0.0.2</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">producer1</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"19013:22"</span></span><br><span class="line"><span class="attr">    tty:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>由于主机上端口冲突，这里将Kafka的9092、zk的2181、2888、3888端口都进行了调整。<br>前期试过将Kafka的9092端口通过<code>bridge</code>模式，映射成19092，但是在配置Kafka的参数时遇到了问题，一直会提示有节点不可用：</p><blockquote><p>Connection to node xxxx could not be established. Broker may not be available</p></blockquote><p>猜测是无法正确解析外部ip或者port导致的。暂时解决方案是采用<code>host</code>模式进行连接。</p><p>完成启动容器</p><h2 id="配置zk参数"><a href="#配置zk参数" class="headerlink" title="配置zk参数"></a>配置zk参数</h2><h3 id="配置主机身份"><a href="#配置主机身份" class="headerlink" title="配置主机身份"></a>配置主机身份</h3><p>先要配置每个主机上zk的身份：<br>broker1容器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /usr/<span class="built_in">local</span>/work/zkdata/myid</span><br></pre></td></tr></table></figure></p><p>broker2容器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 2 &gt; /usr/<span class="built_in">local</span>/work/zkdata/myid</span><br></pre></td></tr></table></figure></p><p>broker3容器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 3 &gt; /usr/<span class="built_in">local</span>/work/zkdata/myid</span><br></pre></td></tr></table></figure></p><h3 id="配置zk端口号等"><a href="#配置zk端口号等" class="headerlink" title="配置zk端口号等"></a>配置zk端口号等</h3><p>在三个节点容器的<code>/usr/local/work/zookeeper-3.4.13/conf</code>目录下配置zoo.cfg文件，因为要进行端口调整，所以参数文件要注意配置<code>clientPort</code>、<code>server</code>两个地方：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta">#</span><span class="bash"> The number of ticks that the initial</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="meta">#</span><span class="bash"> The number of ticks that can pass between</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="meta">#</span><span class="bash"> the directory <span class="built_in">where</span> the snapshot is stored.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">do</span> not use /tmp <span class="keyword">for</span> storage, /tmp here is just</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> example sakes.</span></span><br><span class="line">dataDir=/usr/local/work/zkdata</span><br><span class="line"><span class="meta">#</span><span class="bash"> the port at <span class="built_in">which</span> the clients will connect</span></span><br><span class="line">clientPort=22181</span><br><span class="line"><span class="meta">#</span><span class="bash"> the maximum number of client connections.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> increase this <span class="keyword">if</span> you need to handle more clients</span></span><br><span class="line"><span class="meta">#</span><span class="bash">maxClientCnxns=60</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Be sure to <span class="built_in">read</span> the maintenance section of the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://zookeeper.apache.org/doc/current/zookeeperAdmin.html<span class="comment">#sc_maintenance</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The number of snapshots to retain <span class="keyword">in</span> dataDir</span></span><br><span class="line"><span class="meta">#</span><span class="bash">autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Purge task interval <span class="keyword">in</span> hours</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set to <span class="string">"0"</span> to <span class="built_in">disable</span> auto purge feature</span></span><br><span class="line"><span class="meta">#</span><span class="bash">autopurge.purgeInterval=1</span></span><br><span class="line">server.1=172.10.0.1:18888:19888</span><br><span class="line">server.2=172.10.0.2:18888:19888</span><br><span class="line">server.3=172.10.0.3:18888:19888</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：如果2181端口号没正确配置，或者其他主机的无法正常访问，会导致zk报错提示无法连接</p><h3 id="启动zk"><a href="#启动zk" class="headerlink" title="启动zk"></a>启动zk</h3><p>启动：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/work/zookeeper-3.4.13/bin/zkServer.sh start</span><br></pre></td></tr></table></figure></p><p>查看状态：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/work/zookeeper-3.4.13/bin/zkServer.sh status</span><br></pre></td></tr></table></figure></p><p>如果有需要，可以正常停止：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/work/zookeeper-3.4.13/bin/zkServer.sh stop</span><br></pre></td></tr></table></figure></p><h2 id="配置Kafka"><a href="#配置Kafka" class="headerlink" title="配置Kafka"></a>配置Kafka</h2><h3 id="参数文件配置"><a href="#参数文件配置" class="headerlink" title="参数文件配置"></a>参数文件配置</h3><p>三个节点容器配置<code>/usr/local/work/kafka_2.11-2.0.0/config</code>目录下的<code>server.properties</code>文件，以broker2节点为例，主要配置为：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">############################# Socket Server Settings #############################</span><br><span class="line"></span><br><span class="line"># The address the socket server listens on. It will get the value returned <span class="keyword">from</span></span><br><span class="line"># java.net.InetAddress.getCanonicalHostName() <span class="keyword">if</span> not configured.</span><br><span class="line">#   FORMAT:</span><br><span class="line">#     listeners = listener_name:<span class="comment">//host_name:port</span></span><br><span class="line">#   EXAMPLE:</span><br><span class="line">#     listeners = PLAINTEXT:<span class="comment">//your.host.name:9092</span></span><br><span class="line">#listeners=PLAINTEXT:<span class="comment">//:9092</span></span><br><span class="line">listeners=PLAINTEXT:<span class="comment">//:19092</span></span><br><span class="line"></span><br><span class="line"># Hostname and port the broker will advertise to producers and consumers. If not set,</span><br><span class="line"># it uses the value for <span class="string">"listeners"</span> <span class="keyword">if</span> configured.  Otherwise, it will use the value</span><br><span class="line"># returned <span class="keyword">from</span> java.net.InetAddress.getCanonicalHostName().</span><br><span class="line">#advertised.listeners=PLAINTEXT:<span class="comment">//your.host.name:9092</span></span><br><span class="line">advertised.listeners=PLAINTEXT:<span class="comment">//172.10.0.2:19092</span></span><br><span class="line"></span><br><span class="line">############################# Zookeeper #############################</span><br><span class="line"></span><br><span class="line"># Zookeeper connection string (see zookeeper docs for details).</span><br><span class="line"># This is a comma separated host:port pairs, each corresponding to a zk</span><br><span class="line"># server. e.g. <span class="string">"127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002"</span>.</span><br><span class="line"># You can also append an optional chroot string to the urls to specify the</span><br><span class="line"># root directory for all kafka znodes.</span><br><span class="line">zookeeper.connect=localhost:<span class="number">22181</span></span><br></pre></td></tr></table></figure></p><p>将端口号进行了修改。</p><h3 id="启动Kakfa"><a href="#启动Kakfa" class="headerlink" title="启动Kakfa"></a>启动Kakfa</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="regexp">/usr/</span>local<span class="regexp">/work/</span>kafka_2.<span class="number">11</span>-<span class="number">2.0</span>.<span class="number">0</span><span class="regexp">/bin/</span>kafka-server-start.sh <span class="regexp">/usr/</span>local<span class="regexp">/work/</span>kafka_2.<span class="number">11</span>-<span class="number">2.0</span>.<span class="number">0</span><span class="regexp">/config/</span>server.properties &gt;<span class="regexp">/usr/</span>local<span class="regexp">/work/</span>log<span class="regexp">/kafka.log 2&gt;1 &amp;</span></span><br></pre></td></tr></table></figure><h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><p>这里存在一个问题，<code>zookeeper.connect</code>用的是本地的zk，没有使用zk的集群，所以本地zk挂掉了，这个kafka节点也会跟着挂掉。</p><p>在使用<code>bridge</code>模式下测试使用过如下配置，一直提示无法解析节点ip：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zookeeper.connect=<span class="number">172.10</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">22181</span>,<span class="number">172.10</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">22181</span>,<span class="number">172.10</span><span class="meta">.0</span><span class="meta">.3</span>:<span class="number">22181</span></span><br></pre></td></tr></table></figure></p><p>查看报错信息，其他节点都是传递的容器ID，没有传递真正的主机IP，试过配置容器hosts来进行解析但失败了。分析可以试一下启容器的时候加入以下参数：<code>KAFKA_ADVERTISED_LISTENERS</code>，在配置文件中配置<code>advertised.listeners</code>，实现传递主机IP。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>生产者：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/work/kafka_2<span class="meta">.11</span>-<span class="number">2.0</span><span class="meta">.0</span>/bin/kafka-console-producer.sh --broker-list <span class="number">172.10</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">19092</span>,<span class="number">172.10</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">19092</span>,<span class="number">172.10</span><span class="meta">.0</span><span class="meta">.3</span>:<span class="number">19092</span> --topic test001</span><br></pre></td></tr></table></figure></p><p>消费者<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/work/kafka_2<span class="meta">.11</span>-<span class="number">2.0</span><span class="meta">.0</span>/bin/kafka-console-consumer.sh  --bootstrap-server <span class="number">172.10</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">19092</span>,<span class="number">172.10</span><span class="meta">.0</span><span class="meta">.2</span>:<span class="number">19092</span>,<span class="number">172.10</span><span class="meta">.0</span><span class="meta">.3</span>:<span class="number">19092</span> --from-beginning --topic test010</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>如果主机端口没有被占用，建议使用原有端口。</p><p>需要解决两个问题：</p><ol><li>目前Kafka与ZK是一对一的存在于容器中，配置的参数会发生某个zk的挂掉导致Kafka的挂掉。需要进行参数调整</li><li>使用的<code>host</code>模式不符合生产要求，以后要上生产环境需要调整</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/boling_cavalry/article/details/78309050" target="_blank" rel="noopener">Docker下的Kafka学习之二：搭建集群环境</a><br><a href="https://www.cnblogs.com/cf532088799/p/7425021.html" target="_blank" rel="noopener">Kafka跨网络访问设置</a>  </p>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OGG+Kafka-目标端配置</title>
      <link href="/2019/02/12/OGG+Kafka-%E7%9B%AE%E6%A0%87%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/02/12/OGG+Kafka-%E7%9B%AE%E6%A0%87%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>使用现有的镜像，新拉起一个OGG+Kafka容器环境，为新增业务做准备。<br><a id="more"></a></p><h1 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h1><p>使用已有镜像</p><h1 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h1><p>配置<code>docker-compose.yml</code>文件，修改端口号</p><h1 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h1><p>进入<code>OGG_HOME</code>目录</p><h2 id="创建OGG基本目录结构"><a href="#创建OGG基本目录结构" class="headerlink" title="创建OGG基本目录结构"></a>创建OGG基本目录结构</h2><p>初次配置OGG需要先创建基本目录结构：</p><blockquote><p>GGSCI (7add7fa1b405) 2&gt; edit param mgr<br>ERROR: Directory /usr/local/work/ogg/dirprm does not exist yet (use CREATE SUBDIRS).</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GGSCI (7add7fa1b405) 3&gt; create subdirs</span><br><span class="line"></span><br><span class="line">Creating subdirectories under current directory /usr/local/work/ogg</span><br><span class="line"></span><br><span class="line">Parameter file                 /usr/local/work/ogg/dirprm: created.</span><br><span class="line">Report file                    /usr/local/work/ogg/dirrpt: created.</span><br><span class="line">Checkpoint file                /usr/local/work/ogg/dirchk: created.</span><br><span class="line">Process status files           /usr/local/work/ogg/dirpcs: created.</span><br><span class="line">SQL script files               /usr/local/work/ogg/dirsql: created.</span><br><span class="line">Database definitions files     /usr/local/work/ogg/dirdef: created.</span><br><span class="line">Extract data files             /usr/local/work/ogg/dirdat: created.</span><br><span class="line">Temporary files                /usr/local/work/ogg/dirtmp: created.</span><br><span class="line">Credential store files         /usr/local/work/ogg/dircrd: created.</span><br><span class="line">Masterkey wallet files         /usr/local/work/ogg/dirwlt: created.</span><br><span class="line">Dump files                     /usr/local/work/ogg/dirdmp: created.</span><br></pre></td></tr></table></figure><h2 id="配置MGR进程"><a href="#配置MGR进程" class="headerlink" title="配置MGR进程"></a>配置MGR进程</h2><p>注意端口号与动态端口列表，要与容器绑定的端口一致。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GGSCI (7add7fa1b405) 4&gt; edit param mgr</span><br><span class="line"></span><br><span class="line">GGSCI (7add7fa1b405) 5&gt; view param mgr</span><br><span class="line"></span><br><span class="line">PORT 9839</span><br><span class="line">DYNAMICPORTLIST 9840-9939</span><br><span class="line">AUTORESTART EXTRACT *,RETRIES 5,WAITMINUTES 3</span><br><span class="line">PURGEOLDEXTRACTS ./dirdat/*,usecheckpoints, minkeepdays 3</span><br><span class="line">LAGREPORTHOURS 1</span><br><span class="line">LAGINFOMINUTES 30</span><br><span class="line">LAGCRITICALMINUTES 45</span><br></pre></td></tr></table></figure></p><h2 id="添加checkpoint表"><a href="#添加checkpoint表" class="headerlink" title="添加checkpoint表"></a>添加checkpoint表</h2><p>目前不知道这步有什么用……<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GGSCI (7add7fa1b405) 6&gt; edit params GLOBALS</span><br><span class="line"></span><br><span class="line">GGSCI (7add7fa1b405) 7&gt; view param GLOBALS</span><br><span class="line"></span><br><span class="line">GGSCHEMA ogg</span><br><span class="line">CHECKPOINTTABLE ogg.checkpoint_table</span><br></pre></td></tr></table></figure></p><h2 id="配置REP进程"><a href="#配置REP进程" class="headerlink" title="配置REP进程"></a>配置REP进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GGSCI (7add7fa1b405) 8&gt; add  REPLICAT rep_kf,exttrail ./dirdat/kf,CHECKPOINTTABLE ogg.checkpoint_table</span><br><span class="line">REPLICAT added.</span><br><span class="line"></span><br><span class="line">GGSCI (7add7fa1b405) 9&gt; info all</span><br><span class="line"></span><br><span class="line">Program     Status      Group       Lag at Chkpt  Time Since Chkpt</span><br><span class="line"></span><br><span class="line">MANAGER     STOPPED                                           </span><br><span class="line">REPLICAT    STOPPED     REP_KF      00:00:00      00:00:03    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GGSCI (7add7fa1b405) 10&gt; edit params rep_kf</span><br><span class="line"></span><br><span class="line">GGSCI (7add7fa1b405) 11&gt; view param rep_kf</span><br><span class="line"></span><br><span class="line">REPLICAT rep_kf</span><br><span class="line">sourcedefs /usr/local/work/ogg/ogg.t_file_info_all</span><br><span class="line">TARGETDB LIBFILE libggjava.so SET property=dirprm/kafka.props</span><br><span class="line">REPORTCOUNT EVERY 1 MINUTES, RATE</span><br><span class="line">GROUPTRANSOPS 10000</span><br><span class="line">MAP stl_zb.t_file_info*, TARGET stl_zb.t_file_info*;</span><br></pre></td></tr></table></figure><h2 id="配置Kafka相关参数"><a href="#配置Kafka相关参数" class="headerlink" title="配置Kafka相关参数"></a>配置Kafka相关参数</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@7add7fa1b405 ogg]# cd dirprm/</span><br><span class="line">[root@7add7fa1b405 dirprm]# ls</span><br><span class="line">globals.prm  mgr.prm  rep_kf.prm</span><br><span class="line">[root@7add7fa1b405 dirprm]# vi kafka.props</span><br><span class="line">[root@7add7fa1b405 dirprm]# cat kafka.props</span><br><span class="line">gg.handlerlist=kafkahandler</span><br><span class="line">gg.handler.kafkahandler.type=kafka</span><br><span class="line">gg.handler.kafkahandler.KafkaProducerConfigFile=custom_kafka_producer.properties</span><br><span class="line">gg.handler.kafkahandler.topicMappingTemplate=wjdata010</span><br><span class="line">gg.handler.kafkahandler.format=json</span><br><span class="line">gg.handler.kafkahandler.mode=op</span><br><span class="line">gg.classpath=dirprm/:/usr/local/work/kafka_2.11-2.0.0/libs/*:/usr/local/work/ogg/:/usr/local/work/ogg/lib/*</span><br><span class="line">[root@7add7fa1b405 dirprm]# vi custom_kafka_producer.properties</span><br><span class="line">[root@7add7fa1b405 dirprm]# cat custom_kafka_producer.properties</span><br><span class="line">bootstrap.servers=broker1:9092,broker2:9092,broker3:9092</span><br><span class="line">acks=1</span><br><span class="line">compression.type=gzip</span><br><span class="line">reconnect.backoff.ms=1000</span><br><span class="line">value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer</span><br><span class="line">key.serializer=org.apache.kafka.common.serialization.ByteArraySerializer</span><br><span class="line">batch.size=102400</span><br><span class="line">linger.ms=10000</span><br></pre></td></tr></table></figure><h2 id="启动MGR、REP进程"><a href="#启动MGR、REP进程" class="headerlink" title="启动MGR、REP进程"></a>启动MGR、REP进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GGSCI (7add7fa1b405) 8&gt; start mgr     </span><br><span class="line">Manager started.</span><br><span class="line"></span><br><span class="line">GGSCI (7add7fa1b405) 9&gt; start REP_KF</span><br><span class="line"></span><br><span class="line">Sending START request to MANAGER ...</span><br><span class="line">REPLICAT REP_KF starting</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GGSCI (7add7fa1b405) 10&gt; info all</span><br><span class="line"></span><br><span class="line">Program     Status      Group       Lag at Chkpt  Time Since Chkpt</span><br><span class="line"></span><br><span class="line">MANAGER     RUNNING                                           </span><br><span class="line">REPLICAT    RUNNING     REP_KF      00:00:00      00:00:01</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>等待验证</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>旧有文档</p>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Kafka </tag>
            
            <tag> OGG </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-自定义事件触发在React中使用-高度自适应例</title>
      <link href="/2019/01/02/JS-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91%E5%9C%A8React%E4%B8%AD%E4%BD%BF%E7%94%A8-%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E4%BE%8B/"/>
      <url>/2019/01/02/JS-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91%E5%9C%A8React%E4%B8%AD%E4%BD%BF%E7%94%A8-%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p><code>JS</code>与<code>HTML</code>的交互是通过事件来实现的。<br>近期在<code>React</code>项目中遇到了一个需求，使用Echarts画出的图表要根据页面大小进行自适应。  </p><a id="more"></a><h1 id="通过JS事件触发Echarts图表调整大小"><a href="#通过JS事件触发Echarts图表调整大小" class="headerlink" title="通过JS事件触发Echarts图表调整大小"></a>通过JS事件触发Echarts图表调整大小</h1><ul><li><p>JS已有事件<br>JS提供了<code>resize</code>事件：</p><blockquote><p>当浏览器窗口被调整到一个新的高度或者宽度时，就会触发resize事件。这个事件在window上面触发。</p></blockquote></li><li><p>Echarts给出了<a href="http://echarts.baidu.com/api.html#echartsInstance.resize" target="_blank" rel="noopener">echartsInstance.resize</a>方法：</p><blockquote><p>改变图表尺寸，在容器大小发生改变时需要手动调用。</p></blockquote></li></ul><p>因此，可以在Echarts实例初始化之后，绑定对<code>window.resize</code>事件的监听，每当<code>window.resize</code>事件触发，便回调Echarts的<code>echartsInstance.resize</code>方法，来实现Echarts图表的自适应。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>为了保证处理事件能在大多数浏览器下一致地运行，我们参考《JavaScript高级程序设计》方法，对事件绑定与解除进行封装，独立出单独的js文件–<code>public/DOMEventUtil.js</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  addHandler: <span class="function">(<span class="params">element, type, handler</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">      element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">      element.attachEvent(<span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(element, <span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>, &#123;</span><br><span class="line">        value: handler</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  removeHandler: <span class="function">(<span class="params">element, type, handler</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">      element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</span><br><span class="line">      element.detachEvent(<span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(element, <span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>, &#123;</span><br><span class="line">        value: <span class="literal">null</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>我们在需要Echarts图表自适应的js/jsx文件中引入该js文件，并将Echarts实例绑定上<code>window.resize</code>事件，比如Echarts地图大小的调整<code>mapInfo/DMMap.jsx</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> DOMEventUtil <span class="keyword">from</span> <span class="string">'../public/DOMEventUtil'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Echarts 实例化函数</span></span><br><span class="line">echartsDraw(mapId) &#123;</span><br><span class="line">  <span class="keyword">const</span> mapDiv = <span class="built_in">document</span>.getElementById(mapId);</span><br><span class="line">  <span class="keyword">const</span> myCharts = echarts.init(mapDiv);</span><br><span class="line">  DOMEventUtil.addHandler(<span class="built_in">window</span>, <span class="string">'resize'</span>, () =&gt; &#123; myCharts.resize(); &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就能在页面大小变化的时候，自动触发Echarts的大小调整函数来跟随页面实现自适应。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>这种方式面对的问题是：Echarts的实例容器一般是要求具有一定高度，如果固定了高度，那么该方法只能实现宽度变化的自适应，无法满足高度变化的自适应。</p><p>为了解决高度固定的问题，想到了用css来实现高度自适应。</p><h1 id="CSS实现高度自适应"><a href="#CSS实现高度自适应" class="headerlink" title="CSS实现高度自适应"></a>CSS实现高度自适应</h1><p>CSS巨渣，各位看官可以搜索一下<code>css padding-bottom</code>等等，会发现CSS能提供一个高度能随着页面大小自动变化的功能。  </p><p>似乎是看到了希望，但是Echarts在<a href="http://echarts.baidu.com/api.html#echarts.init" target="_blank" rel="noopener">echarts.init中有这么一条规则</a>：</p><blockquote><p>注：如果div是隐藏的，ECharts 可能会获取不到div的高宽导致初始化失败，这时候可以明确指定div的style.width和style.height，或者在div显示后手动调用 echartsInstance.resize 调整尺寸。</p></blockquote><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><p>问题就是，使用CSS的<code>padding-bottom</code>等方法在不显示指定<code>div</code>的高度的时候，Echarts会初始化失败。</p><p>对于CSS不熟，能想到解决该问题的方案是在每次触发<code>window.resize</code>事件之后计算div的高度，通过明确指定div的<code>style.height</code>，再调用Echarts的<code>resize</code>来重新渲染图表。</p><p>这种方案深入思考一下，其实可以抛弃CSS实现的高度自适应，直接通过JS来实时计算div该有的高度来完成高度自适应。</p><h1 id="借助React生命周期实现高度自适应"><a href="#借助React生命周期实现高度自适应" class="headerlink" title="借助React生命周期实现高度自适应"></a>借助React生命周期实现高度自适应</h1><p>在React生命周期中，初次加载完成的<code>componentDidMount()</code>与组件更新完成的<code>componentDidUpdate()</code>都是在<code>render</code>渲染完才执行的。  </p><p>由于不想在每个组件中都计算目前页面的高度与宽度，所以把计算方法单独成一个方法，将目前的高度与宽度存放在Redux中。方法组件为<code>calcScreenSize/CalcScreenSize.jsx</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Actions <span class="keyword">from</span> <span class="string">'./Action'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DOMEventUtil <span class="keyword">from</span> <span class="string">'../public/DOMEventUtil'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalcScreenSize</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; changeScreenSize &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    DOMEventUtil.addHandler(<span class="built_in">window</span>, <span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">      changeScreenSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line">    &#125;);</span><br><span class="line">    DOMEventUtil.addHandler(<span class="built_in">window</span>, <span class="string">'resize'</span>, () =&gt; &#123;</span><br><span class="line">      changeScreenSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CalcScreenSize.propTypes = &#123;</span><br><span class="line">  changeScreenSize: PropTypes.func.isRequired,</span><br><span class="line">  widthSize: PropTypes.number.isRequired,</span><br><span class="line">  heightSize: PropTypes.number.isRequired</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    widthSize: state.calcScreenSize.widthSize,</span><br><span class="line">    heightSize: state.calcScreenSize.heightSize</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    changeScreenSize: <span class="function">(<span class="params">widthSize, heightSize</span>) =&gt;</span> &#123;</span><br><span class="line">      dispatch(Actions.changeScreenSize(widthSize, heightSize));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(CalcScreenSize);</span><br></pre></td></tr></table></figure></p><p>calcScreenSize/Reducer：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ActionTypes <span class="keyword">from</span> <span class="string">'./ActionTypes'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initValues = &#123;</span><br><span class="line">  widthSize: <span class="number">1366</span>,</span><br><span class="line">  heightSize: <span class="number">736</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = initValues, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; widthSize, heightSize &#125; = action;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">  <span class="keyword">case</span> ActionTypes.CHANGE_SCREENSIZE:</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...state,</span><br><span class="line">      widthSize,</span><br><span class="line">      heightSize</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>其他需要图表自适应的组件都接收<code>widthSize</code>与<code>heightSize</code>参数，这样就能在<code>CalcScreenSize</code>动态计算出宽与高的时候能够触发zi自己的<code>componentWillReceiveProps()</code>，从而会触发<code>render</code>根据当前高度重新渲染div，并且能够在<code>componentDidUpdate()</code>中调用Echarts的<code>resize</code>实现图表的自适应。<br>render中重新确定div高度的代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; heightSize &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div id=<span class="string">"fileInfoMapShow"</span> style=&#123;&#123; <span class="attr">height</span>: <span class="string">`<span class="subst">$&#123;heightSize <span class="regexp">/ 12 * 10&#125;px`, width: '100%' &#125;&#125;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">      等待地图加载</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">    &lt;/</span>div&gt;</span></span></span><br><span class="line"><span class="string"><span class="subst">  );</span></span></span><br><span class="line"><span class="string"><span class="subst">&#125;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h2><p>这里存在的问题主要有两个：</p><ul><li>一是，由于需要图表自适应的组件所接受的props参数不只<code>widthSize</code>与<code>heightSize</code>，所以其他props参数的变化也会进入到<code>componentDidUpdate()</code>中，也会调用Echarts的<code>resize</code>方法，导致图表额外的自适应。</li><li>二是，如果原代码逻辑是在<code>componentWillReceiveProps()</code>获取到最新数据后更新Echarts图表数据，那么，在只变动<code>widthSize</code>与<code>heightSize</code>的情况下，除了引起Echarts的自适应，也会引起图表的更新。</li></ul><p>针对这两个问题，可以通过在<code>componentDidUpdate()</code>与<code>componentWillReceiveProps()</code>中加更新限制条件来解决。不过加条件的方式提高了单个组件的前台代码逻辑复杂度，并且需要在每个组件中都添加相同的逻辑判断。</p><h1 id="结合自定义的事件触发"><a href="#结合自定义的事件触发" class="headerlink" title="结合自定义的事件触发"></a>结合自定义的事件触发</h1><p>这种方式是考虑上面方案存在的问题给出的自己设想的解决方案。<br>简单的来讲，自适应大小这个功能主要是实现当页面大小改变，需要根据页面大小调整自身图表大小的Echarts实例完成自适应。这比较像观察者模式，或者说发布-订阅模式：</p><ul><li>将页面信息抽象出来成为组件，并看作为主题</li><li>将待自适应的Echarts图表作为多个观察者</li><li>待自适应的Echarts图表注册：监听页面大小变化</li><li>当页面大小发生变化时，页面信息组件通知到每个已注册监该事件的Echarts图表，实现图表的自适应</li></ul><h2 id="主题接口（Subject）"><a href="#主题接口（Subject）" class="headerlink" title="主题接口（Subject）"></a>主题接口（Subject）</h2><p>screenSizeChangeEvent.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventTarget</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventTarget.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: EventTarget,</span><br><span class="line">  handlers: &#123;&#125;, <span class="comment">// 共享注册列表，方便多位置调用</span></span><br><span class="line">  addHandler(type, handler) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.handlers[type] === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handlers[type] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.handlers[type].push(handler);</span><br><span class="line">  &#125;,</span><br><span class="line">  execute(event) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[event.type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> handlers = <span class="keyword">this</span>.handlers[event.type];</span><br><span class="line">      handlers.forEach(<span class="function">(<span class="params">handlerItem</span>) =&gt;</span> &#123;</span><br><span class="line">        handlerItem();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  remmoveHandler(type, handler) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> handlers = <span class="keyword">this</span>.handlers[type];</span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">const</span> len = handlers.length;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (handlers[i] === handler) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      handlers.splice(i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; EventTarget &#125;;</span><br></pre></td></tr></table></figure></p><p>使用原型模式创建主题接口对象，这样可以实现注册列表（handlers）的共享，只要创建该接口对象，就可以获取到相关主题已注册的对象列表。  </p><h2 id="主题（发布者）"><a href="#主题（发布者）" class="headerlink" title="主题（发布者）"></a>主题（发布者）</h2><p>优化上面的CalcScreenSize.jsx组件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Actions <span class="keyword">from</span> <span class="string">'./Action'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DOMEventUtil <span class="keyword">from</span> <span class="string">'../public/DOMEventUtil'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; EventTarget &#125; <span class="keyword">from</span> <span class="string">'../public/screenSizeChangeEvent'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalcScreenSize</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; changeScreenSize &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    DOMEventUtil.addHandler(<span class="built_in">window</span>, <span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">      changeScreenSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line">    &#125;);</span><br><span class="line">    DOMEventUtil.addHandler(<span class="built_in">window</span>, <span class="string">'resize'</span>, () =&gt; &#123;</span><br><span class="line">      changeScreenSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> eventTarget = <span class="keyword">new</span> EventTarget();</span><br><span class="line">    eventTarget.execute(&#123; <span class="attr">type</span>: <span class="string">'echartsResize'</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; widthSize, heightSize &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> eventTarget = <span class="keyword">new</span> EventTarget();</span><br><span class="line">    eventTarget.execute(&#123; <span class="attr">type</span>: <span class="string">'echartsResize'</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CalcScreenSize.propTypes = &#123;</span><br><span class="line">  changeScreenSize: PropTypes.func.isRequired,</span><br><span class="line">  widthSize: PropTypes.number.isRequired,</span><br><span class="line">  heightSize: PropTypes.number.isRequired</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    widthSize: state.calcScreenSize.widthSize,</span><br><span class="line">    heightSize: state.calcScreenSize.heightSize</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    changeScreenSize: <span class="function">(<span class="params">widthSize, heightSize</span>) =&gt;</span> &#123;</span><br><span class="line">      dispatch(Actions.changeScreenSize(widthSize, heightSize));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(CalcScreenSize);</span><br></pre></td></tr></table></figure></p><p>每当页面大小改变，便会触发发布者执行主题接口中已注册订阅者的相关命令</p><h2 id="观察者（订阅者）"><a href="#观察者（订阅者）" class="headerlink" title="观察者（订阅者）"></a>观察者（订阅者）</h2><p>优化上面的DMMap.jsx，使它成为观察者<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Actions <span class="keyword">from</span> <span class="string">'./Action'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; EventTarget &#125; <span class="keyword">from</span> <span class="string">'../public/screenSizeChangeEvent'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DMMap</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      myCharts: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.mapShow = <span class="keyword">this</span>.mapShow.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> mapDiv = <span class="built_in">document</span>.getElementById(<span class="string">'fileInfoMapShow'</span>);</span><br><span class="line">    <span class="keyword">const</span> myCharts = echarts.init(mapDiv);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      myCharts</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> eventTarget = <span class="keyword">new</span> EventTarget(); <span class="comment">// 获取主题</span></span><br><span class="line">    eventTarget.addHandler(<span class="string">'echartsResize'</span>, myCharts.resize); <span class="comment">// 将发布者广播时调用的方法设置为Echarts的resize</span></span><br><span class="line">    <span class="keyword">this</span>.mapShow(myCharts);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; myCharts &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">this</span>.mapShow(myCharts);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mapShow(myCharts) &#123; <span class="comment">// 为了只描述大小自适应，已将其他依赖参数删除</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">      <span class="comment">// ...省略配置参数信息</span></span><br><span class="line">    &#125;;</span><br><span class="line">    myCharts.clear();</span><br><span class="line">    myCharts.setOption(option);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; heightSize &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div id=<span class="string">"fileInfoMapShow"</span> style=&#123;&#123; <span class="attr">height</span>: <span class="string">`<span class="subst">$&#123;heightSize <span class="regexp">/ 12 * 10&#125;px`, width: '100%' &#125;&#125;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">        等待地图加载</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">      &lt;/</span>div&gt;</span></span></span><br><span class="line"><span class="string"><span class="subst">    );</span></span></span><br><span class="line"><span class="string"><span class="subst">  &#125;</span></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DMMap.propTypes = &#123;</span></span><br><span class="line"><span class="string">  heightSize: PropTypes.number.isRequired</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function mapStateToProps(state) &#123;</span></span><br><span class="line"><span class="string">  return &#123;</span></span><br><span class="line"><span class="string">    heightSize: state.calcScreenSize.heightSize</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default connect(mapStateToProps)(DMMap);</span></span><br></pre></td></tr></table></figure></p><p>把Echarts的<code>resize</code>方法作为观察者模式当中的<code>update</code>函数。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>通过这种方式，完成了对JS中事件的封装，使得每个想要实现自适应的组件只要注册就可以实现自身自适应函数的调用。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>JavaScript高级程序设计</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-参数对象新增方法</title>
      <link href="/2018/12/29/JS-%E5%8F%82%E6%95%B0%E5%AF%B9%E8%B1%A1%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/"/>
      <url>/2018/12/29/JS-%E5%8F%82%E6%95%B0%E5%AF%B9%E8%B1%A1%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>通常情况下，不会对函数中传入的参数进行修改操作，但是在编写通用函数，对元素进行新增方法（事件）的时候，可能会使用对参数的修改从而实现在引用对象上新增方法（事件）。</p><a id="more"></a><h1 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h1><p>直接将要新增的方法（事件）添加到元素上：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHandler</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">element[<span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hohoho</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">'ohHoHoHo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Btn = &#123;</span><br><span class="line">color: <span class="string">'blue'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addHandler(Btn, <span class="string">'Say'</span>, hohoho);</span><br><span class="line"></span><br><span class="line">Btn.onSay();</span><br></pre></td></tr></table></figure></p><p>输出结果为：onHoHoHo弹窗</p><p>该方法执行没问题，但是在ESLint中配置了<strong>禁止对函数参数再赋值 (no-param-reassign)</strong>时，上面代码会报错。<br><code>no-param-reassign</code>规范如下：</p><blockquote><p>对函数参数中的变量进行赋值可能会误导读者，导致混乱，也会改变 arguments 对象。通常，对函数参数进行赋值并非有意为之，更多的是程序员的书写错误做成的。<br>当函数参数被修改时，该规则也可能会失效。由此造成的副作用可能导致不直观的执行流程，使错误难以跟踪。</p></blockquote><p>下面有两种方式可以算很取巧的避免检测……</p><ol><li>临时对象方式–会多创建一个引用。  </li><li>defineProperty方法–会修改原对象属性。</li></ol><h1 id="临时对象"><a href="#临时对象" class="headerlink" title="临时对象"></a>临时对象</h1><p>虽然函数参数传递都是按值传递，但是element还是会按引用访问同一个对象，所以可以通过将参数赋值给临时对象，在临时对象上增加属性来避免报错。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHandler2</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> ele = element;</span><br><span class="line">ele[<span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hohoho</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">'ohHoHoHo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Btn2 = &#123;</span><br><span class="line">color: <span class="string">'blue'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addHandler2(Btn2, <span class="string">'Say'</span>, hohoho);</span><br><span class="line">Btn2.onSay();</span><br></pre></td></tr></table></figure></p><h1 id="defineProperty方法"><a href="#defineProperty方法" class="headerlink" title="defineProperty方法"></a>defineProperty方法</h1><p>使用ES5提供的属性定义方法修改传入对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHandler1</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(element, <span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>, &#123;</span><br><span class="line">  value: handler</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hohoho</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">'ohHoHoHo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Btn1 = &#123;</span><br><span class="line">color: <span class="string">'blue'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addHandler1(Btn1, <span class="string">'Say'</span>, hohoho);</span><br><span class="line">Btn1.onSay();</span><br></pre></td></tr></table></figure></p><p>如果有必要，可以设置新增属性的<code>configurable</code>、<code>enumerable</code>、<code>writable</code>，如果不指定，这三个都为<code>false</code>。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>js中参数按值传递，该规则的目的可理解为避免误将普通变量参数赋值导致与代码预期不一致，或者是修改了对象参数导致arguments改变，使得可读性变差。可以参考<a href="https://github.com/airbnb/javascript/issues/766" target="_blank" rel="noopener">aribnb issue #766</a><br>但另一方面，例如在js红宝书中建立通用方法，对元素增加绑定事件时，使用了直接修改参数的方法。虽然违背了该规则，但是没有造成明显弊端，对此可以单独配置在该方法中此规则失效。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://eslint.bootcss.com/docs/rules/no-param-reassign/" target="_blank" rel="noopener">ESLint 禁止对函数参数再赋值 (no-param-reassign)</a><br><a href="https://stackoverflow.com/questions/35637770/how-to-avoid-no-param-reassign-when-setting-a-property-on-a-dom-object" target="_blank" rel="noopener">How to avoid no-param-reassign when setting a property on a DOM object</a><br><a href="https://github.com/airbnb/javascript/issues/766" target="_blank" rel="noopener">How to deal with DOM manipulation #766</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> ESLint </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-创建对象</title>
      <link href="/2018/12/17/JS-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/12/17/JS-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>对js（ES5）中创建对象的主要三种方式：工厂模式、构造函数模式、原型模式进行比较分析，<br>并了解寄生构造函数模式与稳妥构造函数模式</p><a id="more"></a><h1 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h1><p>使用<code>new Object()</code>或者对象字面量都可以创建对象，但是这样创建的对象过于简单，不易于对象的属性与方法的扩展与继承。<br>下面讲的对象可以与<code>javaee</code>中的<code>bean</code>做类比。</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>对，首先可能想到的是使用设计模式中的<strong>工厂模式</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPizza</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.type = type;</span><br><span class="line">  o.bake = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Start~'</span>);</span><br><span class="line">    alert(<span class="keyword">this</span>.type);</span><br><span class="line">    alert(<span class="string">'End~'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cheesePizza = createPizza(<span class="string">'cheese'</span>);</span><br><span class="line"><span class="keyword">var</span> veggiePizza = createPizza(<span class="string">'veggie'</span>);</span><br><span class="line">cheesePizza.bake();</span><br></pre></td></tr></table></figure></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>工厂模式解决了创建多个类似对象的问题  </p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>对象无法识别，即创建出来的对象无法通过<code>instanceof</code>等分析出属于哪种类型</p><h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><p>用构造函数可用来创建特定类型的对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数首字母遵循OO语言惯例进行大写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pizza</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = type;</span><br><span class="line">  <span class="keyword">this</span>.bake = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Start~'</span>);</span><br><span class="line">    alert(<span class="keyword">this</span>.type);</span><br><span class="line">    alert(<span class="string">'End~'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cheesePizza = <span class="keyword">new</span> Pizza(<span class="string">'cheese'</span>);</span><br><span class="line"><span class="keyword">var</span> veggiePizza = <span class="keyword">new</span> Pizza(<span class="string">'veggie'</span>);</span><br><span class="line">cheesePizza.bake();</span><br></pre></td></tr></table></figure></p><p>与工厂模式相比：</p><ol><li>没有在方法中显示创造对象（o）；</li><li>直接将属性与方法赋值给this；</li><li>没有<code>return</code>语句</li></ol><p>在用<code>new</code>的时候，会经历一下4步：</p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋值给新对象（此时this指向新对象）</li><li>执行构造函数代码（为对象添加属性）</li><li>返回新对象</li></ol><blockquote><p>如果不使用new，将构造函数当做函数使用，则this指向Global对象（在浏览器中为window对象），当然，可以使用call方法来指定作用域，例如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">Pizza.call(o, <span class="string">'salty'</span>);</span><br><span class="line">o.bake();</span><br></pre></td></tr></table></figure></p></blockquote><p>使用<strong>构造函数方法</strong>，每个实例对象都有一个<code>constructor</code>构造函数属性，该属性指向Pizza（使用对象字面量、工厂模式方法创建的对象该属性指向Object）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheesePizza.constructor == Pizza</span><br></pre></td></tr></table></figure></p><p>检查某个对象属于哪种类型，一般使用<code>instanceof</code>，cheesePizza同时属于<code>Pizza</code>与<code>Object</code>（之所以属于Object，是因为所有对象均继承于Object）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cheesePizza <span class="keyword">instanceof</span> Pizza;</span><br><span class="line">cheesePizza <span class="keyword">instanceof</span> <span class="built_in">Object</span>;</span><br></pre></td></tr></table></figure></p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>与工厂模式相比，构造函数模式能够识别出对象类型<br>与下面的原型模式相比，能够实现对象属性的互相独立，在引用类型属性上很有用</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>每个实例对象的方法都是独立的，导致方法不能够共享</p><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>每个函数（不是实例对象）都有一个<code>prototype</code>属性，该属性是一个指针，指向一个对象，对象的用途是包含所有实例共享的属性和方法。prototype通过调用构造函数创建的那个对象实例的<strong>原型对象</strong>。使用原型对象的好处是可以让所有实例对象共享属性与方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pizza</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Pizza.prototype.type = <span class="string">'original'</span></span><br><span class="line">Pizza.prototype.bake = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'Start~'</span>);</span><br><span class="line">  alert(<span class="keyword">this</span>.type);</span><br><span class="line">  alert(<span class="string">'End~'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cheesePizza = <span class="keyword">new</span> Pizza();</span><br><span class="line">cheesePizza.type = <span class="string">'cheese'</span>;</span><br><span class="line"><span class="keyword">var</span> veggiePizza = <span class="keyword">new</span> Pizza();</span><br><span class="line">veggiePizza.type = <span class="string">'veggie'</span>;</span><br><span class="line"></span><br><span class="line">cheesePizza.bake();</span><br><span class="line">veggiePizza.bake();</span><br></pre></td></tr></table></figure></p><p>各个对象共享属性与方法，同时每个对象都可以建立自己的属性，并<strong>屏蔽</strong>掉原型对象的同名属性，因为共享属性与方法，所以以下等式成立<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheesePizza.bake == veggiePizza.bake</span><br></pre></td></tr></table></figure></p><h3 id="对象字面量重写原型对象"><a href="#对象字面量重写原型对象" class="headerlink" title="对象字面量重写原型对象"></a>对象字面量重写原型对象</h3><p>也可以通过对象字面量来重写整个原型对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Pizza.prototype = &#123;</span><br><span class="line">  type: <span class="string">'original'</span>,</span><br><span class="line">  bake: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Start~'</span>);</span><br><span class="line">    alert(<span class="keyword">this</span>.type);</span><br><span class="line">    alert(<span class="string">'End~'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样完全重写，原型对象上的<code>constructor</code>属性不再指向<code>Pizza</code>函数（全新的constructor指向Object），不过不影响通过<code>instanceof</code>来识别对象类型。如果<code>constructor</code>特别重要的话，可以显式将它置为适当的值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Pizza.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Pizza,</span><br><span class="line">  type: 'original',</span><br><span class="line">  bake: function() &#123;</span><br><span class="line">    alert(<span class="string">'Start~'</span>);</span><br><span class="line">    alert(<span class="keyword">this</span>.type);</span><br><span class="line">    alert(<span class="string">'End~'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过这种方式会将<code>constructor</code>的属性特征变为可枚举，而默认情况下它是不可枚举的，如果想不可枚举，可以使用<code>Object.defineProperty()</code>方法。</p><h3 id="原型的动态性"><a href="#原型的动态性" class="headerlink" title="原型的动态性"></a>原型的动态性</h3><p>对原型对象的修改会体现在实例对象上，即使实例对象先被创建。但是通过对象字面量重写的原型对象则没有该动态性</p><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><p>定义在原型对象上的属性，能够保证在各实例对象上的共享</p><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><p>对于引用类型的属性，各实例的共享会导致额外的问题。</p><h2 id="组合使用构造函数模式与原型模式"><a href="#组合使用构造函数模式与原型模式" class="headerlink" title="组合使用构造函数模式与原型模式"></a>组合使用构造函数模式与原型模式</h2><p>整合构造函数模式与原型模式，构造函数模式用于定义实例属性，原型模式用于定义方法和共享属性。</p><h2 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h2><h2 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h2><h2 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h2><h1 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h1><h2 id="关于原型模式中的原型对象"><a href="#关于原型模式中的原型对象" class="headerlink" title="关于原型模式中的原型对象"></a>关于原型模式中的原型对象</h2><h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><p>每个函数都会被一组特定的规则创建一个<code>prototype</code>属性，这个属性指向函数的原型对象。默认情况下，所有原型对象都会自动获得一个<code>constructor</code>（构造函数）属性，是一个指向prototype所在函数的指针。以Pizza为例<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pizza<span class="selector-class">.prototype</span><span class="selector-class">.constructor</span> == Pizza</span><br></pre></td></tr></table></figure></p><p>每当使用构造函数创建一个新实例时，该实例的内部将包含一个指针[[Prototype]]，指向原型对象，在chrome等浏览器中，该属性表现形式为<code>__proto__</code>（可以参见文章末尾），在chrome等浏览器中，以下等式成立：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheesePizza.__proto__.constructor == Pizza</span><br></pre></td></tr></table></figure></p><p>构造函数、原型对象、实例对象的关联关系为：</p><ul><li>构造函数中有<code>prototype</code>属性指向原型对象</li><li>原型对象中有<code>constructor</code>属性指向<code>prototype</code>所在的构造函数</li><li>实例对象中有[[Prototype]]属性指向原型对象，但是实例对象与构造函数没有直接关系  </li></ul><h4 id="对象属性搜索方式"><a href="#对象属性搜索方式" class="headerlink" title="对象属性搜索方式"></a>对象属性搜索方式</h4><p>搜索顺序为：</p><ol><li>先判断该属性是否存在于对象实例本身</li><li>在1不满足的条件下搜索原型对象</li></ol><h3 id="原型对象与实例对象"><a href="#原型对象与实例对象" class="headerlink" title="原型对象与实例对象"></a>原型对象与实例对象</h3><p>这部分要重点注意，在配置ESLint检查循环遍历代码的时候，会建议使用如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> foo) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(foo, key)) &#123;</span><br><span class="line">        doSomething(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>for-in</code>循环会返回所有可通过对象访问的、可枚举的属性，通过<code>hasOwnProperty()</code>方法可以区分某属性是存在于原型对象还是实例对象上，从而保证不期望的原型对象属性被遍历。若想遍历只在实例对象上的属性，建议使用<code>Object.keys()</code>代替<code>for-in</code>循环，返回结果为实例对象属性数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(cheesePizza);</span><br></pre></td></tr></table></figure></p><blockquote><p>如果想要获得实例对象所有属性，可以使用<code>Object.getOwnPropertyNames()</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(cheesePizza)</span><br><span class="line">&gt; [<span class="string">"type"</span>]</span><br><span class="line">  <span class="number">0</span>: <span class="string">"type"</span></span><br><span class="line">  length: <span class="number">1</span></span><br><span class="line">  __proto__: <span class="built_in">Array</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="各创建模式在Chrome浏览器中的表现"><a href="#各创建模式在Chrome浏览器中的表现" class="headerlink" title="各创建模式在Chrome浏览器中的表现"></a>各创建模式在Chrome浏览器中的表现</h1><p>可以通过Chrome浏览器观察使用工厂模式创建的cheesePizza对象属性为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cheesePizza</span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">"cheese"</span>, <span class="attr">bake</span>: ƒ&#125;</span><br><span class="line">  bake: ƒ ()</span><br><span class="line">  type: <span class="string">"cheese"</span></span><br><span class="line">  __proto__:</span><br><span class="line">    <span class="keyword">constructor</span>: ƒ Object()</span><br><span class="line">    hasOwnProperty: ƒ hasOwnProperty()</span><br><span class="line">    isPrototypeOf: ƒ isPrototypeOf()</span><br><span class="line">    propertyIsEnumerable: ƒ propertyIsEnumerable()</span><br><span class="line">    toLocaleString: ƒ toLocaleString()</span><br><span class="line">    toString: ƒ toString()</span><br><span class="line">    valueOf: ƒ valueOf()</span><br><span class="line">    __defineGetter__: ƒ __defineGetter__()</span><br><span class="line">    __defineSetter__: ƒ __defineSetter__()</span><br><span class="line">    __lookupGetter__: ƒ __lookupGetter__()</span><br><span class="line">    __lookupSetter__: ƒ __lookupSetter__()</span><br><span class="line">    get __proto__: ƒ __proto__()</span><br><span class="line">    set __proto__: ƒ __proto__()</span><br></pre></td></tr></table></figure></p><p>使用构造函数模式创建cheesePizza对象属性为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cheesePizza</span><br><span class="line">Pizza &#123;<span class="attr">type</span>: <span class="string">"cheese"</span>, <span class="attr">bake</span>: ƒ&#125;</span><br><span class="line">  bake: ƒ ()</span><br><span class="line">  type: <span class="string">"cheese"</span></span><br><span class="line">  __proto__:</span><br><span class="line">    <span class="keyword">constructor</span>: ƒ Pizza(type)</span><br><span class="line">    __proto__:</span><br><span class="line">      <span class="keyword">constructor</span>: ƒ Object()</span><br><span class="line">      hasOwnProperty: ƒ hasOwnProperty()</span><br><span class="line">      isPrototypeOf: ƒ isPrototypeOf()</span><br><span class="line">      propertyIsEnumerable: ƒ propertyIsEnumerable()</span><br><span class="line">      toLocaleString: ƒ toLocaleString()</span><br><span class="line">      toString: ƒ toString()</span><br><span class="line">      valueOf: ƒ valueOf()</span><br><span class="line">      __defineGetter__: ƒ __defineGetter__()</span><br><span class="line">      __defineSetter__: ƒ __defineSetter__()</span><br><span class="line">      __lookupGetter__: ƒ __lookupGetter__()</span><br><span class="line">      __lookupSetter__: ƒ __lookupSetter__()</span><br><span class="line">      get __proto__: ƒ __proto__()</span><br><span class="line">      set __proto__: ƒ __proto__()</span><br></pre></td></tr></table></figure></p><p>使用原型模式创建cheesePizza对象属性为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cheesePizza</span><br><span class="line">Pizza &#123;<span class="attr">type</span>: <span class="string">"cheese"</span>&#125;</span><br><span class="line">  type: <span class="string">"cheese"</span></span><br><span class="line">  __proto__:</span><br><span class="line">    bake: ƒ ()</span><br><span class="line">    type: <span class="string">"original"</span></span><br><span class="line">    <span class="keyword">constructor</span>: ƒ Pizza()</span><br><span class="line">    __proto__:</span><br><span class="line">      <span class="keyword">constructor</span>: ƒ Object()</span><br><span class="line">      hasOwnProperty: ƒ hasOwnProperty()</span><br><span class="line">      isPrototypeOf: ƒ isPrototypeOf()</span><br><span class="line">      propertyIsEnumerable: ƒ propertyIsEnumerable()</span><br><span class="line">      toLocaleString: ƒ toLocaleString()</span><br><span class="line">      toString: ƒ toString()</span><br><span class="line">      valueOf: ƒ valueOf()</span><br><span class="line">      __defineGetter__: ƒ __defineGetter__()</span><br><span class="line">      __defineSetter__: ƒ __defineSetter__()</span><br><span class="line">      __lookupGetter__: ƒ __lookupGetter__()</span><br><span class="line">      __lookupSetter__: ƒ __lookupSetter__()</span><br><span class="line">      get __proto__: ƒ __proto__()</span><br><span class="line">      set __proto__: ƒ __proto__()</span><br></pre></td></tr></table></figure></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://eslint.bootcss.com/docs/rules/guard-for-in/" target="_blank" rel="noopener">ESLint 需要约束 for-in (guard-for-in)</a>  </p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-bind方法参数分析</title>
      <link href="/2018/12/02/JS-bind%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90/"/>
      <url>/2018/12/02/JS-bind%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>js ECMAScript5中，bind()方法传入不同参数的使用分析<br><a id="more"></a></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">'2'</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="string">'3'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">atest</span>(<span class="params">b, c, d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">  <span class="built_in">console</span>.log(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> btest = atest;</span><br><span class="line"><span class="keyword">var</span> ctest = atest.bind(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">var</span> dtest = atest.bind(<span class="keyword">this</span>, <span class="number">40</span>, <span class="number">50</span>);</span><br><span class="line">atest(); <span class="comment">// 100 undefine un un</span></span><br><span class="line">btest(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>); <span class="comment">// 100 4 5 6</span></span><br><span class="line">ctest(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>); <span class="comment">// 100 4 5 6</span></span><br><span class="line">dtest(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>); <span class="comment">// 100 40 50 4</span></span><br></pre></td></tr></table></figure><p>bind()与call()、apply()都是用来在特定的作用域中调用函数，不同在于，bind()返回的是个新函数，而call()、apply()会立即执行。  </p><p>bind()中除了绑定作用域，含有参数的相应解释为：  </p><blockquote><p>bind()的另一个最简单的用法是使一个函数拥有预设的初始参数。这些参数（如果有的话）作为bind()的第二个参数跟在this（或其他对象）后面，之后它们会被插入到目标函数的参数列表的开始位置，传递给绑定函数的参数会跟在它们的后面。</p></blockquote><p>Tips:<br>apply()需要传入参数数组<br>call()需要传入对应参数</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">Function.prototype.bind()</a>   </p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OGG+Kafka-集群重启记</title>
      <link href="/2018/12/01/OGG+Kafka-%E9%9B%86%E7%BE%A4%E9%87%8D%E5%90%AF%E8%AE%B0/"/>
      <url>/2018/12/01/OGG+Kafka-%E9%9B%86%E7%BE%A4%E9%87%8D%E5%90%AF%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>监控实时处理界面的时候，发现近十分钟的记录没有同步，逐一排查发现是主机存储被写满，导致Kafka集群挂了，连同搭载在这个主机上的OGG同步容器也挂掉了。<br><a id="more"></a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Kafka集群为在主机上的容器里运行。<br>OGG目的端进程在主机上的容器里运行（共用Kafka集群的主机）。</p><h2 id="Kafka集群重启"><a href="#Kafka集群重启" class="headerlink" title="Kafka集群重启"></a>Kafka集群重启</h2><h3 id="问题确认"><a href="#问题确认" class="headerlink" title="问题确认"></a>问题确认</h3><p>在发现前台不实时展示数据时，检查源端数据库状态确认无异常，确认问题出在Kafka+OGG的集群上。<br>在检查Kafka+OGG的集群主机时发现主机空间已满，导致集群容器无法登录。<br>将主机上的垃圾日志删除后，登录集群容器通过生产者、消费者测试集群可用性，发现生产者无法生产数据，报错集群节点不可用。  </p><h3 id="重启集群"><a href="#重启集群" class="headerlink" title="重启集群"></a>重启集群</h3><p>主要是集群节点容器的重启<br>容器通过docker-compose管理  </p><ol><li>将对应节点容器<code>stop</code>2</li><li>执行<code>docker-compose up -d</code>重启节点</li><li>进入各节点容器，配置hosts、配置zk、kafka启动参数（stop一般不需要重新配置），启动zk、kafka服务</li><li>启动生产者、消费者，进行测试，确认消息能够正常发送、接收</li></ol><h2 id="OGG同步重启"><a href="#OGG同步重启" class="headerlink" title="OGG同步重启"></a>OGG同步重启</h2><p>查看OGG的状态，发现进程都处于<code>RUNNING</code>状态，但是没有同步到源端记录。  </p><h3 id="单纯进程停启（未解决问题）"><a href="#单纯进程停启（未解决问题）" class="headerlink" title="单纯进程停启（未解决问题）"></a>单纯进程停启（未解决问题）</h3><p>将源端、目的端的OGG进程（包括MGR、EXTRACT、REPLICAT）停启，发现并未同步到记录</p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>简单操作发现无法解决问题后，进行原因分析：</p><h4 id="查看-dirdat-kf-文件是否实时更新"><a href="#查看-dirdat-kf-文件是否实时更新" class="headerlink" title="查看./dirdat/kf*文件是否实时更新"></a>查看<code>./dirdat/kf*</code>文件是否实时更新</h4><p>确认在进程存在的情况下，源端、目的端数据文件都在实时更新，确认源端的EXTRACT进程（包括记录提取的EXT_KF进程与推送数据文件的PUM_KF进程）正常。</p><h4 id="分析目的端的OGG进程信息"><a href="#分析目的端的OGG进程信息" class="headerlink" title="分析目的端的OGG进程信息"></a>分析目的端的OGG进程信息</h4><p>1、查看<code>REPLICAT</code>进程信息：<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GGSCI (c9a557ce57ec) <span class="number">23</span>&gt; info REP_KF</span><br><span class="line"></span><br><span class="line">REPLICAT   REP_KF    <span class="keyword">Last</span> Started <span class="number">2018</span><span class="number">-12</span><span class="number">-01</span> <span class="number">09</span>:<span class="number">08</span>   Status RUNNING</span><br><span class="line">Checkpoint Lag       <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> (updated <span class="number">00</span>:<span class="number">00</span>:<span class="number">01</span> ago)</span><br><span class="line">Process ID           <span class="number">5796</span></span><br><span class="line"><span class="keyword">Log</span> <span class="keyword">Read</span> Checkpoint  <span class="keyword">File</span> /usr/local/work/ogg/dirdat/kf000000026</span><br><span class="line">                     <span class="keyword">First</span> <span class="keyword">Record</span>  RBA <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>发现<code>Log Read Checkpoint</code>处于一个超前的点，导致无法获取最新的记录</p><p>2、查看最近事务点<br>将源端的OGG进程停止，在目的端查看最近事务点<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@c9a557ce57ec ogg]# ./logdump</span><br><span class="line"></span><br><span class="line">Oracle GoldenGate <span class="keyword">Log</span> <span class="keyword">File</span> Dump Utility</span><br><span class="line"><span class="keyword">Version</span> <span class="number">12.3</span><span class="number">.0</span><span class="number">.1</span><span class="number">.2</span> OGGCORE_OGGADP<span class="number">.12</span><span class="number">.3</span><span class="number">.0</span><span class="number">.1</span><span class="number">.2</span>_PLATFORMS_180712<span class="number">.2305</span></span><br><span class="line"></span><br><span class="line">Copyright (<span class="keyword">C</span>) <span class="number">1995</span>, <span class="number">2018</span>, Oracle and/or its affiliates. <span class="keyword">All</span> rights reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Logdump <span class="number">36</span> &gt;open ./dirdat/kf000016</span><br><span class="line">Current LogTrail is /usr/local/work/ogg/dirdat/kf000016</span><br><span class="line">Logdump <span class="number">37</span> &gt;ENV</span><br><span class="line"><span class="keyword">Version</span>             : Linux, x64, <span class="number">64</span>bit (optimized) on Jul <span class="number">13</span> <span class="number">2018</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">42</span></span><br><span class="line"></span><br><span class="line">Current <span class="keyword">Directory</span>   : /usr/local/work/ogg</span><br><span class="line">LogTrail            : /usr/local/work/ogg/dirdat/kf000016</span><br><span class="line">Trail <span class="keyword">Format</span>        : New</span><br><span class="line">Trail <span class="keyword">Format</span> <span class="keyword">Version</span>: RELEASE <span class="number">11.2</span></span><br><span class="line"><span class="keyword">End</span> of <span class="keyword">File</span>         : <span class="number">2336566</span></span><br><span class="line">Current <span class="keyword">Position</span>    : <span class="number">0</span>    <span class="keyword">Forward</span></span><br><span class="line"><span class="keyword">Next</span> <span class="keyword">Position</span>       : <span class="number">0</span></span><br><span class="line"><span class="keyword">Last</span> Modtime        : <span class="number">2018</span>/<span class="number">12</span>/<span class="number">01</span> <span class="number">09</span>:<span class="number">53</span>:<span class="number">34.000</span><span class="number">.000</span></span><br><span class="line"><span class="keyword">Display</span> RecLen      : <span class="number">140</span></span><br><span class="line">Logtrail Filter     : <span class="keyword">On</span></span><br><span class="line">Trans History       : <span class="number">0</span> Transactions, Records <span class="number">100</span>, Bytes <span class="number">100000</span></span><br><span class="line">LargeBlock <span class="keyword">I</span>/<span class="keyword">O</span>      : <span class="keyword">On</span>, Blocksize <span class="number">57344</span></span><br><span class="line">Local System        : LittleEndian</span><br><span class="line">Metadata <span class="keyword">Byte</span> <span class="keyword">Order</span> : BigEndian    </span><br><span class="line">Logtrail Data       : BigEndian/ASCII</span><br><span class="line">Logtrail Headers    : ASCII</span><br><span class="line">Dump                : ASCII</span><br><span class="line">Savefile comments   : <span class="keyword">Off</span></span><br><span class="line">Timeoffset          : LOCAL</span><br><span class="line"><span class="keyword">Scan</span> Notify <span class="keyword">Interval</span>: <span class="number">10000</span> records, Scrolling <span class="keyword">On</span>  </span><br><span class="line"></span><br><span class="line">Logdump <span class="number">38</span> &gt;pos <span class="number">2336566</span></span><br><span class="line">Reading forward from RBA <span class="number">2336566</span></span><br><span class="line">Logdump <span class="number">39</span> &gt;n</span><br><span class="line">Logdump <span class="number">40</span> &gt;</span><br></pre></td></tr></table></figure></p><ol><li>在OGG目录下使用logdump工具查询同步数据文件的状态</li><li>打开最新的数据文件<code>open ./dirdat/kf000016</code></li><li>检查文件状态<code>ENV</code></li><li><code>End of File</code>行表示该文件最后的事务为2336566</li><li><code>pos 2336566</code>跳转到该事务检查是否有后续事务</li><li>确认无后续事务，准备修改REP进程点</li></ol><p>3、修改REP进程检查点<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@c9a557ce57ec ogg]</span># ./<span class="selector-tag">ggsci</span></span><br><span class="line"><span class="selector-tag">GGSCI</span> (c9a557ce57ec) <span class="selector-tag">25</span>&gt; <span class="selector-tag">stop</span> <span class="selector-tag">REP_KF</span></span><br><span class="line"><span class="selector-tag">GGSCI</span> (c9a557ce57ec) <span class="selector-tag">27</span>&gt; <span class="selector-tag">alter</span> <span class="selector-tag">replicat</span> <span class="selector-tag">REP_KF</span>,<span class="selector-tag">extseqno</span> <span class="selector-tag">16</span>,<span class="selector-tag">extrba</span> <span class="selector-tag">2336566</span></span><br><span class="line"><span class="selector-tag">GGSCI</span> (c9a557ce57ec) <span class="selector-tag">28</span>&gt; <span class="selector-tag">info</span> <span class="keyword">all</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Program</span>     <span class="selector-tag">Status</span>      <span class="selector-tag">Group</span>       <span class="selector-tag">Lag</span> <span class="selector-tag">at</span> <span class="selector-tag">Chkpt</span>  <span class="selector-tag">Time</span> <span class="selector-tag">Since</span> <span class="selector-tag">Chkpt</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">MANAGER</span>     <span class="selector-tag">RUNNING</span>                                           </span><br><span class="line"><span class="selector-tag">REPLICAT</span>    <span class="selector-tag">STOPPED</span>     <span class="selector-tag">REP_KF</span>      <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>      <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:04</span></span><br><span class="line"><span class="selector-tag">GGSCI</span> (c9a557ce57ec) <span class="selector-tag">29</span>&gt; <span class="selector-tag">info</span> <span class="selector-tag">REP_KF</span>                                     </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">REPLICAT</span>   <span class="selector-tag">REP_KF</span>    <span class="selector-tag">Initialized</span>   <span class="selector-tag">2018-12-01</span> <span class="selector-tag">09</span><span class="selector-pseudo">:12</span>   <span class="selector-tag">Status</span> <span class="selector-tag">STOPPED</span></span><br><span class="line"><span class="selector-tag">Checkpoint</span> <span class="selector-tag">Lag</span>       <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> (updated <span class="number">00</span>:<span class="number">00</span>:<span class="number">24</span> ago)</span><br><span class="line"><span class="selector-tag">Log</span> <span class="selector-tag">Read</span> <span class="selector-tag">Checkpoint</span>  <span class="selector-tag">File</span> /<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">work</span>/<span class="selector-tag">ogg</span>/<span class="selector-tag">dirdat</span>/<span class="selector-tag">kf000000016</span></span><br><span class="line">                     <span class="selector-tag">First</span> <span class="selector-tag">Record</span>  <span class="selector-tag">RBA</span> <span class="selector-tag">2336566</span></span><br><span class="line"><span class="selector-tag">GGSCI</span> (c9a557ce57ec) <span class="selector-tag">30</span>&gt; <span class="selector-tag">start</span> <span class="selector-tag">REP_KF</span></span><br><span class="line"><span class="selector-tag">GGSCI</span> (c9a557ce57ec) <span class="selector-tag">31</span>&gt; <span class="selector-tag">info</span> <span class="keyword">all</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Program</span>     <span class="selector-tag">Status</span>      <span class="selector-tag">Group</span>       <span class="selector-tag">Lag</span> <span class="selector-tag">at</span> <span class="selector-tag">Chkpt</span>  <span class="selector-tag">Time</span> <span class="selector-tag">Since</span> <span class="selector-tag">Chkpt</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">MANAGER</span>     <span class="selector-tag">RUNNING</span>                                           </span><br><span class="line"><span class="selector-tag">REPLICAT</span>    <span class="selector-tag">RUNNING</span>     <span class="selector-tag">REP_KF</span>      <span class="selector-tag">00</span><span class="selector-pseudo">:21</span><span class="selector-pseudo">:29</span>      <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span></span><br><span class="line"><span class="selector-tag">GGSCI</span> (c9a557ce57ec) <span class="selector-tag">38</span>&gt; <span class="selector-tag">info</span> <span class="selector-tag">REP_KF</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">REPLICAT</span>   <span class="selector-tag">REP_KF</span>    <span class="selector-tag">Last</span> <span class="selector-tag">Started</span> <span class="selector-tag">2018-12-01</span> <span class="selector-tag">09</span><span class="selector-pseudo">:13</span>   <span class="selector-tag">Status</span> <span class="selector-tag">RUNNING</span></span><br><span class="line"><span class="selector-tag">Checkpoint</span> <span class="selector-tag">Lag</span>       <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> (updated <span class="number">00</span>:<span class="number">00</span>:<span class="number">05</span> ago)</span><br><span class="line"><span class="selector-tag">Process</span> <span class="selector-tag">ID</span>           <span class="selector-tag">5842</span></span><br><span class="line"><span class="selector-tag">Log</span> <span class="selector-tag">Read</span> <span class="selector-tag">Checkpoint</span>  <span class="selector-tag">File</span> /<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">work</span>/<span class="selector-tag">ogg</span>/<span class="selector-tag">dirdat</span>/<span class="selector-tag">kf000016</span></span><br><span class="line">                     <span class="selector-tag">2018-12-01</span> <span class="selector-tag">10</span><span class="selector-pseudo">:03</span><span class="selector-pseudo">:13.518777</span>  <span class="selector-tag">RBA</span> <span class="selector-tag">2839506</span></span><br></pre></td></tr></table></figure></p><ol><li>在OGG目录下使用<code>./ggsci</code>工具进行进程管理</li><li><code>stop REP_KF</code>关闭REP_KF进程准备修改事务点</li><li><code>alter replicat REP_KF,extseqno 16,extrba 2336566</code>，<code>extseqno</code>表示同步数据文件的序列号，<code>extrba</code>表示事务点。在不指定文件序列号的情况下，默认序列号为0</li><li><code>start REP_KF</code>启动REPLICAT进程</li><li>隔段时间观察REP进程，发现事务点在更新，确认记录已正常同步</li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>把服务都放到同一个主机上的后果就是蛋都一起碎。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/zhengwei125/article/details/46503403" target="_blank" rel="noopener">第四章：OGG Checkpoint 详解</a><br><a href="https://blog.csdn.net/su377486/article/details/48439755" target="_blank" rel="noopener">ogg logdump详解</a>  </p>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Kafka </tag>
            
            <tag> OGG </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker-入门基础使用</title>
      <link href="/2018/10/10/Docker-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/10/Docker-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Docker容器化技术入门篇，包括如何进行Docker的安装，操作镜像、容器、仓库，如何将SpringBoot微服务部署到Docker中。<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要注意的是，安装使用root权限进行，主要基于两点：</p><ol><li>安装简单，不需要进行Docker启动时相关目录的修改与权限管理</li><li>安全性，这是最重要的点，具体原因可以参考如下文章<blockquote><p>如果需要支持非root用户直接运行Docker命令之前，那Docker Daemon的安全性还需要很多改进。但在这些改进实现之前，设置sudo规则是最好的选择。我们正在开发更好的解决方案，暂时我们仍然强烈推荐使用sudo</p></blockquote></li></ol><p><a href="http://dockone.io/article/589" target="_blank" rel="noopener">为什么我们不允许非root用户在CentOS、Fedora和RHEL上直接运行Docker命令</a><br><a href="http://www.projectatomic.io/blog/2015/08/why-we-dont-let-non-root-users-run-docker-in-centos-fedora-or-rhel/" target="_blank" rel="noopener">Why we don’t let non-root users run Docker in CentOS, Fedora, or RHEL </a></p><h3 id="官网下载安装包"><a href="#官网下载安装包" class="headerlink" title="官网下载安装包"></a>官网下载安装包</h3><p><a href="https://docs.docker.com/install/linux/docker-ce/binaries/#install-static-binaries" target="_blank" rel="noopener">Docker官网</a></p><h3 id="建docker用户、docker用户组，并赋权"><a href="#建docker用户、docker用户组，并赋权" class="headerlink" title="建docker用户、docker用户组，并赋权"></a>建docker用户、docker用户组，并赋权</h3><p>在root用户下执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adduser app_mesos</span><br><span class="line">groupadd docker</span><br><span class="line">passwd app_mesos</span><br><span class="line">usermod –G docker app_mesos</span><br><span class="line">chown -R app_mesos:docker jzjsyw <span class="comment">#将Docker安装目录修改所属</span></span><br><span class="line">chmod u+w /etc/sudoers <span class="comment">#给app_mesos增加切换root权限</span></span><br><span class="line">chmod u-w /etc/sudoers</span><br></pre></td></tr></table></figure></p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>在新建的<code>app_mesos</code>用户下执行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp docker<span class="regexp">/* /u</span>sr<span class="regexp">/bin/</span></span><br><span class="line">sudo dockerd</span><br></pre></td></tr></table></figure></p><p>切换root用户<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">777</span> <span class="meta">doc</span>*</span><br></pre></td></tr></table></figure></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>教程上是这样的：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>docker start</span><br></pre></td></tr></table></figure></p><p>如果是用的安装包安装的，可以用如下命令启动Docker守护进程<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dockerd <span class="meta">&amp;</span></span><br></pre></td></tr></table></figure></p><p>具体启动方式，可以参照<a href="https://docs.docker.com/install/linux/docker-ce/binaries/#install-static-binaries" target="_blank" rel="noopener">官方文档 Get Docker</a></p><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>镜像是Docker的基础，用户基于镜像来运行自己的容器。从一个方面来说：我们开发的程序运行在容器中，镜像相当于一个包含所有必要信息的容器源代码。</p><p>由于大部分程序都是基于操作系统的，所以最基础的镜像是实现了操作系统功能，例如<code>centos</code>、<code>ubuntu</code>，如果想要一个体积更小的镜像，可以试试<code>scratch</code>。</p><h3 id="联网下载镜像"><a href="#联网下载镜像" class="headerlink" title="联网下载镜像"></a>联网下载镜像</h3><p>如果所在的主机环境为离线环境，既不支持联网获取基础镜像，又无本地镜像仓库供使用，建议在自己电脑上安装一个联网的Docker环境，可以将镜像获取下来打包上传至离线环境。</p><p><strong>windows使用docker toolbox</strong></p><ol><li>官网下载安装包</li><li>点击安装，注意提示中依赖的软件都要安装！！！</li><li>点击Docker Quickstart Terminal启动</li><li>如果提示无法开启硬件虚拟化TLS啥错误，需要修改电脑的BIOS中的Intel Virtual Technology</li><li>在daocloud上注册用户（daocloud类似于一个国内版docker镜像仓库，官方仓库需要科学上网，否则无法注册）</li><li>docker login daocloud.io</li><li>docker pull 获取centos:7，如果中间出现server misbehaving，多半是dns出问题了</li><li>将centos镜像打包成tar文件，形成本地镜像</li><li>将centos.tar文件上传至离线主机</li><li>使用docker load将该镜像加载</li></ol><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><p>以centos镜像为例：</p><p>从仓库中拉取镜像<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">pull</span> <span class="selector-tag">centos</span><span class="selector-pseudo">:7</span></span><br></pre></td></tr></table></figure></p><p>查看本地所有镜像<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> $</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">daocloud.io/centos   7                   5182e96772bf        5 weeks ago         200MB</span><br><span class="line">centos               7                   5182e96772bf        5 weeks ago         200MB</span><br><span class="line">centos               latest              5182e96772bf        5 weeks ago         200MB</span><br></pre></td></tr></table></figure></p><p>运行镜像（此时也构建了第一个容器）,进入容器命令行模式<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> daocloud.io/centos:<span class="number">7</span> /bin/bash</span><br></pre></td></tr></table></figure></p><p>镜像打包成centos.tar文件<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o centos<span class="selector-class">.tar</span> daocloud.io/centos:<span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>删除镜像<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">rmi</span> <span class="selector-tag">centos</span><span class="selector-pseudo">:7</span></span><br></pre></td></tr></table></figure></p><p>使用的是REPOSITORY+TAG方式，也可以使用指定IMAGE ID方式</p><p>加载本地镜像<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -<span class="selector-tag">i</span> centos.tar</span><br></pre></td></tr></table></figure></p><p>修改镜像TAG<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">tag</span> <span class="title">daocloud</span>.io/centos:<span class="number">7</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/centos</span><br></pre></td></tr></table></figure></p><p>上传镜像<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">push</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/centos</span><br></pre></td></tr></table></figure></p><h3 id="编写自己第一个Hello-Docker镜像"><a href="#编写自己第一个Hello-Docker镜像" class="headerlink" title="编写自己第一个Hello Docker镜像"></a>编写自己第一个Hello Docker镜像</h3><p>1、最简单的C<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello Docker!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、建立build目录，将编译后可执行文件放入<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">gcc</span> -o <span class="keyword">build/hello </span>hello.c</span><br></pre></td></tr></table></figure></p><p>3、编写Dockerfile（功能类似于makefile）：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[app_mesos@localhost build]$ cat Dockerfile</span><br><span class="line"><span class="keyword">FROM</span> daocloud.io/centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> xukf xkf1273@gmail.com</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> hello /</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"/hello"</span>]</span></span><br></pre></td></tr></table></figure></p><p>FROM 是基础镜像，与docker images中的对应  </p><p>4、创建镜像<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t myhello:<span class="number">1</span> .</span><br></pre></td></tr></table></figure></p><p>5、查看当前镜像列表<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[app_mesos@localhost build]$ docker images</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">myhello              <span class="number">1</span>                   efb52d310e5f        <span class="number">13</span> seconds ago      <span class="number">200</span>MB</span><br><span class="line">daocloud.io/centos   <span class="number">7</span>                   <span class="number">5182e96772</span>bf        <span class="number">5</span> weeks ago         <span class="number">200</span>MB</span><br></pre></td></tr></table></figure></p><p>6、运行镜像 docker run<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[app_mesos@localhost jzjsyw]$ docker <span class="keyword">run</span><span class="bash"> -it myhello:1</span></span><br><span class="line"><span class="bash">Hello Docker!</span></span><br></pre></td></tr></table></figure></p><p>至此，一个基于centos系统的Hello Docker镜像就完成了</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>用户的系统都是运行在容器中的，镜像是Docker生命周期中的构建或打包阶段，容器是启动或执行阶段。</p><h3 id="相关命令-1"><a href="#相关命令-1" class="headerlink" title="相关命令"></a>相关命令</h3><p>查看所有容器<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">[app_mesos@localhost jzjsyw]$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                     PORTS                    NAMES</span><br><span class="line"><span class="number">8</span>e2c33ac04e7        <span class="number">132.42</span>.<span class="number">49.218</span>:<span class="number">5000</span>/kafka-zk:<span class="number">0.0</span>.<span class="number">1</span>   <span class="string">"/bin/bash"</span>              <span class="number">5</span> hours ago         Exited (<span class="number">137</span>) <span class="number">2</span> hours ago                            broker1</span><br><span class="line">de254d5b8ada        timing-setup-x:<span class="number">1</span>                    <span class="string">"java -jar /settle/s鈥?   26 hours ago        Up 26 hours                0.0.0.0:9190-&gt;8080/tcp   timing-setup-x</span></span><br></pre></td></tr></table></figure></p><p>停止容器<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">stop</span> de254d5b8ada</span><br></pre></td></tr></table></figure></p><p>停止一般是根据CONTAINER ID<br>启动刚停止的容器<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="literal">start</span> de254d5b8ada</span><br></pre></td></tr></table></figure></p><p>查看容器执行日志<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -<span class="built_in">t</span> de254d5b8ada</span><br></pre></td></tr></table></figure></p><p>删除容器<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> rm de254d5b8ada</span><br></pre></td></tr></table></figure></p><p>需要注意的是，如果一个镜像已被运行，必须先删除对应容器，才能删除该镜像</p><p>删除所有容器<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm `docker ps -a -q`</span><br></pre></td></tr></table></figure></p><h3 id="将开发的SpringBoot程序放到容器中运行"><a href="#将开发的SpringBoot程序放到容器中运行" class="headerlink" title="将开发的SpringBoot程序放到容器中运行"></a>将开发的SpringBoot程序放到容器中运行</h3><p>1、将工程jar包、依赖包都放到当前目录下，如果不是同一目录需要特别指定上下文</p><p>2、编写Dockerfile<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[app_mesos@localhost build]$ cat Dockerfile</span><br><span class="line"><span class="keyword">FROM</span> daocloud.io/centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> xukf</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u181-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="bash">ADD timingSetupX-0.0.1-SNAPSHOT.jar /settle/settle/bin/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk1.8.0_181</span></span><br><span class="line"><span class="bash">ENV JRE_HOME <span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span></span><br><span class="line"><span class="bash">ENV CLASSPATH .:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span></span><br><span class="line"><span class="bash">ENV PATH <span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">EXPOSE 8080</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"/settle/settle/bin/timingSetupX-0.0.1-SNAPSHOT.jar"</span>]</span></span><br></pre></td></tr></table></figure></p><p>ADD会将文件放到容器中指定目录后，自动解压tar包<br>COPY会将文件放到容器指定目录下<br>EVN指定容器运行时，内部环境变量，注意ENV是有顺序的，如果同时写，则默认同一层级没有赋值，例如<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ENV JAVA_HOME=<span class="regexp">/usr/local</span><span class="regexp">/jdk1.8.0_181 \</span></span><br><span class="line"><span class="regexp">JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span> \</span><br><span class="line">CLASSPATH=.:$&#123;JAVA_HOME&#125;/<span class="class"><span class="keyword">lib</span>:$&#123;<span class="title">JRE_HOME</span>&#125;/<span class="title">lib</span> \</span></span><br><span class="line">PATH=$&#123;JAVA_HOME&#125;/<span class="symbol">bin:</span>$&#123;PATH&#125;</span><br></pre></td></tr></table></figure></p><p>结果JRE_HOME值为：/jre，因为在JRE_HOME执行时，${JAVA_HOME}值为空</p><p>3、创建镜像<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t timingSetupX:<span class="number">1</span> .</span><br></pre></td></tr></table></figure></p><p>OK，镜像名不允许驼峰命名<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[app_mesos<span class="meta">@localhost</span> build]$ docker build -t <span class="string">timingSetupX:</span><span class="number">1</span> .</span><br><span class="line">invalid argument <span class="string">"timingSetupX:1"</span> <span class="keyword">for</span> <span class="string">"-t, --tag"</span> <span class="string">flag:</span> invalid reference <span class="string">format:</span> repository name must be lowercase</span><br><span class="line">See <span class="string">'docker build --help'</span>.</span><br></pre></td></tr></table></figure></p><p>修改镜像名timing-setup-x:1<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[app_mesos@localhost <span class="keyword">build</span>]$ docker <span class="keyword">build</span> -t timing-setup-x:<span class="number">1</span> .</span><br><span class="line">Sending <span class="keyword">build</span> context <span class="keyword">to</span> Docker daemon  <span class="number">1.625</span>GB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">10</span> : <span class="keyword">FROM</span> daocloud.io/centos:<span class="number">7</span></span><br><span class="line"> ---&gt; <span class="number">5182e96772</span>bf</span><br></pre></td></tr></table></figure></p><p>4、基于该镜像创建容器<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -d -p <span class="number">9190</span>:<span class="number">8080</span> --name timing-<span class="built_in">setup</span>-x timing-<span class="built_in">setup</span>-x:<span class="number">1</span></span><br></pre></td></tr></table></figure></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[app_mesos<span class="title">@localhost</span> build]$ docker run -d -p <span class="number">9190</span>:<span class="number">8080</span> --name timing-setup-<span class="keyword">x</span> timing-setup-<span class="keyword">x</span>:<span class="number">1</span></span><br><span class="line"><span class="keyword">c</span><span class="number">9011</span>eb<span class="number">114</span>a<span class="number">9</span>a<span class="number">2</span><span class="keyword">c</span><span class="number">03</span>aa<span class="number">134350</span>bbf<span class="number">50</span>df<span class="number">222127491</span>b<span class="number">59</span>d<span class="number">82963</span>ed<span class="number">150</span>f<span class="number">2074</span>b<span class="number">6</span>ea</span><br><span class="line">[app_mesos<span class="title">@localhost</span> build]$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line"><span class="keyword">c</span><span class="number">9011</span>eb<span class="number">114</span>a<span class="number">9</span>        timing-setup-<span class="keyword">x</span>:<span class="number">1</span>    <span class="string">"java -jar /settle/s鈥?   6 seconds ago       Up 3 seconds        0.0.0.0:9190-&gt;8080/tcp   timing-setup-x</span></span><br></pre></td></tr></table></figure><p>通过-p参数指定容器内的8080端口与宿主主机的9190端口绑定<br>5、前台访问该主机的9190端口，该SpringBoot工程能够正常访问，结束。</p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>只是建了个私有仓库，还没投入使用……</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/u012819339/article/details/80007919" target="_blank" rel="noopener">【docker】docker建立最简单最小的helloworld镜像</a>  </p>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-var、let、const</title>
      <link href="/2018/08/29/JS-var%E3%80%81let%E3%80%81const/"/>
      <url>/2018/08/29/JS-var%E3%80%81let%E3%80%81const/</url>
      <content type="html"><![CDATA[<p>var、let、const以及不加任何变量声明操作符的变量，各自具有的特性。<br><a id="more"></a></p><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><p>用<code>var</code>操作符定义的变量将成为定义该变量的作用域中的<strong>局部变量</strong>，一般在函数级作用域</p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p><code>let</code>声明的变量生命周期在块级作用域<br>特性包括：</p><ul><li>不存在变量提升</li><li>暂时性死区</li><li>不允许重复声明</li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p><code>const</code>声明的变量必须初始化，如果初始化的是简单类型（例如数字、字符串），则这个变量将作为常量使用。如果初始化的是数组、对象等引用类型，不可以改变类型，但可以修改数组内容、对象属性等。</p><h3 id="省略操作符的变量"><a href="#省略操作符的变量" class="headerlink" title="省略操作符的变量"></a>省略操作符的变量</h3><p>没有var、let等修饰的变量，为全局变量。</p><h3 id="简单样例"><a href="#简单样例" class="headerlink" title="简单样例"></a>简单样例</h3><h4 id="var-1"><a href="#var-1" class="headerlink" title="var"></a>var</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">&gt; <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p>未初始化的var变量值为undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(b);<span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">&gt; <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p>变量声明提升，默认值为undefined</p><h4 id="let-1"><a href="#let-1" class="headerlink" title="let"></a>let</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="built_in">c</span>);<span class="keyword">let</span> <span class="built_in">c</span>;</span><br><span class="line">&gt; <span class="type">Uncaught</span> <span class="type">ReferenceError</span>: <span class="built_in">c</span> <span class="keyword">is</span> not defined</span><br></pre></td></tr></table></figure><p>let声明的变量不存在变量提升，使用前必须声明。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c2 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  c2 = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> c2;</span><br><span class="line">&#125;</span><br><span class="line">&gt; Uncaught ReferenceError: c2 <span class="keyword">is</span> not defined</span><br></pre></td></tr></table></figure><p>let声明的暂时性死区</p><h4 id="const-1"><a href="#const-1" class="headerlink" title="const"></a>const</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(d0); <span class="keyword">const</span> d0;</span><br><span class="line">&gt; Uncaught <span class="built_in">SyntaxError</span>: Missing initializer <span class="keyword">in</span> <span class="keyword">const</span> declaration</span><br></pre></td></tr></table></figure><p>const必须得初始化</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(d);<span class="keyword">const</span> d = <span class="number">1</span>;</span><br><span class="line">&gt; Uncaught ReferenceError: d <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>const也不存在变量提升</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(const g = <span class="number">0</span>; g &lt; <span class="number">2</span>; g++)&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(g);</span><br><span class="line">&#125;</span><br><span class="line">&gt; <span class="number">0</span></span><br><span class="line">  Uncaught TypeError: Assignment <span class="keyword">to</span> <span class="built_in">constant</span> variable.</span><br></pre></td></tr></table></figure><p>const声明的变量作为常量，不允许再赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> h = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">h[<span class="number">0</span>] = <span class="string">'0'</span>;</span><br><span class="line">h[<span class="number">1</span>] = <span class="string">'1'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(h)</span><br><span class="line">&gt; [<span class="string">"0"</span>, <span class="string">"1"</span>]</span><br><span class="line">h = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">&gt; Uncaught <span class="built_in">TypeError</span>: Assignment to constant variable.</span><br></pre></td></tr></table></figure><p>const声明的引用类型变量，不可以改变变量引用类型，但可以改变内部属性。</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(<span class="name">var</span> f = <span class="number">0</span><span class="comment">; f &lt; 2; f++)&#123;</span></span><br><span class="line">    console.log(<span class="name">f</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">console.log(<span class="name">f</span>)<span class="comment">;</span></span><br><span class="line">&gt; <span class="number">0</span></span><br><span class="line">  <span class="number">1</span></span><br><span class="line">  <span class="number">2</span></span><br></pre></td></tr></table></figure><p>for循环的块级作用域并不会影响到var的变量</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> e = <span class="number">0</span>; e &lt; <span class="number">2</span>; e++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br><span class="line">&gt; <span class="number">0</span></span><br><span class="line">  <span class="number">1</span></span><br><span class="line">  Uncaught ReferenceError: e <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>let声明的e只有在for循环的块级作用域内有效</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(const g = <span class="number">0</span>; g &lt; <span class="number">2</span>; g++)&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(g);</span><br><span class="line">&#125;</span><br><span class="line">&gt; <span class="number">0</span></span><br><span class="line">  Uncaught TypeError: Assignment <span class="keyword">to</span> <span class="built_in">constant</span> variable.</span><br></pre></td></tr></table></figure><p>const声明的变量作为常量，不允许再赋值</p><h3 id="比较好玩的东西"><a href="#比较好玩的东西" class="headerlink" title="比较好玩的东西"></a>比较好玩的东西</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">99</span>;</span><br><span class="line">  f();</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; <span class="literal">undefined</span></span><br><span class="line">  <span class="number">10</span></span><br><span class="line">  <span class="number">99</span></span><br></pre></td></tr></table></figure><p>注意函数声明会提升到作用域的顶部</p><p>下面是阮老师的样例：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  var a = []<span class="comment">;</span></span><br><span class="line">  for (<span class="name"><span class="builtin-name">var</span></span> i = <span class="number">0</span><span class="comment">; i &lt; 10; i++) &#123;</span></span><br><span class="line">    a[i] = function () &#123;</span><br><span class="line">      console.log(<span class="name">i</span>)<span class="comment">;</span></span><br><span class="line">    &#125;<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  a[<span class="number">6</span>]()<span class="comment">; // 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>上面代码中，变量i是var命令声明的，在全局范围内都有效，所以全局只有一个变量i。每一次循环，变量i的值都会发生改变，而循环内被赋给数组a的函数内部的console.log(i)，里面的i指向的就是全局的i。也就是说，所有数组a的成员里面的i，指向的都是同一个i，导致运行时输出的是最后一轮的i的值，也就是 10。</p></blockquote><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  var a = []<span class="comment">;</span></span><br><span class="line">  for (<span class="name"><span class="builtin-name">let</span></span> i = <span class="number">0</span><span class="comment">; i &lt; 10; i++) &#123;</span></span><br><span class="line">    a[i] = function () &#123;</span><br><span class="line">      console.log(<span class="name">i</span>)<span class="comment">;</span></span><br><span class="line">    &#125;<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  a[<span class="number">6</span>]()<span class="comment">; // 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。你可能会问，如果每一轮循环的变量i都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="string">'abc'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// abc</span></span><br><span class="line">  <span class="comment">// abc</span></span><br><span class="line">  <span class="comment">// abc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。上面代码正确运行，输出了 3 次abc。这表明函数内部的变量i与循环变量i不在同一个作用域，有各自单独的作用域。</p></blockquote><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://es6.ruanyifeng.com/?search=const&amp;x=0&amp;y=0#docs/let" target="_blank" rel="noopener">let 和 const 命令</a><br><a href="https://www.cnblogs.com/fly_dragon/p/8669057.html" target="_blank" rel="noopener">前端面试题：JS中的let和var的区别</a>  </p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ESLint-安装、airbnb配置与sublimeText3插件</title>
      <link href="/2018/08/20/ESLint-%E5%AE%89%E8%A3%85%E3%80%81airbnb%E9%85%8D%E7%BD%AE%E4%B8%8EsublimeText3%E6%8F%92%E4%BB%B6/"/>
      <url>/2018/08/20/ESLint-%E5%AE%89%E8%A3%85%E3%80%81airbnb%E9%85%8D%E7%BD%AE%E4%B8%8EsublimeText3%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>使用<code>ESLint</code>对js代码进行静态检查，体验自动优化修复功能，在sublimeText3中安装插件进行js代码检查。<br><a id="more"></a></p><h3 id="为何使用ESLint"><a href="#为何使用ESLint" class="headerlink" title="为何使用ESLint"></a>为何使用ESLint</h3><p>ESLint是一个开源的js代码检查（静态分析）工具，<em>依赖于？</em>Node.js，可以对代码风格、格式规范等进行配置检查。检查规则可以自行配置，可自定义程度很高。</p><p>为何要使用？走查项目好几版js源码后，就知道了风格统一、格式规范无静态错误是多美好的一件事儿。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>与其他功能一样，也分为全局安装与局部安装。由于项目原来采用了局部安装的模式，这次安装还是基于项目的局部安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint</span><br><span class="line"><span class="comment">#  安装支持jsx与ES6+的导入/导出语法检查的插件</span></span><br><span class="line">npm install --save-dev eslint-plugin-import eslint-plugin-jsx-a11y</span><br><span class="line"><span class="comment"># 如果使用了ES6+特有的的语法，可以用babel转义成ES5的，需要安装该插件</span></span><br><span class="line">npm install --save-dev babel-eslint</span><br><span class="line"><span class="comment"># 安装支持react、airbnb的插件</span></span><br><span class="line">npm install --save-dev eslint-config-airbnb eslint-plugin-react</span><br></pre></td></tr></table></figure></p><h3 id="配置检查参数"><a href="#配置检查参数" class="headerlink" title="配置检查参数"></a>配置检查参数</h3><p>没有使用<code>eslint --init</code>来进行依赖安装与参数配置，而是直接参考已有的airbnb配置文件进行配置。</p><p>创建<code>.eslintrc.js</code>文件，放置在项目js的根目录下。（eslint会逐层向上寻找配置的<code>.eslintrc*</code>文件）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 指定校验的ECMAScript的版本及特性</span></span><br><span class="line">  <span class="string">"parserOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"ecmaVersion"</span>: <span class="number">7</span>, <span class="comment">// ECMAScript版本，7为ES7</span></span><br><span class="line">    <span class="comment">// "sourceType": "module", //默认script，如果代码是ECMAScript模块，设置为module</span></span><br><span class="line">    <span class="string">"ecmaFeatures"</span>: &#123; <span class="comment">// 使用额外的语言特性</span></span><br><span class="line">        <span class="string">"jsx"</span>: <span class="literal">true</span> <span class="comment">// 启用JSX</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当访问未定义的变量时，no-undef 规则将发出警告</span></span><br><span class="line">  <span class="comment">// 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量</span></span><br><span class="line">  <span class="string">"env"</span>: &#123;</span><br><span class="line">    <span class="string">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当访问未定义的变量时，no-undef 规则将发出警告</span></span><br><span class="line">  <span class="comment">// 脚本在执行期间访问的额外的全局变量</span></span><br><span class="line">  <span class="string">"globals"</span>: &#123;</span><br><span class="line">    <span class="string">"document"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"navigator"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"window"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"React"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"$"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"NProgress"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 使用第三方airbnb开发配置合集</span></span><br><span class="line">  <span class="string">"extends"</span>: <span class="string">"airbnb"</span>,</span><br><span class="line">  <span class="comment">// eslint-config-airbnb包括了以下3个插件</span></span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"react"</span>,</span><br><span class="line">    <span class="string">"jsx-a11y"</span>,</span><br><span class="line">    <span class="string">"import"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 定义自己的规则</span></span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"comma-dangle"</span>: [<span class="string">"error"</span>, <span class="string">"never"</span>], <span class="comment">// 要求或禁止末尾逗号：不允许逗号</span></span><br><span class="line">    <span class="string">"indent"</span>: [<span class="string">"error"</span>, <span class="number">2</span>], <span class="comment">// JavaScript代码强制使用一致的缩进：2格缩进</span></span><br><span class="line">    <span class="comment">// "linebreak-style": ["error", "windows"], // 换行符为CRLF</span></span><br><span class="line">    <span class="string">"no-multiple-empty-lines"</span>: [<span class="number">1</span>, &#123;<span class="string">"max"</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h3><p>由于是局部安装，不能直接使用eslint，需要进入<code>./node_modules/.bin</code>目录下执行</p><p>创建测试文件hello.jsx进行检查测试<code>eslint hello.jsx</code>,结果类似于这样:</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1819</span>:<span class="number">129</span>  <span class="literal">error</span>    Must <span class="keyword">use</span> destructuring state assignment</span><br><span class="line">                   react/destructuring-assignment</span><br><span class="line"><span class="number">1819</span>:<span class="number">152</span>  <span class="literal">error</span>    Must <span class="keyword">use</span> destructuring props assignment</span><br><span class="line">                   react/destructuring-assignment</span><br><span class="line">                ` must be placed <span class="keyword">on</span> a <span class="keyword">new</span> <span class="literal">line</span>                                                                                                      react/jsx-one-exp</span><br><span class="line">ression-per-<span class="literal">line</span></span><br><span class="line"><span class="number">1833</span>:<span class="number">1</span>    <span class="literal">warning</span>  More than <span class="number">2</span> blank lines <span class="keyword">not</span> allowed</span><br><span class="line">                   no-multiple-empty-lines</span><br><span class="line"><span class="number">1843</span>:<span class="number">20</span>   <span class="literal">error</span>    Must <span class="keyword">use</span> destructuring state assignment</span><br><span class="line">                   react/destructuring-assignment</span><br><span class="line"><span class="number">1857</span>:<span class="number">43</span>   <span class="literal">error</span>    Must <span class="keyword">use</span> destructuring state assignment</span><br><span class="line">                   react/destructuring-assignment</span><br><span class="line"><span class="number">1869</span>:<span class="number">18</span>   <span class="literal">error</span>    React.PropTypes <span class="keyword">is</span> deprecated since React <span class="number">15.5</span>.<span class="number">0</span>, <span class="keyword">use</span> the npm module prop-types instead</span><br><span class="line">                   react/no-deprecated</span><br><span class="line"></span><br><span class="line">✖ <span class="number">451</span> problems (<span class="number">401</span> errors, <span class="number">50</span> warnings)</span><br><span class="line"><span class="number">43</span> errors <span class="keyword">and</span> <span class="number">17</span> warnings potentially fixable <span class="keyword">with</span> the `<span class="comment">--fix` option.</span></span><br></pre></td></tr></table></figure><p>看起来还是相当严格。。。</p><h4 id="自动修复"><a href="#自动修复" class="headerlink" title="自动修复"></a>自动修复</h4><p>看上面的输出，存在<code>--fix</code>选项可以自动修复，Try……</p><p>试验结果为：没有二义性的报错的地方都修改成了规范的样式，包括不变的<code>var、let</code>被替换成了<code>const</code>，类内方法之间增加了空行等等。但是在<code>return</code>中HTML里面的中文，前面空了太多的空行。</p><h3 id="配置SublimeText-3"><a href="#配置SublimeText-3" class="headerlink" title="配置SublimeText 3"></a>配置SublimeText 3</h3><p>ST3需要安装两个插件：<code>SublimeLinter</code>与<code>SublimeLiner-eslint</code>。</p><p>有的文章提到是用的<code>SublimeLinter-contrib-eslint</code>而不是<code>SublimeLiner-eslint</code>，但是在ST3安装列表中并没有找到<code>SublimeLinter-contrib-eslint</code>，应该是更新成<code>SublimeLiner-eslint</code>了吧。</p><p><code>SublimeLinter</code>类似于代码检查的入口，<code>SublimeLinter-eslint</code>实现了对eslint的调用。</p><blockquote><p>SublimeLinter-eslint<br>This linter plugin for SublimeLinter provides an interface to ESLint. It will be used with files that have the “javascript” syntax.</p></blockquote><p>如果有必要，需要配置<code>SublimeLinter</code>插件的参数，指定<code>eslint</code>的路径：<br>配置文件为<code>Preferences-&gt;Package Settings-&gt;SublimeLinter-&gt;Settings</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"paths"</span>: &#123;</span><br><span class="line">        <span class="string">"linux"</span>: [],</span><br><span class="line">        <span class="string">"osx"</span>: [],</span><br><span class="line">        <span class="string">"windows"</span>: [<span class="string">"X:/XXX/js/node_modules/.bin"</span>] <span class="comment">// 局部安装的eslint绝对路径</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"linters"</span>: &#123; <span class="comment">// 由SublimeLinter-eslint提供参数</span></span><br><span class="line">        <span class="string">"eslint"</span>: &#123;</span><br><span class="line">            <span class="string">"selector"</span>: <span class="string">""</span> <span class="comment">// 除配置js/jsx文件外，其他类型的文件</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"no_column_highlights_line"</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重启SublimeText3，检查控制台是否有报错，没有的话就可以开开心心等着js/jsx静态检查之后满屏幕的红色……</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://eslint.cn/" target="_blank" rel="noopener">ESLint官网</a><br><a href="https://segmentfault.com/a/1190000009914940" target="_blank" rel="noopener">React系列—ESlint</a><br><a href="https://packagecontrol.io/packages/SublimeLinter-eslint" target="_blank" rel="noopener">Sublime​Linter-eslint 安装包说明</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> ESLint </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云使用记-ECS</title>
      <link href="/2018/08/16/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BD%BF%E7%94%A8%E8%AE%B0-ECS/"/>
      <url>/2018/08/16/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BD%BF%E7%94%A8%E8%AE%B0-ECS/</url>
      <content type="html"><![CDATA[<p>对阿里云云服务器ECS使用方案<br><a id="more"></a></p><h3 id="何为云服务器ECS"><a href="#何为云服务器ECS" class="headerlink" title="何为云服务器ECS"></a>何为云服务器ECS</h3><p>云服务器Elastic Computer Service，使用者可以随时创建所需数量的ECS实例，在使用过程中可以随时对资源进行扩缩。<br>ECS涉及到的资源有：</p><ul><li>实例规格</li><li>块存储</li><li>镜像</li><li>宽带</li><li>安全组</li></ul><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><ul><li>地域和可用区</li><li>实例  等同于一台虚拟机，包括：内存、CPU、磁盘、宽带等</li><li>实例规格  指实例配置的规格，例如vCPU核数、内存大小等</li><li>镜像 一般包括操作系统与预装软件</li><li>块存储 包括基于分布式存储架构的云盘和共享块存储，以及本地硬盘的本地存储</li><li>快照 指某一个时间点上弹性块存储的数据备份</li><li>网络类型 包括专有网络VPC与经典网络</li><li>安全组 由同一地域具有相同保护需求并互相信任的实例组成，是一种虚拟防火墙，用于控制不同实例的网络访问</li></ul><h4 id="相关服务"><a href="#相关服务" class="headerlink" title="相关服务"></a>相关服务</h4><ul><li>云市场</li><li>弹性伸缩</li><li>容器服务 通过Docker管理应用生命周期</li><li>均衡负载 对多台ESC进行流量分发与负载均衡服务</li><li>云监控</li><li>安骑士</li><li>DDos防护</li><li>阿里云开发工具包</li></ul><h3 id="ECS的优势"><a href="#ECS的优势" class="headerlink" title="ECS的优势"></a>ECS的优势</h3><p>具有以下优势：高可用性、安全性、弹性</p><h4 id="高可用性"><a href="#高可用性" class="headerlink" title="高可用性"></a>高可用性</h4><p>更严格的IDC（互联网数据中心）标准、服务器准入标准、以及运维标准，以保证云计算整个基础框架的高可用性、数据的可靠性以及云服务器的高可用性。<br>利用阿里云多可用区进行主备服务、双活服务、金融领域两地三中心<br>数据迁移服务DTS</p><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>阿里云专有网络<br>阿里云专有网络可以拉专线到原有的IDC机房，形成混合云的架构<br>阿里云专有网络具有稳定性与安全性，专有网络天然就具备流量隔离以及攻击格力的能力</p><h4 id="弹性"><a href="#弹性" class="headerlink" title="弹性"></a>弹性</h4><ul><li>计算弹性<ul><li>纵向的弹性，单个服务器的配置变更</li><li>横向弹性，增加更多的资源</li></ul></li><li>存储弹性<br>传统IDC，需要不断增加服务器，而服务器是有限的，在阿里云，可以不断购买存储，进行磁盘扩容</li><li>网络弹性<br>阿里云专有网络，所有网络配置，可以与线下的IDC机房配置完全相同</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>结合OSS（对象存储），将静态图片、视频、下载包进行存储，以降低存储费用<br>配合CDN进行负载均衡<br>可以启用弹性伸缩</p><h3 id="实例规格族"><a href="#实例规格族" class="headerlink" title="实例规格族"></a>实例规格族</h3><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>官方文档</p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JDK源码阅读记-Object</title>
      <link href="/2018/07/10/JDK%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0-Object/"/>
      <url>/2018/07/10/JDK%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0-Object/</url>
      <content type="html"><![CDATA[<p>public class Object<br><a id="more"></a></p><h3 id="private-static-native-void-registerNatives"><a href="#private-static-native-void-registerNatives" class="headerlink" title="private static native void registerNatives()"></a>private static native void registerNatives()</h3><p><code>native</code>关键字修饰的方法是一个原生态方法，方法对应的实现不是在当前文件，而是在用其他语言实现的文件中。Java语言本身不能对操作系统底层进行访问和操作，但可以通过JNI接口调用其他语言来实现对底层的访问。</p><h3 id="public-final-native-Class-lt-gt-getClass"><a href="#public-final-native-Class-lt-gt-getClass" class="headerlink" title="public final native Class&lt;?&gt; getClass()"></a>public final native Class&lt;?&gt; getClass()</h3><p>返回结果为运行时对象类型<br><code>represents the runtime class of this object.</code></p><h3 id="public-native-int-hashCode"><a href="#public-native-int-hashCode" class="headerlink" title="public native int hashCode();"></a>public native int hashCode();</h3><p>hashCode()方法对HashMap等通过hash表实现的对象很有好处，例如HashMap要put一个新key，可以先通过hashCode()获取key的hash值，进行hash比较，如果hash之后位置为空，则表示key不存在，可以直接put，如果hash值一致，再通过equals()来判断是否一致来决定是否put。</p><p>在一次应用程序执行期间，只要对象的equals方法没有改变，那么对于同一个对象无论调用多少次hashCode方法，都应该返回同一个整数。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Whenever <span class="keyword">it</span> <span class="keyword">is</span> invoked <span class="keyword">on</span> <span class="keyword">the</span> same object more than once during</span><br><span class="line">    *     an execution <span class="keyword">of</span> a Java <span class="built_in">application</span>, <span class="keyword">the</span> &#123;@code hashCode&#125; method</span><br><span class="line">    *     must consistently <span class="literal">return</span> <span class="keyword">the</span> same <span class="built_in">integer</span>, provided no information</span><br><span class="line">    *     used <span class="keyword">in</span> &#123;@code <span class="keyword">equals</span>&#125; comparisons <span class="keyword">on</span> <span class="keyword">the</span> object <span class="keyword">is</span> modified.</span><br><span class="line">    *     This <span class="built_in">integer</span> need <span class="keyword">not</span> remain consistent <span class="keyword">from</span> one execution <span class="keyword">of</span> an</span><br><span class="line">    *     <span class="built_in">application</span> <span class="keyword">to</span> another execution <span class="keyword">of</span> <span class="keyword">the</span> same <span class="built_in">application</span></span><br></pre></td></tr></table></figure></p><p>hashCode与equals的关系为：</p><ul><li>如果两个对象通过equals判断为相同，则hashCode返回的结果也相同</li><li>如果两个对象通过equals判断不相同，两个对象的hashCode不一定不相同。即并<strong>不要求</strong>不同的对象调用hashCode返回的结果不同。要努力避免这种情况以提高hash表的效率</li></ul><p>在java中通常为不同的对象返回不同的hash值，这通常是将对象的内部地址转换为整数来实现，但是若想要比较对象是否相等，只通过hashCode是不够的。</p><h3 id="public-boolean-equals-Object-obj"><a href="#public-boolean-equals-Object-obj" class="headerlink" title="public boolean equals(Object obj)"></a>public boolean equals(Object obj)</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较对象是否相等，分为obj为非空对象(non-null)与空对象(null)：<br>非空对象：</p><ul><li>reflexive 反身性 x.equals(x) is true</li><li>symmetric 对称性 if x.equals(y) is true then y.equals(x) is true</li><li>transitive 传递性 if x,y is equals and y,z is equals then x,z is equals</li><li>consistent 一致性 if x,y is equals, 只要x,y内容不变，无论多次比较，总是相等</li></ul><p>空对象：</p><ul><li>x.equals(null) return false</li></ul><p>需要注意的是，<strong>如果要重写equals()方法，必须重写hashCode()方法</strong>，来保证<code>equals判断为相同，则hashCode返回的结果也相同</code>这条规则成立</p><h3 id="protected-native-Object-clone-throws-CloneNotSupportedException"><a href="#protected-native-Object-clone-throws-CloneNotSupportedException" class="headerlink" title="protected native Object clone() throws CloneNotSupportedException;"></a>protected native Object clone() throws CloneNotSupportedException;</h3><p>复制出一个新object，如果当前对象没有实现<code>Cloneable</code>接口，则会抛出<code>CloneNotSupportedException</code></p><p>关于<code>mutable</code>与<code>immutable</code> Object的区别：<br>不可变对象有如下几个特点：</p><ol><li><p>不可变对象创建之后将不能更改。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>类是不可变对象例子之一，调用方法返回的总是一个新对象，而不是在原对象上修改。</span><br><span class="line">又例如<span class="keyword">final</span> <span class="built_in">int</span> x = <span class="number">1</span>; x将不可再修改;</span><br><span class="line">又<span class="keyword">final</span> TestObj testObj = <span class="keyword">new</span> TestObj(); testObj.data = <span class="number">10</span> 是可以的，但testObj = <span class="keyword">new</span> TestObj2()是不被允许的</span><br></pre></td></tr></table></figure><blockquote><p>an immutable object (unchangeable[1] object) is an object whose state cannot be modified after it is created.</p></blockquote></li><li>是线程安全的（thread-safe）</li><li>理解简单，较可变对象安全性较高<blockquote><p>Other benefits are that they are simpler to understand and reason about and offer higher security than mutable objects</p></blockquote></li></ol><p>新Object与原Object的关系有：</p><ul><li>x.clone() != x is true <code>==</code>用来比较两个变量是否指向内存同一块地址，而x.clone是创建了一个新对象，内存堆中地址不一样</li><li>x.clone().getClass() == x.getClass() is true 两个Object的类是一样的，但这不是绝对的，只有在重载clone的时候调用super.clone才能成立<blockquote><p>but these are not absolute requirements</p></blockquote></li><li>x.clone().equals(x) is true 两个Object是equals的，但这也不是绝对的，这取决于x所属类的equals是否有重写，因为在Object类中，equals是通过==来判断是否相同的。</li></ul><p>在重载的clone()方法中需要调用<code>super.clone()</code>，这样才能够满足<code>x.clone().getClass() == x.getClass()</code></p><p>如果只调用了<code>clone()</code>方法，那么实现的仅仅是浅拷贝（shallow copy），例如a = b.clone()，a的内部变量（fields）都是根据b的内部变量来初识化的，a的内部变量还是引用的b的内部变量对象。</p><blockquote><p>Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned.</p></blockquote><p>一般来说，调用<code>clone()</code>方法是为了实现两个对象完全互相独立，即深拷贝(deep copy)，而不期望内部变量（fields）指向同一个对象，所以要将对象内部变量所有可变对象（mutable object）都要进行拷贝。对于不可变对象则不用。</p><p>需要注意的是，如果使用了clone，需要显示声明返回类型</p><p>实现Deep Copy的简单例子为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rental</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    Movie movie;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="keyword">clone</span>()&#123;</span><br><span class="line">        Rental o = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//Object中的clone()会识别出你要复制的是哪个对象。</span></span><br><span class="line">            o = (Movie)super.<span class="keyword">clone</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        o.movie = (Movie)movie.<span class="keyword">clone</span>();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="keyword">clone</span>()&#123;</span><br><span class="line">        Object o=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            o = super.<span class="keyword">clone</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="public-String-toString"><a href="#public-String-toString" class="headerlink" title="public String toString()"></a>public String toString()</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + <span class="built_in">Integer</span>.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回“类名+hash编码”</p><p>建议所有的子类都重写该方法（大概是为了易读性？）</p><blockquote><p>It is recommended that all subclasses override this method</p></blockquote><h3 id="public-final-native-void-notify"><a href="#public-final-native-void-notify" class="headerlink" title="public final native void notify()"></a>public final native void notify()</h3><p>唤醒被wait的单进程</p><blockquote><p>Wakes up a single thread that is waiting on this object’s<br>monitor. If any threads are waiting on this object, one of them<br>is chosen to be awakened. The choice is arbitrary and occurs at<br>the discretion of the implementation. A thread waits on an object’s<br>monitor by calling one of the {@code wait} methods.</p></blockquote><p>被唤醒的进程只有在当前正在执行的进程释放了当前对象的锁只有才能执行，新唤醒的进程会跟其他进程平等的竞争对象的synchronize。</p><blockquote><p>The awakened thread will not be able to proceed until the current<br>thread relinquishes the lock on this object. The awakened thread will<br>compete in the usual manner with any other threads that might be<br>actively competing to synchronize on this object; for example, the<br>awakened thread enjoys no reliable privilege or disadvantage in being<br>the next thread to lock this object</p></blockquote><p>该方法只能被对象监视器所有者（the owner of this object’s monitor）进行调用，成为对象监视器有三种方式：</p><ul><li>By executing a synchronized instance method of that object.</li><li>By executing the body of a {@code synchronized} statement that synchronizes on the object.</li><li>For objects of type {@code Class,} by executing a synchronized static method of that class.</li></ul><p>如果当前进程不是对象监视器所有者（the owner of this object’s monitor），则会报<code>IllegalMonitorStateException</code>异常。</p><h3 id="public-final-native-void-notifyAll"><a href="#public-final-native-void-notifyAll" class="headerlink" title="public final native void notifyAll()"></a>public final native void notifyAll()</h3><p>唤醒所有等待的进程，所有唤醒的进程都会参与竞争资源（synchronize on this object），要注意性能问题。</p><blockquote><p>Wakes up all threads that are waiting on this object’s monitor.</p></blockquote><p>同样的，if the current thread is not the owner of this object’s monitor.会报<code>IllegalMonitorStateException</code></p><h3 id="public-final-native-void-wait-long-timeout-throws-InterruptedException"><a href="#public-final-native-void-wait-long-timeout-throws-InterruptedException" class="headerlink" title="public final native void wait(long timeout) throws InterruptedException"></a>public final native void wait(long timeout) throws InterruptedException</h3><h3 id="英文对照"><a href="#英文对照" class="headerlink" title="英文对照"></a>英文对照</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cast 显式转化</span><br><span class="line">performance 性能</span><br><span class="line">remain 保留 保持</span><br><span class="line">consistent 一贯</span><br><span class="line">practical  实际的</span><br><span class="line">Indicates 指示</span><br><span class="line">reflexive 反身</span><br><span class="line">symmetric 对称</span><br><span class="line">discriminating 鉴别</span><br><span class="line">otherwise 除此以外</span><br><span class="line">precise 精确的</span><br><span class="line">intent 意图</span><br><span class="line">mutable 易变的</span><br><span class="line">comprise 包括</span><br><span class="line">internal 内部的</span><br><span class="line">reference 参考</span><br><span class="line">immutable 一成不变</span><br><span class="line">independent 独立</span><br><span class="line">convention 惯例</span><br><span class="line">primitive  原始的</span><br><span class="line">obtained 获得</span><br><span class="line">corresponding 相应的</span><br><span class="line">arbitrary 独断、随意</span><br><span class="line">relinquish 放弃</span><br><span class="line">compete 竞争</span><br><span class="line">manner 方式</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>JDK1.8源码<br><a href="http://www.cnblogs.com/gw811/archive/2012/10/07/2712252.html" target="_blank" rel="noopener">java.lang.Object.clone()分析</a></p>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>杂-文件内容按字段聚组统计</title>
      <link href="/2018/07/04/%E6%9D%82-%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%8C%89%E5%AD%97%E6%AE%B5%E8%81%9A%E7%BB%84%E7%BB%9F%E8%AE%A1/"/>
      <url>/2018/07/04/%E6%9D%82-%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%8C%89%E5%AD%97%E6%AE%B5%E8%81%9A%E7%BB%84%E7%BB%9F%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>文件stat.log中包含“A，B，C…”等多个字段，需要根据A，B字段进行聚组统计：A,B,count<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>如何不将文件入库的前提下按规定字段进行聚组统计？  </p><p>简化版的stat.log文件内容格式为：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>,<span class="number">110</span>,<span class="number">1100</span></span><br><span class="line"><span class="number">13</span>,<span class="number">131</span>,<span class="number">1310</span></span><br><span class="line"><span class="number">11</span>,<span class="number">111</span>,<span class="number">1110</span></span><br><span class="line"><span class="number">11</span>,<span class="number">110</span>,<span class="number">1101</span></span><br><span class="line"><span class="number">13</span>,<span class="number">132</span>,<span class="number">1320</span></span><br></pre></td></tr></table></figure></p><h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><p>若入Oracle库使用<code>GROUP BY</code>查询：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> T.INFOA, T.INFOB, <span class="keyword">COUNT</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">FROM</span> T_STAT_LOG T</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> T.INFOA, T.INFOB</span><br><span class="line">;</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">INFOA INFOB COUNT(1)</span><br><span class="line">111102</span><br><span class="line">131321</span><br><span class="line">111111</span><br><span class="line">131311</span><br></pre></td></tr></table></figure></p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>简单点的实现：考虑java与前台交互，可以通过<code>map</code>进行按字段聚合，可以通过将<code>map</code>转化为<code>json</code>传给前台界面<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOp</span> </span>&#123;</span><br><span class="line"><span class="comment">/*按行读取并按,分隔</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">readByLineSplit</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">String[] fileContentLine;</span><br><span class="line">File file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; baseInfoMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Map&lt;String, Object&gt; childInfoMap;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</span><br><span class="line">String lineStr = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((lineStr = reader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">fileContentLine = lineStr.split(<span class="string">","</span>);</span><br><span class="line">childInfoMap = (Map&lt;String, Object&gt;)baseInfoMap.getOrDefault(fileContentLine[<span class="number">0</span>], <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">cnt = (Integer)childInfoMap.getOrDefault(fileContentLine[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">childInfoMap.put(fileContentLine[<span class="number">1</span>], cnt+<span class="number">1</span>);</span><br><span class="line">baseInfoMap.put(fileContentLine[<span class="number">0</span>], childInfoMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    reader.close();  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;  </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; entry : baseInfoMap.entrySet())&#123;</span><br><span class="line">childInfoMap = (Map&lt;String, Object&gt;)entry.getValue();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; childEntry : childInfoMap.entrySet())&#123;</span><br><span class="line">System.out.println(entry.getKey()+<span class="string">" "</span>+childEntry.getKey()+<span class="string">" "</span>+childEntry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> baseInfoMap;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---console---</span><br><span class="line"><span class="number">11</span> <span class="number">110</span> <span class="number">2</span></span><br><span class="line"><span class="number">11</span> <span class="number">111</span> <span class="number">1</span></span><br><span class="line"><span class="number">13</span> <span class="number">132</span> <span class="number">1</span></span><br><span class="line"><span class="number">13</span> <span class="number">131</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="Python-2-7"><a href="#Python-2-7" class="headerlink" title="Python 2.7"></a>Python 2.7</h2><p>可以参考Java版本的想法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readByLineSplit</span><span class="params">(fileName)</span>:</span></span><br><span class="line">    baseInfoMap = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(fileName, <span class="string">'r'</span>) <span class="keyword">as</span> logFileName:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> logFileName.readlines():</span><br><span class="line">                lineFormat = line.strip()</span><br><span class="line">                lineArr = lineFormat.split(<span class="string">","</span>)</span><br><span class="line">                childInfoMap = baseInfoMap.setdefault(lineArr[<span class="number">0</span>], &#123;&#125;)</span><br><span class="line">                cnt = childInfoMap.setdefault(lineArr[<span class="number">1</span>], <span class="number">0</span>)</span><br><span class="line">                childInfoMap[lineArr[<span class="number">1</span>]] = cnt+<span class="number">1</span></span><br><span class="line">                <span class="comment"># baseInfoMap[lineArr[0]] = childInfoMap</span></span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Not have this file:"</span>+fileName</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> baseInfoMap.items():</span><br><span class="line">        <span class="keyword">for</span> childKey, childValue <span class="keyword">in</span> value.items():</span><br><span class="line">            <span class="keyword">print</span> key + <span class="string">" "</span> + childKey + <span class="string">" "</span> + str(childValue)</span><br><span class="line"></span><br><span class="line">---Terminal---</span><br><span class="line"><span class="number">11</span> <span class="number">111</span> <span class="number">1</span></span><br><span class="line"><span class="number">11</span> <span class="number">110</span> <span class="number">2</span></span><br><span class="line"><span class="number">13</span> <span class="number">132</span> <span class="number">1</span></span><br><span class="line"><span class="number">13</span> <span class="number">131</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="Bash-Shell"><a href="#Bash-Shell" class="headerlink" title="Bash Shell"></a>Bash Shell</h2><p>可以通过<code>awk</code>命令直接按字段进行聚组统计<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">awk -F "," '&#123;cnt[$1","$2]++;&#125; END&#123;OFS=",";for(i in cnt) print i,cnt[i]&#125;' stat.log</span><br><span class="line"></span><br><span class="line">---Terminal---</span><br><span class="line">13,131,1</span><br><span class="line">13,132,1</span><br><span class="line">11,110,2</span><br><span class="line">11,111,1</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>贼猛的<code>awk</code><br>Java、Python有精简版的请Q我（详见“关于”）~要不然我只能有空再想了……</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>无</p><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Python </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>日志</title>
      <link href="/2018/06/27/%E6%97%A5%E5%BF%97-20190119/"/>
      <url>/2018/06/27/%E6%97%A5%E5%BF%97-20190119/</url>
      <content type="html"><![CDATA[<p>日志<br><a id="more"></a></p><p>大概从毕业起就没再动手写过这个东西了，把太吵的键盘拔了，还是用笔记本自带的巧克力吧。</p><blockquote><p>君子终日乾乾，夕惕若，厉，无咎。</p><p>背景音乐：网易云音乐：“100种人生的态度，有没有你的归宿？”</p></blockquote><p>这次要写的是如何解决矛盾……</p><h1 id="如何解决矛盾"><a href="#如何解决矛盾" class="headerlink" title="如何解决矛盾"></a>如何解决矛盾</h1><p>先进行范围圈定，只把矛盾限于人与人之间。</p><p>还搞不清矛盾的产生是咋个样子的，暂时跳过了。</p><p>以前总是觉得一旦某人跟自己说“深思过，有矛盾”，便会决绝的放弃<br>后来觉得啥矛盾解决不了，总有方法是可以解决的，多想想嘛<br>现在又成了应该有一些无法解决的矛盾，但是哪些才是呢……</p><p>以前认为矛盾是无法解决的，后来觉得矛盾是可以解决的，现在又觉得矛盾是有可能无法解决的……</p><p>是否可以将矛盾看做是舞台上的一场高潮迭起的剧：  </p><ul><li>矛盾的相关者为剧目的人物，直接冲突对象是剧目的主角  </li><li>矛盾的潜在如同剧目的背景</li><li>矛盾的发生作为剧目的开头</li><li>随着主角之间矛盾的升级扩大，剧目随之发展进入高潮</li><li>矛盾的解决，剧目落场</li></ul><p>人生如戏</p><p>以前一直不懂，为什么以史为镜，可以知兴替，以人为镜，可以明得失。<br>也是有一天刷牙才大概想明白了一点，统一的物质世界中的事物都处在相互作用的普遍联系中，任何事物都是因为某些矛盾因素集A产生，又因为某些因素集B发展，最后由于因素集C结束。  </p><p>剧也是事物，矛盾可以参考剧，那么矛盾的解决大概就有了方案：改变矛盾因素集。<br>改变矛盾因素集的方式感觉有两种：一是规避，二是调整。<br><strong>规避</strong>：删除因素集，在剧中消除某个矛盾发生发展的最简单方式是删除主角，做到物是人非事事休。<br>这大概最简单也最需要远见，消除主角或者主要事物意味着现有的主线消失，以后的主线走向更加不明朗。<br>一般要思考到目前主线发展确实无可奈何或者完全变更主线有着更好的前景才会采用这种方式吧。<br><strong>调整</strong>：增改因素集，如果有大智慧，可以修改集A中包含的主角、矛盾产生的基本因素等，看起来是直接修改了剧目的背景与开头；<br>退而求其次，修改B，费时费力分析出矛盾的主要原因，捋清哪些因素是关键，通过调整关键因素达到矛盾的解决，剧目最精彩的在此；<br>最终，可能有一些无法改变的因素，恰恰是矛盾的主因，归于C中了，除非顿悟啥的，要不然矛盾无法解决了，基本完蛋了。</p><p>不过一般很少碰到小人国吃蛋的那种无法解决的矛盾……</p><p>矛盾调整的实操可能得要主角之间不断进行讨论验证才能明确主因的所在。可能会因为因素很多，互相缠绕，捋起来并不容易，也会因为一些以前从未关注过的点而高潮迭起，这大概也是“金牌调解”之类的剧比较火的原因吧……</p><p>但是从矛盾的普遍性来看，每个事物发展的过程中总是要经历矛盾运动，解决掉一个之后总会遇到下一个……</p><p>以人生角度来看，矛盾的发展与解决，构成了独一无二的精彩。</p><p>我觉得得多看书，要不然自以为是容易误入歧途……</p>]]></content>
      
      <categories>
          
          <category> Whisper </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>日志</title>
      <link href="/2018/06/27/%E6%97%A5%E5%BF%97/"/>
      <url>/2018/06/27/%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<p>日志<br><a id="more"></a></p><h3 id="20180730"><a href="#20180730" class="headerlink" title="20180730"></a>20180730</h3><p>修改了一下maupassant的scss代码样式，包括：</p><ul><li><code>&lt;code&gt;</code>代码的底色</li><li><code>&lt;blockquote&gt;</code>引用的样式</li><li><code>&lt;img&gt;</code>图片由居中的<code>block</code>改为<code>inline</code>并取消上下高度调整</li></ul><h3 id="20180627"><a href="#20180627" class="headerlink" title="20180627"></a>20180627</h3><p>当发现为了赶进度不考虑模型设计、代码结构啥的，开发起来的速度贼快……God bless me do not let me modify these codes 2333</p><p>END……</p>]]></content>
      
      <categories>
          
          <category> Whisper </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Oracle-Date日期、时间操作</title>
      <link href="/2018/06/26/Oracle-Date%E6%97%A5%E6%9C%9F%E3%80%81%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/06/26/Oracle-Date%E6%97%A5%E6%9C%9F%E3%80%81%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>在Oracle数据库的<code>Date</code>类型基础上进行时间计算，包括：，使用<code>INTERVAL</code>/<code>add_months()</code>计算N小时（天、月）前（后）；两个<code>Date</code>做差等。<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最早有一篇文章使用了<code>INTERVAL</code>/<code>add_months()</code>来进行求N天前、N月前，<code>scp</code>到这里来。</p><hr><p>今天中午写代码没带脑子，有个类似这样的<code>sql</code>语句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SYSDATE</span> - (<span class="keyword">TO_DATE</span>(<span class="string">'20180626194100'</span>, <span class="string">'yyyymmddhh24miss'</span>) - <span class="built_in">INTERVAL</span> <span class="string">'1'</span> <span class="keyword">HOUR</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL</span><br><span class="line">;</span><br></pre></td></tr></table></figure></p><p>觉得多了层括号不简洁，就修改了一下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SYSDATE</span> - <span class="keyword">TO_DATE</span>(<span class="string">'20180626194100'</span>, <span class="string">'yyyymmddhh24miss'</span>) + <span class="built_in">INTERVAL</span> <span class="string">'1'</span> <span class="keyword">HOUR</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL</span><br><span class="line">;</span><br></pre></td></tr></table></figure></p><p>嗯，报了个<code>ORA-38001</code>错误。</p><p>检查一下改后的<code>sql</code>语句会发现问题：联想前几天分析的<code>Python</code>中<code>datetime</code>做差的结果，<code>Oracle</code>中<code>Date</code>类型做差后类型应该不为<code>Date</code>类型了，所以在做差结果上再进行时间间隔计算会报错。</p><p>问题来了：<code>Oracle</code>的<code>Date</code>类型做差后的结果是啥？</p><h2 id="Oracle计算N天前、N月前"><a href="#Oracle计算N天前、N月前" class="headerlink" title="Oracle计算N天前、N月前"></a>Oracle计算N天前、N月前</h2><p>首先来看一下怎么进行时间差计算等。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>想查询N天前的日志文件相关信息，日志文件名格式为：<code>interface_YYYYMMDD.log</code></p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><h4 id="1、如何计算N天前"><a href="#1、如何计算N天前" class="headerlink" title="1、如何计算N天前"></a>1、如何计算N天前</h4><p>在oracle中，可以对<code>data</code>类型的直接<code>+1</code>来将<strong>天数</strong>加一<br>具体过程为：先截取文件名上时间，转为<code>date</code>类型，再加一后转为<code>char</code>与传入的参数值<code>checkDate</code>进行比较<br><code>to_char(to_date(SUBSTR(t.file_name, 11, 8), &#39;yyyymmdd&#39;) + 1, &#39;yyyymmdd&#39;) = &amp;checkDate</code><br>当然，由于对<code>date</code>类型的加减操作是基于<code>天</code>的，可以通过对基准单位进行相关操作，例如：</p><ul><li><code>SYSDATE - 10</code>：十天前</li><li><code>SYSDATE + 1/24</code>：一小时后</li><li><code>SYSDATE + 1/(24 * 60)</code>：一分钟后</li><li><code>SYSDATE + 1/(24*60*60)</code>：一秒后</li></ul><p>也存在另一种写法，使用<strong>INTERVAL</strong>时间间隔：</p><ul><li><code>SYSDATE + INTERVAL &#39;100&#39; DAY(3)</code>：一百天以后，<strong>注意DAY(3)</strong>：3表示精确度，表示偏移量’100’为3位。DAY默认为DAY(2)</li><li><code>SYSDATE + INTERVAL &#39;12&#39; HOUR</code>：十二小时后</li><li><code>SYSDATE + INTERVAL &#39;100&#39; MINUTE</code>：一百分钟后</li><li><code>SYSDATE + INTERVAL &#39;100&#39; Second</code>：一百秒后</li></ul><h4 id="2、如何计算N月前"><a href="#2、如何计算N月前" class="headerlink" title="2、如何计算N月前"></a>2、如何计算N月前</h4><p>也许你想到了使用<code>INTERVAL &#39;1&#39; MONTH</code>来计算。确实，一般情况下，使用该方法得到的结果是正确的。验证：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">to_date</span>(<span class="string">'20170831'</span>, <span class="string">'yyyymmdd'</span>) + <span class="built_in">INTERVAL</span> <span class="string">'1'</span> <span class="keyword">MONTH</span> <span class="keyword">FROM</span> dual;</span><br></pre></td></tr></table></figure></p><p>会发现报错：<code>ORA-01839</code></p><p>Oracle存在<code>add_months(date, offset)</code>函数，可以计算N月前：<br><code>add_months(SYSDATE, -1)</code>：一月前</p><p>同样，验证20170831：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> add_months(<span class="keyword">to_date</span>(<span class="string">'20170831'</span>, <span class="string">'yyyymmdd'</span>), <span class="number">1</span>) <span class="keyword">FROM</span> dual;</span><br></pre></td></tr></table></figure></p><p>输出为：2017/9/30</p><h4 id="3、如何计算N年前："><a href="#3、如何计算N年前：" class="headerlink" title="3、如何计算N年前："></a>3、如何计算N年前：</h4><p><code>add_years()</code>? 并没有……<br><code>add_months(to_date(&#39;20170831&#39;, &#39;yyyymmdd&#39;), -12*3)</code>：三年前</p><h2 id="Date类型运算法则"><a href="#Date类型运算法则" class="headerlink" title="Date类型运算法则"></a><code>Date</code>类型运算法则</h2><p>这部分内容可以在Oracle文档中找到：<a href="https://docs.oracle.com/cd/B28359_01/server.111/b28286/sql_elements001.htm#g196492" target="_blank" rel="noopener">Table 2-5 Matrix of Datetime Arithmetic</a></p><p>（用md画table好复杂……需要看图直接点上面连接吧……）</p><p>可以看出，<code>Date</code>类型之间只能做减法来得到时间差（NUMBER类型），不能做加法等无意义的操作。<code>Date</code>与<code>INTERVAL</code>的加减结果都为<code>Date</code>类型。</p><p>这页中也有其他有趣的东西：</p><h3 id="TO-YMINTERVAL"><a href="#TO-YMINTERVAL" class="headerlink" title="TO_YMINTERVAL"></a><code>TO_YMINTERVAL</code></h3><p>用来在<code>Date</code>类型数据上进行年、月加减，需要注意的是，如果计算结果非法，返回<code>ORA-01839</code>指定月份的日期无效错误。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT TO<span class="emphasis">_DATE('29-FEB-2004', 'DD-MON-YYYY') + TO_</span>YMINTERVAL(<span class="emphasis">'4-0'</span>) FROM DUAL;</span><br><span class="line"></span><br><span class="line">TO<span class="emphasis">_DATE('</span></span><br><span class="line"><span class="emphasis">---------</span></span><br><span class="line"><span class="emphasis">29-FEB-08</span></span><br></pre></td></tr></table></figure><p>如果是中文环境会报<code>ORA-01843</code>无效的月份错误，需要写成：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT TO<span class="emphasis">_DATE('29-2月-2004', 'DD-MON-YYYY') + TO_</span>YMINTERVAL(<span class="emphasis">'4-0'</span>) FROM DUAL;</span><br><span class="line"></span><br><span class="line">TO<span class="emphasis">_DATE('</span></span><br><span class="line"><span class="emphasis">---------</span></span><br><span class="line"><span class="emphasis">2008/2/29</span></span><br></pre></td></tr></table></figure></p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p> <a href="http://blog.csdn.net/xulei_19850322/article/details/4233445" target="_blank" rel="noopener">oracle 用interval 求时间</a><br><a href="http://www.itpub.net/thread-1825722-1-1.html" target="_blank" rel="noopener">ora 01839这个错误是怎么回事？</a><br><a href="https://docs.oracle.com/cd/B28359_01/server.111/b28286/sql_elements001.htm#SQLRF0021" target="_blank" rel="noopener">Database SQL Language Reference –Datatypes</a></p><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/4.0/80x15.png"></a>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>日志-20180606</title>
      <link href="/2018/06/06/%E6%97%A5%E5%BF%97-20180606/"/>
      <url>/2018/06/06/%E6%97%A5%E5%BF%97-20180606/</url>
      <content type="html"><![CDATA[<p>日志<br><a id="more"></a></p><h3 id="在使用python进行socket通信的时候，想直接在两端之间传递python对象"><a href="#在使用python进行socket通信的时候，想直接在两端之间传递python对象" class="headerlink" title="在使用python进行socket通信的时候，想直接在两端之间传递python对象"></a>在使用python进行socket通信的时候，想直接在两端之间传递python对象</h3><p>想了一上午要把string格式化成python对象要经历怎么样的痛苦，然后查了查怎么样才能传递python对象，然后想起了要给另一个系统传json串，然后就import json、json.loads()#客户端，可以定义encoding、json.dumps()#服务器端，这样愉快的解决了。虽然中间又经历了一下字符编码的问题……</p><h3 id="dos一行中执行多条命令"><a href="#dos一行中执行多条命令" class="headerlink" title="dos一行中执行多条命令"></a>dos一行中执行多条命令</h3><p>一开始以为比着Linux方式将命令按<code>;</code>分割的，然而报错了……查了一下才知道原来是<code>&amp;</code></p><h3 id="地图着色"><a href="#地图着色" class="headerlink" title="地图着色"></a>地图着色</h3><p>地图着色的技术问题摸索着大体实现了功能，不过有一个细节没注意，开始时将进度为0的省分颜色设定为白色，这个颜色跟背景一致，导致图例上这个看起来是个空的……</p><h3 id="自动提交git的脚本"><a href="#自动提交git的脚本" class="headerlink" title="自动提交git的脚本"></a>自动提交git的脚本</h3><p>就是将各命令顺序写到了一个py脚本中，然后直接执行的脚本。不过要是需要另一个脚本来调用这个脚本，需要先cd到仓库的路径下，再执行这个脚本，否则会报git的异常。这就用到了<code>&amp;</code>。</p><h3 id="GitHub个人主页"><a href="#GitHub个人主页" class="headerlink" title="GitHub个人主页"></a>GitHub个人主页</h3><p>突然想，自己搞的小项目，可以用GitHub的免费个人Pages来进行项目宣传，只要是个单纯的前台页面就行2333</p><p>END……</p>]]></content>
      
      <categories>
          
          <category> Whisper </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Echarts-Echarts中国地图省分着色</title>
      <link href="/2018/06/06/Echarts-Echarts%E4%B8%AD%E5%9B%BD%E5%9C%B0%E5%9B%BE%E5%88%86%E7%9C%81%E7%9D%80%E8%89%B2/"/>
      <url>/2018/06/06/Echarts-Echarts%E4%B8%AD%E5%9B%BD%E5%9C%B0%E5%9B%BE%E5%88%86%E7%9C%81%E7%9D%80%E8%89%B2/</url>
      <content type="html"><![CDATA[<p>通过Echarts3曾经支持的<code>china.js</code>中国地图，对全国省分按条件进行着色，并去掉鼠标悬浮高亮显示。<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>使用百度地图按条件进行省分着色时，由于国外地图不能屏蔽，导致整个地图展示的时候多了很多不必要的信息。</p><p>涉及地图的这部分可视化插件只在内部使用，所以对地图的精确度没啥要求。</p><p>当在百度地图API中找不到只展示中国地图的方法后，去翻出了Echarts曾经自带的<code>china.js</code>。</p><p>需求：</p><ol><li>省分按条件进行着色</li><li>去掉鼠标悬浮时高亮显示</li></ol><h2 id="Echarts的china-js文件"><a href="#Echarts的china-js文件" class="headerlink" title="Echarts的china.js文件"></a>Echarts的<code>china.js</code>文件</h2><p>由于Echarts官方API推荐使用百度地图，所以<code>china.js</code>以及对应的json文件并没有在API中提供下载地址，但可以到<a href="https://github.com/apache/incubator-echarts" target="_blank" rel="noopener">Echarts的GitHub</a>上自行下载。<del>（微软收购GitHub的第三天……）</del></p><p>中国地图需要<code>china.js</code>与<em><code>china.json</code></em>，如果有需要，可以将map目录下的所有文件都下载下来。其中<code>js</code>文件与<code>json</code>文件的使用方式不同：</p><ul><li>直接<code>script</code>标签引入的<code>js</code>文件，引入后会自动注册地图名字和数据</li><li><code>JSON</code>文件，需要通过<code>AJAX</code>异步加载后手动注册</li></ul><p>官网样例为：  </p><blockquote><p>下面是两种类型的使用示例：<br>JavaScript 引入示例</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"echarts.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"map/js/china.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span></span><br><span class="line"><span class="undefined">chart.setOption(&#123;</span></span><br><span class="line"><span class="undefined">    series: [&#123;</span></span><br><span class="line"><span class="actionscript">        type: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">        map: <span class="string">'china'</span></span></span><br><span class="line"><span class="undefined">    &#125;]</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>JSON 引入示例</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>(<span class="string">'map/json/china.json'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chinaJson</span>) </span>&#123;</span><br><span class="line">    echarts.registerMap(<span class="string">'china'</span>, chinaJson);</span><br><span class="line">    <span class="keyword">var</span> chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br><span class="line">    chart.setOption(&#123;</span><br><span class="line">        series: [&#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="string">'map'</span>,</span><br><span class="line">            map: <span class="string">'china'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>1、 在首页中引入<code>echarts.min.js</code>与<code>china.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/echarts/4.1.0/echarts.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"./map/js/china.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>2、 读取省分日志json文件<br>省分日志json文件格式为：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"内蒙古"</span>,<span class="attr">"value"</span>:<span class="string">"10"</span>,<span class="attr">"state"</span>:<span class="string">"10"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"北京"</span>,<span class="attr">"value"</span>:<span class="string">"11"</span>,<span class="attr">"state"</span>:<span class="string">"10"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"天津"</span>,<span class="attr">"value"</span>:<span class="string">"13"</span>,<span class="attr">"state"</span>:<span class="string">"10"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"山东"</span>,<span class="attr">"value"</span>:<span class="string">"17"</span>,<span class="attr">"state"</span>:<span class="string">"10"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"河北"</span>,<span class="attr">"value"</span>:<span class="string">"18"</span>,<span class="attr">"state"</span>:<span class="string">"10"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"山西"</span>,<span class="attr">"value"</span>:<span class="string">"19"</span>,<span class="attr">"state"</span>:<span class="string">"10"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"安徽"</span>,<span class="attr">"value"</span>:<span class="string">"30"</span>,<span class="attr">"state"</span>:<span class="string">"10"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"上海"</span>,<span class="attr">"value"</span>:<span class="string">"31"</span>,<span class="attr">"state"</span>:<span class="string">"10"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"江苏"</span>,<span class="attr">"value"</span>:<span class="string">"34"</span>,<span class="attr">"state"</span>:<span class="string">"10"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"浙江"</span>,<span class="attr">"value"</span>:<span class="string">"36"</span>,<span class="attr">"state"</span>:<span class="string">"0"</span>&#125;,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>本文通过jQuery的<code>$.get()</code>方法来获取json文件，所以需要引入<code>jquery.min.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">"./data/"</span>+jsonName).done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//读取json日志 $.get()为EchartsAPI用到的方法，当数据获取完成(done)后,再进行地图渲染</span></span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3、 将数据进行格式化并进行地图渲染<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">"./data/"</span>+jsonName).done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//读取json日志 $.get()为EchartsAPI用到的方法，当数据获取完成(done)后,再进行地图渲染</span></span><br><span class="line">  $.each(data,<span class="function"><span class="keyword">function</span>(<span class="params">infoIndex,info</span>)</span>&#123;</span><br><span class="line">    provDate.push(&#123;</span><br><span class="line">      name: info.name,</span><br><span class="line">      value: <span class="built_in">Number</span>(info.state)</span><br><span class="line">    &#125;);</span><br><span class="line">    provDateSettings.push(&#123;</span><br><span class="line">      start: <span class="built_in">Number</span>(info.state),</span><br><span class="line">      end: <span class="built_in">Number</span>(info.state),</span><br><span class="line">      label: info.name,</span><br><span class="line">      color: g_state_color[<span class="built_in">Number</span>(info.state)]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> bmapCharts = echarts.init(<span class="built_in">document</span>.getElementById(mapId));</span><br><span class="line">  <span class="keyword">var</span> option = &#123;</span><br><span class="line">    title : &#123;</span><br><span class="line">      text: titleName,</span><br><span class="line">      x:<span class="string">'center'</span>,</span><br><span class="line">      textStyle: &#123;</span><br><span class="line">        fontSize: <span class="number">36</span>,</span><br><span class="line">        fontWeight: <span class="string">'bolder'</span>,</span><br><span class="line">        color: <span class="string">'#000'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip : &#123;<span class="comment">//提示框组件。</span></span><br><span class="line">      show: <span class="literal">false</span>, <span class="comment">//取消鼠标悬浮提示</span></span><br><span class="line">      trigger: <span class="string">'item'</span><span class="comment">//数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">      selectedMode:<span class="literal">false</span>, <span class="comment">// 关闭图例点击</span></span><br><span class="line">      show: <span class="literal">false</span>,</span><br><span class="line">      orient: <span class="string">'horizontal'</span>,<span class="comment">//图例的排列方向</span></span><br><span class="line">      x:<span class="string">'left'</span>,<span class="comment">//图例的位置</span></span><br><span class="line">      data:[<span class="string">'进度'</span>],</span><br><span class="line">      textStyle :&#123;</span><br><span class="line">        fontSize: <span class="number">26</span>,</span><br><span class="line">        color: <span class="string">'#333'</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    visualMap: &#123;<span class="comment">//颜色的设置  dataRange</span></span><br><span class="line">      x: <span class="string">'left'</span>,</span><br><span class="line">      y: <span class="string">'bottom'</span>,</span><br><span class="line">      splitList : nowSplitList, <span class="comment">//图例的各条件颜色</span></span><br><span class="line">      hoverLink : <span class="literal">false</span>,</span><br><span class="line">      textStyle :&#123;</span><br><span class="line">        fontSize: <span class="number">26</span>,</span><br><span class="line">        color: <span class="string">'#333'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// text:['高','低'],// 文本，默认为数值文本</span></span><br><span class="line">    &#125;,</span><br><span class="line">    toolbox: &#123;<span class="comment">//工具栏</span></span><br><span class="line">      show: <span class="literal">true</span>,</span><br><span class="line">      orient : <span class="string">'vertical'</span>,<span class="comment">//工具栏 icon 的布局朝向</span></span><br><span class="line">      x: <span class="string">'right'</span>,</span><br><span class="line">      y: <span class="string">'center'</span>,</span><br><span class="line">      feature : &#123;<span class="comment">//各工具配置项。</span></span><br><span class="line">          mark : &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">          dataView : &#123;<span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">readOnly</span>: <span class="literal">false</span>&#125;,<span class="comment">//数据视图工具，可以展现当前图表所用的数据，编辑后可以动态更新。</span></span><br><span class="line">          restore : &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;,<span class="comment">//配置项还原。</span></span><br><span class="line">          saveAsImage : &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;<span class="comment">//保存为图片。</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    roamController: &#123;<span class="comment">//控制地图的上下左右放大缩小 图上没有显示</span></span><br><span class="line">      show: <span class="literal">true</span>,</span><br><span class="line">      x: <span class="string">'right'</span>,</span><br><span class="line">      mapTypeControl: &#123;</span><br><span class="line">          <span class="string">'china'</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    series : [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'进度'</span>,</span><br><span class="line">        type: <span class="string">'map'</span>,</span><br><span class="line">        mapType: <span class="string">'china'</span>,</span><br><span class="line">        roam: <span class="literal">false</span>,<span class="comment">//是否开启鼠标缩放和平移漫游</span></span><br><span class="line">        hoverable: <span class="literal">false</span>, <span class="comment">// 关闭悬浮高亮</span></span><br><span class="line">        clickable: <span class="literal">false</span>, <span class="comment">//关闭悬浮高亮</span></span><br><span class="line">        dataRangeHoverLink: <span class="literal">false</span>,<span class="comment">//关闭与图例联动高亮</span></span><br><span class="line">        silent: <span class="literal">true</span>,<span class="comment">//关闭鼠标事件 关闭后不再响应鼠标悬浮</span></span><br><span class="line">        itemStyle:&#123;<span class="comment">//地图区域的多边形 图形样式</span></span><br><span class="line">            normal:&#123;<span class="comment">//是图形在默认状态下的样式</span></span><br><span class="line">                label:&#123;</span><br><span class="line">                    show:<span class="literal">true</span>,<span class="comment">//是否显示标签</span></span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: <span class="string">"rgb(29, 29, 29)"</span> <span class="comment">//省分字体颜色</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// emphasis:&#123;//是图形在高亮状态下的样式,比如在鼠标悬浮或者图例联动高亮时</span></span><br><span class="line">            <span class="comment">//     label:&#123;show:false&#125;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        top:<span class="string">"3%"</span>,<span class="comment">//组件距离容器的距离</span></span><br><span class="line">        data:provDate</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">  bmapCharts.setOption(option);</span><br><span class="line">  <span class="comment">// bmapCharts.on('mouseover', function (params) &#123; //鼠标事件</span></span><br><span class="line">  <span class="comment">//     var dataIndex = params.dataIndex;</span></span><br><span class="line">  <span class="comment">//     console.log(params);</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>地图鼠标事件没有进行更详细的控制，这部分需要的话需要再学习。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://upload-images.jianshu.io/upload_images/6101555-1477ec769278ad07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="着色效果"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.cnblogs.com/HoChine/p/8953072.html" target="_blank" rel="noopener">Echarts 中国地图各个省市自治区自定义颜色</a></li><li><a href="https://blog.csdn.net/zm_miner/article/details/78330101" target="_blank" rel="noopener"><br>Echarts绘制中国地图</a></li><li>官方API（有种3.0API不如2.0直观的感觉）</li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitHub-多分支多用户协作</title>
      <link href="/2018/06/05/GitHub-%E5%A4%9A%E5%88%86%E6%94%AF%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%8F%E4%BD%9C/"/>
      <url>/2018/06/05/GitHub-%E5%A4%9A%E5%88%86%E6%94%AF%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%8F%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>前几天通过<code>Fork--&gt;PR</code>的方式进行了代码贡献。现在是要通过多分支来实现多个用户同时对一个项目进行开发。<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>有一个小项目，需要两个人合作，但是提交PR太过于费事了，于是就想通过建分支、代码合并的方式进行开发。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="添加合作伙伴"><a href="#添加合作伙伴" class="headerlink" title="添加合作伙伴"></a>添加合作伙伴</h3><p>比较简单，在Github对应的仓库：<code>Settings-&gt;Collaborators</code>输入对应的Github用户名，就能添加合作伙伴了。</p><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p>例如创建一个<code>dev</code>分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev # 本地创建分支，并进行分支切换</span><br><span class="line">git push origin dev # 将本地dev代码提交给仓库，同时仓库会创建一个dev分支</span><br></pre></td></tr></table></figure></p><p>如果不想每次都指定分支，可以与仓库分支进行绑定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin dev</span><br></pre></td></tr></table></figure></p><blockquote><p>fatal: The current branch dev has no upstream branch.<br>To push the current branch and set the remote as upstream, use<br>   git push –set-upstream origin dev</p></blockquote><p>这样以后就可以直接执行<code>git push</code>了。</p><h3 id="公钥"><a href="#公钥" class="headerlink" title="公钥"></a>公钥</h3><p>这个方法不用配置公钥。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://tech-marsw.logdown.com/blog/2013/08/17/git-notes-github-n-person-cooperation-settings/" target="_blank" rel="noopener">Git 筆記 - Github 多人合作(設定)</a></li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python-datetime计算两个时间差</title>
      <link href="/2018/05/28/Python-datetime%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%97%B6%E9%97%B4%E5%B7%AE/"/>
      <url>/2018/05/28/Python-datetime%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%97%B6%E9%97%B4%E5%B7%AE/</url>
      <content type="html"><![CDATA[<p>通过两个<code>datetime</code>类型时间相减，计算两个时间相差的秒数、分钟数、天数等。<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>有一个需求开发，计算A日志文件从开始处理到最终完成总共花费了多少秒，当时是通过<code>datetime</code>将日志文件的开始时间T1与结束时间T2进行格式化，然后<code>(T2 - T1).seconds</code>来进行花费时间计算的。</p><p>如果你读到这里已经发现了逻辑不严谨之处，并想到了解决方案，可以忽略这篇文章了……</p><p>发现上面逻辑<strong>bug</strong>的场景很简单：由于有部分A日志文件内部记录异常，导致处理时间耗费时长超过了1天，然而上面逻辑算出来的秒数还停留在一天的范围以内。</p><p>场景复现一下是这样的：(Python version 2.7)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line">nowDateTime = datetime.now()</span><br><span class="line">lastDateTime = nowDateTime - timedelta(days = <span class="number">1</span>)</span><br><span class="line">timeDiff = nowDateTime - lastDateTime</span><br><span class="line"><span class="keyword">print</span> timeDiff.seconds <span class="comment"># 0</span></span><br><span class="line"><span class="keyword">print</span> timeDiff.days <span class="comment"># 1</span></span><br></pre></td></tr></table></figure></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在<a href="https://docs.python.org/2/library/datetime.html" target="_blank" rel="noopener">Python 2.7官网</a>上找方法准备手刃这个<strong>bug</strong></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>首先要清楚，两个<code>datetime</code>类型相减的结果是<code>timedelta</code>类型，如果不太清楚的话，可以自己输出<code>type</code>试一下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> type(timeDiff)</span><br><span class="line">&lt;type <span class="string">'datetime.timedelta'</span>&gt;</span><br></pre></td></tr></table></figure></p><p><code>datetime</code>与<code>timedelta</code>之间的计算关系可以参考官方的例子<a href="https://docs.python.org/2/library/datetime.html#datetime-objects" target="_blank" rel="noopener">8.1.4. datetime Objects</a>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">datetime2 = datetime1 + timedelta</span><br><span class="line">datetime2 = datetime1 - timedelta</span><br><span class="line">timedelta = datetime1 - datetime2</span><br><span class="line">datetime1 &lt; datetime2 <span class="comment"># 可以直接比较大小</span></span><br></pre></td></tr></table></figure></p><p>接下来要明白如何通过<code>timedelta</code>得到秒数差。<br><code>timedelta</code>提供三种方法<code>days</code>, <code>seconds</code> and <code>microseconds</code>，分别获取天数差、秒数差、微秒差，其他时间差可由这三个转化出来：</p><blockquote><p>Only days, seconds and microseconds are stored internally. Arguments are converted to those units:</p><ul><li>A millisecond is converted to 1000 microseconds.</li><li>A minute is converted to 60 seconds.</li><li>An hour is converted to 3600 seconds.</li><li>A week is converted to 7 days.  </li></ul></blockquote><p><code>days</code>, <code>seconds</code> and <code>microseconds</code>的取值范围为：</p><blockquote><p>and days, seconds and microseconds are then normalized so that the representation is unique, with</p><ul><li>0 &lt;= microseconds &lt; 1000000</li><li>0 &lt;= seconds &lt; 3600*24 (the number of seconds in one day)</li><li>-999999999 &lt;= days &lt;= 999999999</li></ul></blockquote><p><code>the number of seconds in one day</code>这句很重要，以前的代码逻辑的不严谨就在此处，当时只获取了这个秒数差，未判断天数差。而<code>days</code>, <code>seconds</code>和<code>microseconds</code>是独立的，正确的计算时间差，要算这三个的和。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p>通过<code>days</code>, <code>seconds</code>和<code>microseconds</code>来计算秒数总和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (timeDiff.microseconds + (timeDiff.seconds + timeDiff.days * <span class="number">24</span> * <span class="number">3600</span>) * <span class="number">10</span>**<span class="number">6</span>) / <span class="number">10</span>**<span class="number">6</span></span><br><span class="line"><span class="number">86400</span></span><br></pre></td></tr></table></figure></li><li><p>使用Python2.7 新增的方法：<a href="https://docs.python.org/2/library/datetime.html#datetime.timedelta.total_seconds" target="_blank" rel="noopener">timedelta.total_seconds()</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> int(timeDiff.total_seconds())</span><br><span class="line"><span class="number">86400</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="timedelta官网提供的其他计算样例"><a href="#timedelta官网提供的其他计算样例" class="headerlink" title="timedelta官网提供的其他计算样例"></a><code>timedelta</code>官网提供的其他计算样例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>year = timedelta(days=<span class="number">365</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_year = timedelta(weeks=<span class="number">40</span>, days=<span class="number">84</span>, hours=<span class="number">23</span>,</span><br><span class="line"><span class="meta">... </span>                         minutes=<span class="number">50</span>, seconds=<span class="number">600</span>)  <span class="comment"># adds up to 365 days</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>year.total_seconds()</span><br><span class="line"><span class="number">31536000.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>year == another_year</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ten_years = <span class="number">10</span> * year</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ten_years, ten_years.days // <span class="number">365</span></span><br><span class="line">(datetime.timedelta(<span class="number">3650</span>), <span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nine_years = ten_years - year</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nine_years, nine_years.days // <span class="number">365</span></span><br><span class="line">(datetime.timedelta(<span class="number">3285</span>), <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>three_years = nine_years // <span class="number">3</span>;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>three_years, three_years.days // <span class="number">365</span></span><br><span class="line">(datetime.timedelta(<span class="number">1095</span>), <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(three_years - ten_years) == <span class="number">2</span> * three_years + year</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://docs.python.org/2/library/datetime.html" target="_blank" rel="noopener">Python 2.7官网</a></li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-Ajax返回值与数组深拷贝</title>
      <link href="/2018/05/21/JS-Ajax%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%8E%E6%95%B0%E7%BB%84%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2018/05/21/JS-Ajax%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%8E%E6%95%B0%E7%BB%84%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      <content type="html"><![CDATA[<p>关于Ajax的同步请求返回值为<code>undefined</code>、<code>Array.reverse()</code>倒置、以及数组深拷贝。<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>无意间发现了自己以前写的<strong>bug</strong>。准确的说是两个：<br>第一个是：在Ajax中使用如下方式想要返回查询结果：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">queryJFInfo()&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">    type: <span class="string">"post"</span>,</span><br><span class="line">    datatype: <span class="string">"json"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">txtData</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> data = $.parseJSON(txtData);</span><br><span class="line">      <span class="keyword">if</span>(data.status==<span class="string">"success"</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> data.baseInfo</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>),</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">txtData</span>)</span>&#123;</span><br><span class="line">      alert(<span class="string">"error"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然而发现，在外面使用<code>let ans = queryJFInfo()</code>得到的结果始终为<code>undefined</code>。</p><p>第二个是：由于后台返回的记录数组是按时间倒序的，需要将数组再倒置一下展示：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dateRangeFormat = dateRange.reverse();</span><br></pre></td></tr></table></figure></p><p>这个<code>Array.reverse()</code>以前也用过许多次，不过都是只调用一次，今天将这个语句重复调用了多次之后，发现<code>dateRangeFormat</code>数组会重复进行正序、倒序、正序、倒序这样转化……</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="Ajax同步仍不能返回查询结果"><a href="#Ajax同步仍不能返回查询结果" class="headerlink" title="Ajax同步仍不能返回查询结果"></a>Ajax同步仍不能返回查询结果</h3><p>由于在<code>success</code>中测试过能正确输出data.baseInfo的值，所以确定为值未正确返回。原来的理解错误的地方是，采用了<code>async:false</code>之后，就能通过<code>success</code>来返回结果……</p><p>由于Ajax采用的异步方式，所以当执行Ajax语句后，会立即返回到外部函数，而不会等待Ajax执行结束。<code>success</code>是当Ajax执行状态为成功时才调用，所以不管<code>async</code>是<code>true</code>还是<code>false</code>，在<code>success</code>中写<code>return</code>并不会返回到外部函数。</p><p>有两种解决方案：</p><ol><li><p>采用Ajax的同步方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">queryJFInfo()&#123;</span><br><span class="line">  <span class="keyword">var</span> baseInfo = <span class="literal">null</span>; <span class="comment">// 设置变量来存储查询结果进行返回</span></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>,  <span class="comment">// 采用同步的方式</span></span><br><span class="line">    type: <span class="string">"post"</span>,</span><br><span class="line">    datatype: <span class="string">"json"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">txtData</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> data = $.parseJSON(txtData);</span><br><span class="line">      <span class="keyword">if</span>(data.status==<span class="string">"success"</span>)&#123;</span><br><span class="line">        baseInfo = data.baseInfo</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>),</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">txtData</span>)</span>&#123;</span><br><span class="line">      alert(<span class="string">"error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> baseInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>采用Ajax异步方式，在<code>success</code>中调用成功后要执行的方法（<code>callback function</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">queryJFInfo()&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">    type: <span class="string">"post"</span>,</span><br><span class="line">    datatype: <span class="string">"json"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">txtData</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> data = $.parseJSON(txtData);</span><br><span class="line">      <span class="keyword">if</span>(data.status==<span class="string">"success"</span>)&#123;</span><br><span class="line">        successThenDo(date.baseInfo); <span class="comment">// 成功后要执行的方法</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>),</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">txtData</span>)</span>&#123;</span><br><span class="line">      alert(<span class="string">"error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Array-reverse-多次调用倒置多次"><a href="#Array-reverse-多次调用倒置多次" class="headerlink" title="Array.reverse()多次调用倒置多次"></a><code>Array.reverse()</code>多次调用倒置多次</h3><p>这个问题的问题在于未正确认识到<code>reverse</code>的自身倒置功能与错误的使用了浅拷贝。</p><p>在js的<code>Array</code>方法中，像<code>reverse</code>、<code>pop</code>、<code>push</code>、<code>shift</code>、<code>unshift</code>、<code>sort</code>、<code>splice</code>这类方法都会改变原来的数组，如果使用浅拷贝，对浅拷贝的对象进行操作也会导致原数组改变。* <code>concat</code>、<code>forEach</code>、<code>map</code>、<code>join</code>、<code>slice</code>这类方法则会返回新数组，而不会改变原数组。</p><p>简单的使用<code>var arr2 = arr1;</code>的方法为浅拷贝，深拷贝可以使用<code>var arr2 = arr1.slice();</code>或者使用<code>var arr2 = arr1.concat();</code>，或者使用es6新语法，再或者使用<code>JSON</code>？Depend on you~</p><p>解决方法就是深拷贝出来一个新数组，再对新数组进行reverse……</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://stackoverflow.com/questions/4580265/jquery-ajax-return-undefined" target="_blank" rel="noopener">jquery ajax return: undefined</a></li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo-Github Pages未区分大小写</title>
      <link href="/2018/05/14/Hexo-Github%20Pages%E6%9C%AA%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99/"/>
      <url>/2018/05/14/Hexo-Github%20Pages%E6%9C%AA%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99/</url>
      <content type="html"><![CDATA[<p>为了规范性，对Hexo的tag更新了一下大小写，在本地预览时一切正常，但提交后点击tags报404错误，GitHub中tags目录下也未进行更新。<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>为了tags的规范，将tags区分了一下大小写，在本地预览时一切正常，但是同步到GitHub之后，打开博客发现tags报404错误……再去查GitHub项目仓库，发现tags根本就没有更新……Why……</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>原因是<code>git</code>默认是忽略文件名大小写的，所以本地更新了tags的大小写，在提交的时候也不会更新远程仓库的代码。</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ol><li><p>打开<code>.deploy_git</code>目录下的<code>.git</code>文件夹中的<code>config</code>文件，将<code>ignorecase = true</code>改为<code>ignorecase = false</code>，修改后core部分为：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line"><span class="attr">repositoryformatversion</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">filemode</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">bare</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">logallrefupdates</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">symlinks</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">ignorecase</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>重新生成、部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://1mhz.me/2015/hexo-deploy-case-sensitive/" target="_blank" rel="noopener">Hexo 部署到 Github Pages 文件夹大小写问题</a></li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> FreshMan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitHub-Fork与PR</title>
      <link href="/2018/05/13/GitHub-Fork%E4%B8%8EPR/"/>
      <url>/2018/05/13/GitHub-Fork%E4%B8%8EPR/</url>
      <content type="html"><![CDATA[<p>对开源项目进行代码贡献时，一般会采用<code>Fork--&gt;PR</code>的方式进行。主要描述进行PR的流程。<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>自己给<code>maupassant-hexo</code>主题增加了一个新功能，在与项目创建者沟通后，用PR来进行代码贡献。<br>简单的说，PR操作就是将正式环境的仓库完整克隆一份成自己的开发仓库，自己在开发仓库上进行代码修改，提交到自己的开发仓库后，向正式环境的仓库发起<code>Pull requests</code>请求，由正式仓库管理者来决定是否进行代码合并。<br>优点是不用在正式仓库建立更多的开发分支，正式仓库可以有选择性的来进行代码合并，并且支持在本地<code>pull</code>下来正式仓库最新状态。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="自己Fork正式仓库"><a href="#自己Fork正式仓库" class="headerlink" title="自己Fork正式仓库"></a>自己Fork正式仓库</h3><p>首先要自己Fork该项目仓库到自己的仓库中。<br>这部分可以通过在GitHub项目仓库页面上点击右上方的<code>Fork</code>按钮，就能将该项目克隆到自己仓库中。</p><h3 id="克隆开发仓库到本地"><a href="#克隆开发仓库到本地" class="headerlink" title="克隆开发仓库到本地"></a>克隆开发仓库到本地</h3><p>将自己的开发仓库克隆到本地，进行代码编辑。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/francisXKF/maupassant-hexo.git</span><br></pre></td></tr></table></figure></p><h3 id="与正式仓库作链接"><a href="#与正式仓库作链接" class="headerlink" title="与正式仓库作链接"></a>与正式仓库作链接</h3><p>由于在自己开发过程中，正式环境可能有代码更新的状态，此时需要更新本地仓库代码以保证非自己开发的代码与正式仓库一致，所以需要与正式仓库作链接。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">add</span> upstream http<span class="variable">s:</span>//github.<span class="keyword">com</span>/tufu9441/maupassant-hexo</span><br></pre></td></tr></table></figure></p><p>这样就与正式仓库做好了链接，此时正式仓库的别名为<code>upstream</code>，开发仓库别名为<code>origin</code>。可以执行以下命令来查看远程分支：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git remote</span></span><br></pre></td></tr></table></figure></p><p>注意：作为开源仓库，仓库名并没有.git后缀。  </p><h3 id="进行代码修改"><a href="#进行代码修改" class="headerlink" title="进行代码修改"></a>进行代码修改</h3><p>现在可以在本地仓库进行代码修改了，可能会用到：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> -A</span></span><br><span class="line"><span class="bash">git reset</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">""</span></span></span><br><span class="line"><span class="bash">git status</span></span><br><span class="line"><span class="bash">...</span></span><br></pre></td></tr></table></figure></p><h3 id="提交到自己的开发仓库"><a href="#提交到自己的开发仓库" class="headerlink" title="提交到自己的开发仓库"></a>提交到自己的开发仓库</h3><p>提交前，先同步正式仓库的代码更新：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull upstream <span class="literal">master</span></span><br></pre></td></tr></table></figure></p><p>确认无问题，提交到自己的开发仓库（本次开发直接使用master，没有新建分支）：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure></p><h3 id="提交PR请求"><a href="#提交PR请求" class="headerlink" title="提交PR请求"></a>提交PR请求</h3><p>到现在开发已完成，需要提交PR请求了，这部分目前通过GitHub项目仓库来完成。</p><ol><li>进入到自己的开发仓库界面  </li><li>点击<code>pull requests</code></li><li>点击<code>New pull request</code></li><li>确认提交的分支，以及修改的代码无误</li><li>填写进行代码修改的原因</li><li>提交PR请求</li></ol><h3 id="正式仓库进行代码合并"><a href="#正式仓库进行代码合并" class="headerlink" title="正式仓库进行代码合并"></a>正式仓库进行代码合并</h3><p>到此开发已经完成并已提交了PR请求，需要正式仓库管理者对代码进行审核，审核通过执行<code>Merge</code>操作，完成正式仓库代码更新。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/workflow-forking.md" target="_blank" rel="noopener">Forking工作流</a></li><li><a href="https://blog.csdn.net/qq_33429968/article/details/62219783" target="_blank" rel="noopener">git学习–GitHub上如何进行PR(Pull Request)操作</a></li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> FreshMan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo-文章字数统计与阅读时长</title>
      <link href="/2018/05/09/Hexo-%E6%96%87%E7%AB%A0%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E4%B8%8E%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF/"/>
      <url>/2018/05/09/Hexo-%E6%96%87%E7%AB%A0%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E4%B8%8E%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF/</url>
      <content type="html"><![CDATA[<p>使用<code>hexo-wordcount</code>在Hexo中增加文章字数统计与阅读时长。<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>昨晚写俩小时的总结，想知道自己一共写了多少字，然后进行了<code>ctrl-c</code>、<code>open word</code>、<code>ctrl-v</code>、<code>统计</code>……</p><p>给<a href="http://xukf.me">自己博客</a>增加一个字数统计的功能。以<code>maupassant</code>主题<code>pug</code>语法为例，其他语法可以看<a href="https://www.npmjs.com/package/hexo-wordcount" target="_blank" rel="noopener">npm hexo-wordcount</a>。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li><p>安装<code>hexo-wordcount</code>插件</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --<span class="keyword">save</span> hexo-<span class="built_in">wordcount</span></span><br></pre></td></tr></table></figure></li><li><p>在maupassant主题下的新建一个<code>wordcount.pug</code>文件</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">themes<span class="symbol">\m</span>aupassant<span class="symbol">\l</span>ayout<span class="symbol">\_</span>partial<span class="symbol">\w</span>ordcount.pug</span><br></pre></td></tr></table></figure></li><li><p><code>wordcount.pug</code>文件增加内容：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">span(<span class="keyword">class</span>=<span class="string">"post-time"</span>)</span><br><span class="line">  span.<span class="keyword">post</span>-meta-item-text= <span class="string">" | "</span></span><br><span class="line">  span(<span class="keyword">class</span>=<span class="string">"post-meta-item-icon"</span>)</span><br><span class="line">    <span class="built_in">i</span>(<span class="keyword">class</span>=<span class="string">"fa fa-keyboard-o"</span>)</span><br><span class="line">    <span class="comment">// span.post-meta-item-text= " 字数统计："</span></span><br><span class="line">    span.<span class="keyword">post</span>-<span class="keyword">count</span>= ' '+<span class="built_in">wordcount</span>(page.content)</span><br><span class="line">    span.<span class="keyword">post</span>-meta-item-text= ' 字'</span><br><span class="line">span(<span class="keyword">class</span>=<span class="string">"post-time"</span>) &amp;nbsp; | &amp;nbsp;</span><br><span class="line">  span(<span class="keyword">class</span>=<span class="string">"post-meta-item-icon"</span>)</span><br><span class="line">      <span class="built_in">i</span>(<span class="keyword">class</span>=<span class="string">"fa fa-hourglass-half"</span>)</span><br><span class="line">      <span class="comment">// span.post-meta-item-text= " 阅读时长："</span></span><br><span class="line">      span.<span class="keyword">post</span>-<span class="keyword">count</span>= ' '+min2read(page.content)</span><br><span class="line">      span.<span class="keyword">post</span>-meta-item-text= <span class="string">" 分钟"</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>themes\maupassant\layout\post.pug</code>文件中引入<code>wordcount.pug</code>文件（我自定义的位置在<code>busuanzi</code>与<code>disqus</code>之间）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> theme<span class="selector-class">.busuanzi</span> == true</span><br><span class="line">  script(src=<span class="string">'https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js'</span>, async)</span><br><span class="line">  span#busuanzi_container_page_pv= <span class="string">' | '</span></span><br><span class="line">    span#busuanzi_value_page_pv</span><br><span class="line">    span= <span class="string">' '</span> + __(<span class="string">'Hits'</span>)</span><br><span class="line">include _partial/wordcount.pug</span><br><span class="line"><span class="keyword">if</span> theme.disqus</span><br></pre></td></tr></table></figure></li></ol><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://upload-images.jianshu.io/upload_images/6101555-0432c967dd1e52dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="hexo-wordcount"></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>已重新对代码进行了规范化，并向<a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">maupassant-hexo</a>提交了PR，增加了该部分功能。如果有需要，可以看本次修改内容<a href="https://github.com/tufu9441/maupassant-hexo/commit/d990a41fbe7a67b1f3bc5a69ce2b8b66481a7495" target="_blank" rel="noopener">PR #384</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.jianshu.com/p/f5c184047e72" target="_blank" rel="noopener">『博客搭建』—— hexo 博客小功能添加-评论、萌妹纸、相册、字数统计…</a></li><li><a href="https://pug.bootcss.com/language/includes.html" target="_blank" rel="noopener">Pug 中文文档</a></li><li><a href="https://www.npmjs.com/package/hexo-wordcount" target="_blank" rel="noopener">npm hexo-wordcount</a></li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux-内存分析</title>
      <link href="/2018/05/08/Linux-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
      <url>/2018/05/08/Linux-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>分析Linux内存使用情况，包括：<code>free</code>命令展示内容分析；<code>top</code>命令中内存部分分析；<code>/proc/meminfo</code>中内存部分分析；<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>想要对线上主机的进程占用内存情况进行监控，原来很简单的使用的是<code>free</code>命令的<code>used</code>来表示的内存使用情况，目前已不能满足监控要求，需要分析<code>free</code>、<code>top</code>、<code>/proc/meminfo</code>各字段含义，以及找出符合需求的方案。</p><h2 id="free命令"><a href="#free命令" class="headerlink" title="free命令"></a><code>free</code>命令</h2><p><code>free</code>命令输出格式如下：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[~]$ free -k</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:      <span class="number">49449300</span>   <span class="number">24798084</span>   <span class="number">24651216</span>          <span class="number">0</span>    <span class="number">3602016</span>   <span class="number">15910220</span></span><br><span class="line">-/+ buffers/cache:    <span class="number">5285848</span>   <span class="number">44163452</span></span><br><span class="line">Swap:     <span class="number">33554424</span>   <span class="number">14794692</span>   <span class="number">18759732</span></span><br></pre></td></tr></table></figure></p><ul><li>Mem<ul><li>total：内存总量</li><li>used：内存使用量，包含<code>buffers</code>与<code>cached</code></li><li>free：空闲内存量</li><li>buffers、cached：缓存内存量</li></ul></li><li>-/+ buffers/cache<ul><li>used：used – buffers – cached</li><li>free：free + buffers + cached</li></ul></li><li>Swap：交换区</li></ul><p>存在的关系为：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mem：total = used + free</span><br><span class="line">     实际已用内存 = total - <span class="keyword">buffers </span>- <span class="keyword">cached</span></span><br><span class="line"><span class="keyword"> </span>    空闲内存 = free + <span class="keyword">buffers </span>+ <span class="keyword">cached</span></span><br></pre></td></tr></table></figure></p><p>还有另一种<code>free</code>命令结果：<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[~]$ free -k</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:     <span class="number"> 263848376 </span>  <span class="number"> 21822408 </span>    <span class="number"> 836740 </span>    <span class="number"> 968264 </span> <span class="number"> 241189228 </span>  240590568</span><br><span class="line">Swap:    <span class="number"> 134217724 </span>    <span class="number"> 562320 </span>  133655404</span><br></pre></td></tr></table></figure></p><p>与上一种不同的是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mem</span><br><span class="line">  used为实际使用量</span><br><span class="line">  total = used + <span class="built_in">free</span> + buff/cache</span><br><span class="line">  available = 可回收的内存 + <span class="built_in">free</span> 表示系统可用的内存，不过这是一个估计值，并不精确</span><br></pre></td></tr></table></figure></p><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a><code>top</code>命令</h2><p><code>top</code>命令输出格式如下：<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[~]$ top</span><br><span class="line">top - 23:29:48 up<span class="number"> 699 </span>days,  7:17, <span class="number"> 6 </span>users,  load average: 1.65, 1.30, 1.22</span><br><span class="line">Tasks:<span class="number"> 773 </span>total,  <span class="number"> 1 </span>running,<span class="number"> 772 </span>sleeping,  <span class="number"> 0 </span>stopped,  <span class="number"> 0 </span>zombie</span><br><span class="line">Cpu(s):  3.6%us,  2.8%sy,  0.0%ni, 93.5%id,  0.1%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Mem:  49449300k total, 24823852k used, 24625448k free,  3602116k buffers</span><br><span class="line">Swap: 33554424k total, 14794692k used, 18759732k free, 15911860k cached</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</span><br><span class="line">22326 root     <span class="number"> 18 </span> <span class="number"> 0 </span>9963m 679m<span class="number"> 2472 </span>S 100.7  1.4 167891:08 java   </span><br><span class="line">27893 aiuap_jc <span class="number"> 15 </span> <span class="number"> 0 </span>13272<span class="number"> 1616 </span><span class="number"> 808 </span>R  1.0  0.0   0:00.06 top     </span><br><span class="line">   <span class="number"> 1 </span>root     <span class="number"> 15 </span> <span class="number"> 0 </span>10348  <span class="number"> 96 </span> <span class="number"> 64 </span>S  0.0  0.0  29:29.83 init</span><br></pre></td></tr></table></figure></p><p>其中Mem行与Swap行与<code>free</code>命令输出结果能够一一对应<br>对于每个进程来说：</p><h3 id="VIRT"><a href="#VIRT" class="headerlink" title="VIRT"></a>VIRT</h3><p>virtual memory usage 虚拟内存<br>进程需要的虚拟内存大小，并不是实际占用的物理内存大小，包括了进程使用的库、代码、数据等</p><blockquote><p>假如进程申请100m的内存，但实际只使用了10m，那么它会增长100m，而不是实际的使用量</p></blockquote><h3 id="RES"><a href="#RES" class="headerlink" title="RES"></a>RES</h3><p>resident memory usage 常驻内存<br>进程当前使用的内存，<strong>包括与其他程序的共享内存</strong>，但不包括swap out</p><blockquote><p>如果申请100m的内存，实际使用10m，它只增长10m，与VIRT相反<br>关于库占用内存的情况，它只统计加载的库文件所占内存大小</p></blockquote><h3 id="SHR"><a href="#SHR" class="headerlink" title="SHR"></a>SHR</h3><p>shared memory 共享内存<br>当前进程自身/其他进程的共享内存  </p><blockquote><p>虽然进程只使用了几个共享库的函数，但它包含了整个共享库的大小</p></blockquote><p>某个进程独占的物理内存大小 = RES – SHR</p><h3 id="DATA"><a href="#DATA" class="headerlink" title="DATA"></a>DATA</h3><p><code>top</code>命令还有一个<code>DATA</code>一项（需要f手工添加），表示该程序数据占用的内存。</p><h2 id="proc-meminfo"><a href="#proc-meminfo" class="headerlink" title="/proc/meminfo"></a><code>/proc/meminfo</code></h2><p><code>/proc/meminfo</code>内容如下：<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[~]$ cat /<span class="keyword">proc</span>/meminfo</span><br><span class="line">MemTotal:       263848376<span class="title"> kB</span></span><br><span class="line"><span class="title">MemFree:</span>          768316<span class="title"> kB</span></span><br><span class="line"><span class="title">MemAvailable:</span>   240574824<span class="title"> kB</span></span><br><span class="line"><span class="title">Buffers:</span>          377792<span class="title"> kB</span></span><br><span class="line"><span class="title">Cached:</span>         233359392<span class="title"> kB</span></span><br><span class="line"><span class="title">SwapCached:</span>         1480<span class="title"> kB</span></span><br><span class="line"><span class="title">Active:</span>         139386604<span class="title"> kB</span></span><br><span class="line"><span class="title">Inactive:</span>       114406100<span class="title"> kB</span></span><br><span class="line"><span class="title">Active(anon):</span>   19662812<span class="title"> kB</span></span><br><span class="line"><span class="title">Inactive(anon):</span>  1360920<span class="title"> kB</span></span><br><span class="line"><span class="title">Active(file):</span>   119723792<span class="title"> kB</span></span><br><span class="line"><span class="title">Inactive(file):</span> 113045180<span class="title"> kB</span></span><br><span class="line"><span class="title">Unevictable:</span>           0<span class="title"> kB</span></span><br><span class="line"><span class="title">Mlocked:</span>               0<span class="title"> kB</span></span><br><span class="line"><span class="title">SwapTotal:</span>      134217724<span class="title"> kB</span></span><br><span class="line"><span class="title">SwapFree:</span>       133655284<span class="title"> kB</span></span><br><span class="line"><span class="title">Dirty:</span>            107808<span class="title"> kB</span></span><br><span class="line"><span class="title">Writeback:</span>             0<span class="title"> kB</span></span><br><span class="line"><span class="title">AnonPages:</span>      20054452<span class="title"> kB</span></span><br><span class="line"><span class="title">Mapped:</span>            34972<span class="title"> kB</span></span><br><span class="line"><span class="title">Shmem:</span>            968144<span class="title"> kB</span></span><br><span class="line"><span class="title">Slab:</span>            7506700<span class="title"> kB</span></span><br><span class="line"><span class="title">SReclaimable:</span>    7375420<span class="title"> kB</span></span><br><span class="line"><span class="title">SUnreclaim:</span>       131280<span class="title"> kB</span></span><br><span class="line"><span class="title">KernelStack:</span>        6240<span class="title"> kB</span></span><br><span class="line"><span class="title">PageTables:</span>        47808<span class="title"> kB</span></span><br><span class="line"><span class="title">NFS_Unstable:</span>          0<span class="title"> kB</span></span><br><span class="line"><span class="title">Bounce:</span>                0<span class="title"> kB</span></span><br><span class="line"><span class="title">WritebackTmp:</span>          0<span class="title"> kB</span></span><br><span class="line"><span class="title">CommitLimit:</span>    266141912<span class="title"> kB</span></span><br><span class="line"><span class="title">Committed_AS:</span>   27851440<span class="title"> kB</span></span><br><span class="line"><span class="title">VmallocTotal:</span>   34359738367<span class="title"> kB</span></span><br><span class="line"><span class="title">VmallocUsed:</span>      733404<span class="title"> kB</span></span><br><span class="line"><span class="title">VmallocChunk:</span>   34222675168<span class="title"> kB</span></span><br><span class="line"><span class="title">HardwareCorrupted:</span>     0<span class="title"> kB</span></span><br><span class="line"><span class="title">AnonHugePages:</span>   5552128<span class="title"> kB</span></span><br><span class="line"><span class="title">HugePages_Total:</span>       0</span><br><span class="line">HugePages_Free:        0</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:        0</span><br><span class="line">Hugepagesize:       2048<span class="title"> kB</span></span><br><span class="line"><span class="title">DirectMap4k:</span>      129792<span class="title"> kB</span></span><br><span class="line"><span class="title">DirectMap2M:</span>     3936256<span class="title"> kB</span></span><br><span class="line"><span class="title">DirectMap1G:</span>    266338304<span class="title"> kB</span></span><br></pre></td></tr></table></figure></p><p>这部分内容基本是根据<a href="http://linuxperf.com/?p=142" target="_blank" rel="noopener">/PROC/MEMINFO之谜</a>进行学习的，建议看原文章，本节下面的内容主要是便于自身理解。<br>其中：</p><h3 id="MemTotal"><a href="#MemTotal" class="headerlink" title="MemTotal"></a>MemTotal</h3><p>可供支配的总内存大小</p><h3 id="MemFree"><a href="#MemFree" class="headerlink" title="MemFree"></a>MemFree</h3><p>尚未使用的内存，MemTotal-MemFree表示已经用过的内存，但不等于可用内存，因为有部分内存可回收释放</p><h3 id="MemAvailable"><a href="#MemAvailable" class="headerlink" title="MemAvailable"></a>MemAvailable</h3><p>可用内存，这是内核估算出来的值，并不十分精确，等于部分可回收的内存+MemFree</p><h3 id="PageTables"><a href="#PageTables" class="headerlink" title="PageTables"></a>PageTables</h3><p>Page Table用于将内存的虚拟地址翻译成物理地址，随着内存地址分配得越来越多，Page Table会增大，pageTables表示Page Table的大小</p><h3 id="Buffers"><a href="#Buffers" class="headerlink" title="Buffers"></a>Buffers</h3><p>表示块设备(block device)所占用的缓存页，包括：直接读写块设备、以及文件系统元数据(metadata)比如SuperBlock所使用的缓存页；<br>这部分可以理解为直接与块设备进行读写，所以需要缓存页的使用，例如使用dd命令进行复制等。因为块设备的读写是按照块来进行的，引入缓冲区后，可以避免小数据量的改动导致重复对块（可能是块下的扇区）进行读写，提高效率。</p><h3 id="Cached"><a href="#Cached" class="headerlink" title="Cached"></a>Cached</h3><p>包括正被用户使用到的文件的缓存页+原用过但并没有回收的页面，即包括：Mapped与unmapped的页面。</p><h3 id="SwapCached"><a href="#SwapCached" class="headerlink" title="SwapCached"></a>SwapCached</h3><p>交换区缓存，是交换区设备的缓存。</p><blockquote><p>交换区可以包括一个或多个交换区设备（裸盘、逻辑卷、文件都可以充当交换区设备），每一个交换区设备都对应自己的swap cache，可以把swap cache理解为交换区设备的”page cache”：page cache对应的是一个个文件，swap cache对应的是一个个交换区设备，kernel管理swap cache与管理page cache一样，用的都是radix-tree，唯一的区别是：page cache与文件的对应关系在打开文件时就确定了，而一个匿名页只有在即将被swap-out的时候才决定它会被放到哪一个交换区设备，即匿名页与swap cache的对应关系在即将被swap-out时才确立。  </p><p>并不是每一个匿名页都在swap cache中，只有以下情形之一的匿名页才在：  </p><p>匿名页即将被swap-out时会先被放进swap cache，但通常只存在很短暂的时间，因为紧接着在pageout完成之后它就会从swap cache中删除，毕竟swap-out的目的就是为了腾出空闲内存；<br>【注：参见mm/vmscan.c: shrink_page_list()，它调用的add_to_swap()会把swap cache页面标记成dirty，然后它调用try_to_unmap()将页面对应的page table mapping都删除，再调用pageout()回写dirty page，最后try_to_free_swap()会把该页从swap cache中删除。】<br>曾经被swap-out现在又被swap-in的匿名页会在swap cache中，直到页面中的内容发生变化、或者原来用过的交换区空间被回收为止。<br>【注：当匿名页的内容发生变化时会删除对应的swap cache，代码参见mm/swapfile.c: reuse_swap_page()。】  </p><p>/proc/meminfo中的SwapCached背后的含义是：系统中有多少匿名页曾经被swap-out、现在又被swap-in并且swap-in之后页面中的内容一直没发生变化。也就是说，如果这些匿名页需要被swap-out的话，是无需进行I/O write操作的。</p></blockquote><p>需要注意的是，<code>Cached</code>与<code>SwapCached</code>两个统计值是互不重叠的，Shared memory和tmpfs在不发生swap-out的时候属于”Cached”，而在swap-out/swap-in的过程中会被加进swap cache中、属于”SwapCached”，一旦进了”SwapCached”，就不再属于”Cached”了。</p><h3 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h3><blockquote><p>用户进程的内存页分为两种：file-backed pages（与文件对应的内存页），和anonymous pages（匿名页），比如进程的代码、映射的文件都是file-backed，而进程的堆、栈都是不与文件相对应的、就属于匿名页。file-backed pages在内存不足的时候可以直接写回对应的硬盘文件里，称为page-out，不需要用到交换区(swap)；而anonymous pages在内存不足时就只能写到硬盘上的交换区(swap)里，称为swap-out。  </p><p>file 表示 file-backed pages（与文件对应的内存页）</p></blockquote><p>理论上应该有：<br><strong>【所有进程的PSS之和】 == 【Mapped + AnonPages】</strong></p><blockquote><p>实际测试的结果，虽然两者很接近，却总是无法精确相等，我猜也许是因为进程始终在变化、采集的/proc/[1-9]*/smaps以及/proc/meminfo其实不是来自同一个时间点的缘故。</p></blockquote><h3 id="Shmem"><a href="#Shmem" class="headerlink" title="Shmem"></a>Shmem</h3><p>主要包括：</p><ul><li>shared memory（基于tmpfs实现）</li><li>tmpfs  </li></ul><p>Shmem 统计的是已经分配的大小，而不是创建时申请的大小</p><h3 id="AnonPages"><a href="#AnonPages" class="headerlink" title="AnonPages"></a>AnonPages</h3><ul><li>所有page cache里的页面(Cached)都是file-backed pages，不是Anonymous Pages。”Cached”与”AnoPages”之间没有重叠。<br>注：shared memory 不属于 AnonPages，而是属于Cached，因为shared memory基于tmpfs，所以被视为file-backed、在page cache里，上一节解释过。</li><li>mmap private anonymous pages属于AnonPages(Anonymous Pages)，而mmap shared anonymous pages属于Cached(file-backed pages)，因为shared anonymous mmap也是基于tmpfs的。</li><li>Anonymous Pages是与用户进程共存的，一旦进程退出，则Anonymous pages也释放，不像page cache即使文件与进程不关联了还可以缓存。</li><li>AnonPages统计值中包含了Transparent HugePages (THP)对应的 AnonHugePages</li></ul><h3 id="Mapped"><a href="#Mapped" class="headerlink" title="Mapped"></a>Mapped</h3><p>用户进程的file-backed pages就对应着/proc/meminfo中的”Mapped”</p><blockquote><p>正被用户进程关联，比如shared libraries、可执行程序的文件、mmap的文件等，这些文件的缓存页就称为mapped  </p><p>”Mapped”是”Cached”的子集</p></blockquote><h3 id="主要关系图"><a href="#主要关系图" class="headerlink" title="主要关系图"></a>主要关系图</h3><p><code>/proc/meminfo</code>中主要字段关系为，这个图描述可能过于简洁，导致一些地方存在偏差，只是提供分析方法。<br><img src="https://upload-images.jianshu.io/upload_images/6101555-c5e0fc1ffe940439.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="Linux中meminfo相关信息关系"></p><h2 id="proc-pid-smaps"><a href="#proc-pid-smaps" class="headerlink" title="/proc/pid/smaps"></a>/proc/pid/smaps</h2><p>每个进程都有的文件，记录了进程信息，其中有内存使用情况。</p><p>如果要统计所有进程占用的内存，并且共享内存不重复记录，则可以通过：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep Pss /<span class="function"><span class="keyword">proc</span>/[<span class="number">1</span><span class="number">-9</span>]*/<span class="title">smaps</span> | <span class="title">awk</span>  '&#123;<span class="title">total</span>+=$<span class="number">2</span>&#125;</span>; <span class="keyword">END</span> &#123;<span class="keyword">print</span> total&#125;'</span><br></pre></td></tr></table></figure></p><p>需要注意的是，可能有的pid下的/smaps没有权限访问……</p><p>同时：top命令输出中的RES和pmap输出中的RSS是一个东西</p><h2 id="各命令之间的关系比对"><a href="#各命令之间的关系比对" class="headerlink" title="各命令之间的关系比对"></a>各命令之间的关系比对</h2><p>top<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[~]$ top</span><br><span class="line">top - <span class="number">00</span>:<span class="number">15</span>:<span class="number">31</span> up <span class="number">699</span> days,  <span class="number">8</span>:<span class="number">03</span>,  <span class="number">6</span> users,  load average: <span class="number">1</span>.<span class="number">65</span>, <span class="number">1</span>.<span class="number">27</span>, <span class="number">1</span>.<span class="number">24</span></span><br><span class="line">Tasks: <span class="number">780</span> total,<span class="number">5</span> running, <span class="number">775</span> sleeping,<span class="number">0</span> stopped,<span class="number">0</span> zombie</span><br><span class="line">Cpu(s):  <span class="number">6</span>.<span class="number">3</span>%us,  <span class="number">4</span>.<span class="number">7</span>%sy,  <span class="number">0</span>.<span class="number">0</span>%ni, <span class="number">88</span>.<span class="number">5</span>%id,  <span class="number">0</span>.<span class="number">6</span>%wa,  <span class="number">0</span>.<span class="number">0</span>%hi,  <span class="number">0</span>.<span class="number">0</span>%si,  <span class="number">0</span>.<span class="number">0</span>%st</span><br><span class="line">Mem:  <span class="number">49449300</span>k total, <span class="number">24825488</span>k used, <span class="number">24623812</span>k free,  <span class="number">3602140</span>k buffers</span><br><span class="line">Swap: <span class="number">33554424</span>k total, <span class="number">14794692</span>k used, <span class="number">18759732</span>k free, <span class="number">15912372</span>k cached</span><br><span class="line"></span><br><span class="line">  PID USERPR  NI  VIRT  RES  SHR S %CPU %MEM TIME+  COMMAND  </span><br><span class="line"><span class="number">22326</span> root180 <span class="number">9963m</span> <span class="number">662m</span> <span class="number">2472</span> S <span class="number">101</span>.<span class="number">0</span>  <span class="number">1.4 167937</span>:<span class="number">49</span> java  </span><br><span class="line"><span class="number">17775</span> app_usr160  <span class="number">247m</span>  <span class="number">12m</span> <span class="number">5276</span> S  <span class="number">1</span>.<span class="number">3</span>  <span class="number">0.00:00.57</span> python</span><br><span class="line"><span class="number">18304</span> app_usr<span class="number">150 13272</span> <span class="number">1644</span>  <span class="number">808</span> R  <span class="number">0</span>.<span class="number">7</span>  <span class="number">0.00:00.05</span> top</span><br><span class="line"><span class="number">18426</span> app_usr180  <span class="number">247m</span>  <span class="number">11m</span> <span class="number">3776</span> R  <span class="number">0</span>.<span class="number">7</span>  <span class="number">0.00:00.02</span> python</span><br><span class="line"><span class="number">18425</span> app_usr180  <span class="number">247m</span>  <span class="number">11m</span> <span class="number">3776</span> R  <span class="number">0</span>.<span class="number">3</span>  <span class="number">0.00:00.01</span> python</span><br></pre></td></tr></table></figure></p><p>free<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[~]$ free -k</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:      <span class="number">49449300</span>   <span class="number">24820228</span>   <span class="number">24629072</span>          <span class="number">0</span>    <span class="number">3602140</span>   <span class="number">15912372</span></span><br><span class="line">-/+ buffers/cache:    <span class="number">5305716</span>   <span class="number">44143584</span></span><br><span class="line">Swap:     <span class="number">33554424</span>   <span class="number">14794692</span>   <span class="number">18759732</span></span><br></pre></td></tr></table></figure></p><p>/proc/meminfo<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[~]$ cat <span class="meta-keyword">/proc/</span>meminfo</span><br><span class="line"><span class="symbol">MemTotal:</span>     <span class="number">49449300</span> kB</span><br><span class="line"><span class="symbol">MemFree:</span>      <span class="number">24631608</span> kB</span><br><span class="line"><span class="symbol">Buffers:</span>       <span class="number">3602140</span> kB</span><br><span class="line"><span class="symbol">Cached:</span>       <span class="number">15912388</span> kB</span><br><span class="line"><span class="symbol">SwapCached:</span>    <span class="number">2354868</span> kB</span><br><span class="line"><span class="symbol">Active:</span>       <span class="number">10286124</span> kB</span><br><span class="line"><span class="symbol">Inactive:</span>     <span class="number">13448900</span> kB</span><br><span class="line"><span class="symbol">HighTotal:</span>           <span class="number">0</span> kB</span><br><span class="line"><span class="symbol">HighFree:</span>            <span class="number">0</span> kB</span><br><span class="line"><span class="symbol">LowTotal:</span>     <span class="number">49449300</span> kB</span><br><span class="line"><span class="symbol">LowFree:</span>      <span class="number">24631608</span> kB</span><br><span class="line"><span class="symbol">SwapTotal:</span>    <span class="number">33554424</span> kB</span><br><span class="line"><span class="symbol">SwapFree:</span>     <span class="number">18759732</span> kB</span><br><span class="line"><span class="symbol">Dirty:</span>            <span class="number">1696</span> kB</span><br><span class="line"><span class="symbol">Writeback:</span>           <span class="number">0</span> kB</span><br><span class="line"><span class="symbol">AnonPages:</span>     <span class="number">1965432</span> kB</span><br><span class="line"><span class="symbol">Mapped:</span>          <span class="number">38332</span> kB</span><br><span class="line"><span class="symbol">Slab:</span>           <span class="number">890560</span> kB</span><br><span class="line"><span class="symbol">PageTables:</span>      <span class="number">84276</span> kB</span><br><span class="line"><span class="symbol">NFS_Unstable:</span>        <span class="number">0</span> kB</span><br><span class="line"><span class="symbol">Bounce:</span>              <span class="number">0</span> kB</span><br><span class="line"><span class="symbol">CommitLimit:</span>  <span class="number">58279072</span> kB</span><br><span class="line"><span class="symbol">Committed_AS:</span> <span class="number">20471392</span> kB</span><br><span class="line"><span class="symbol">VmallocTotal:</span> <span class="number">34359738367</span> kB</span><br><span class="line"><span class="symbol">VmallocUsed:</span>    <span class="number">279448</span> kB</span><br><span class="line"><span class="symbol">VmallocChunk:</span> <span class="number">34359458679</span> kB</span><br><span class="line"><span class="symbol">HugePages_Total:</span>     <span class="number">0</span></span><br><span class="line"><span class="symbol">HugePages_Free:</span>      <span class="number">0</span></span><br><span class="line"><span class="symbol">HugePages_Rsvd:</span>      <span class="number">0</span></span><br><span class="line"><span class="symbol">Hugepagesize:</span>     <span class="number">2048</span> kB</span><br></pre></td></tr></table></figure></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://linuxperf.com/?p=142" target="_blank" rel="noopener">/PROC/MEMINFO之谜</a></li><li><a href="https://javawind.net/p131" target="_blank" rel="noopener">linux top命令VIRT,RES,SHR,DATA的含义</a></li><li><a href="https://segmentfault.com/a/1190000008125006" target="_blank" rel="noopener">Linux内存管理</a></li><li><a href="https://www.cnblogs.com/lifexy/p/7651667.html" target="_blank" rel="noopener">22.Linux-块设备驱动之框架详细分析(详解)</a></li><li><a href="http://linuxperf.com/?p=143" target="_blank" rel="noopener">怎样统计所有进程总共占用多少内存？</a></li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Echarts-百度地图省分着色</title>
      <link href="/2018/05/03/Echarts-%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%9C%81%E5%88%86%E7%9D%80%E8%89%B2/"/>
      <url>/2018/05/03/Echarts-%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%9C%81%E5%88%86%E7%9D%80%E8%89%B2/</url>
      <content type="html"><![CDATA[<p>通过Echarts3结合百度地图，对全国省分进行着色。<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>由于Echarts3中，不再使用china.js文件：</p><blockquote><p>ECharts 之前提供下载的矢量地图数据来自第三方，由于部分数据不符合国家《测绘法》规定，目前暂时停止下载服务。<br>建议大家使用以百度地图为底图的形式，参考实例：<a href="http://echarts.baidu.com/demo.html#map-polygon" target="_blank" rel="noopener">http://echarts.baidu.com/demo.html#map-polygon</a></p></blockquote><p>学习百度地图使用方法，先用各省分着色练手。</p><h2 id="百度地图-API"><a href="#百度地图-API" class="headerlink" title="百度地图 API"></a>百度地图 API</h2><p>可参考官方文档：</p><ul><li><a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a3b14" target="_blank" rel="noopener">百度地图开放平台：JavaScript API v2.0类参考</a></li><li><a href="http://lbsyun.baidu.com/index.php?title=jspopular/guide/custom" target="_blank" rel="noopener">百度地图开放平台：JavaScript API</a></li></ul><h2 id="Echarts结合百度地图官方实例"><a href="#Echarts结合百度地图官方实例" class="headerlink" title="Echarts结合百度地图官方实例"></a>Echarts结合百度地图官方实例</h2><ul><li><a href="http://echarts.baidu.com/blog/2016/06/13/echarts-map-tutorial.html" target="_blank" rel="noopener">ECharts 实现地图散点图（下）</a></li><li><a href="http://echarts.baidu.com/demo.html#map-polygon" target="_blank" rel="noopener">http://echarts.baidu.com/demo.html#map-polygon</a></li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li><p>在首页中引入bmap.js与百度地图的api</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/echarts/bmap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak=您自己的ak"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>初始化echarts图表，并<code>setOption</code>百度地图的参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bmapCharts = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'chinaProvMap'</span>));</span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  bmap: &#123;&#125; <span class="comment">// 此处为空，各类参数后面通过百度地图api进行设置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取bmap并进行地图设置</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var map</span> = bmapCharts.getModel().getComponent(<span class="string">'bmap'</span>).getBMap();</span><br></pre></td></tr></table></figure></li></ol><h2 id="百度地图配置代码"><a href="#百度地图配置代码" class="headerlink" title="百度地图配置代码"></a>百度地图配置代码</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">let provList = new <span class="symbol">Array</span>([<span class="string">"黑龙江"</span>,<span class="string">"#F09ABD"</span>],[<span class="string">"吉林省"</span>,<span class="string">"#01933F"</span>],[<span class="string">"辽宁"</span>,<span class="string">"#FAC300"</span>],[<span class="string">"内蒙古"</span>,<span class="string">"#FCF502"</span>],[<span class="string">"河北"</span>,<span class="string">"#F09ABD"</span>],[<span class="string">"北京"</span>,<span class="string">"#FCF502"</span>],[<span class="string">"天津"</span>,<span class="string">"#01933F"</span>],[<span class="string">"山东省"</span>,<span class="string">"#FCF502"</span>],[<span class="string">"江苏"</span>,<span class="string">"#D8EDDA"</span>],[<span class="string">"上海"</span>,<span class="string">"#B9B4C8"</span>],[<span class="string">"浙江"</span>,<span class="string">"#FCF502"</span>],[<span class="string">"福建"</span>,<span class="string">"#FAC300"</span>],[<span class="string">"台湾"</span>,<span class="string">"#F09ABD"</span>],[<span class="string">"广东"</span>,<span class="string">"#FCF502"</span>],[<span class="string">"香港"</span>,<span class="string">"#F09ABD"</span>],[<span class="string">"澳门"</span>,<span class="string">"#F09ABD"</span>],[<span class="string">"海南"</span>,<span class="string">"#F09ABD"</span>],[<span class="string">"广西"</span>,<span class="string">"#FAC300"</span>],[<span class="string">"云南"</span>,<span class="string">"#FCF502"</span>],[<span class="string">"西藏"</span>,<span class="string">"#B9B4C8"</span>],[<span class="string">"新疆"</span>,<span class="string">"#FAC300"</span>],[<span class="string">"甘肃"</span>,<span class="string">"#01933F"</span>],[<span class="string">"青海"</span>,<span class="string">"#F09ABD"</span>],[<span class="string">"四川"</span>,<span class="string">"#FAC300"</span>],[<span class="string">"贵州"</span>,<span class="string">"#01933F"</span>],[<span class="string">"重庆"</span>,<span class="string">"#B9B4C8"</span>],[<span class="string">"湖南"</span>,<span class="string">"#F09ABD"</span>],[<span class="string">"江西"</span>,<span class="string">"#01933F"</span>],[<span class="string">"湖北"</span>,<span class="string">"#FCF502"</span>],[<span class="string">"安徽"</span>,<span class="string">"#FAC300"</span>],[<span class="string">"河南"</span>,<span class="string">"#B9B4C8"</span>],[<span class="string">"陕西"</span>,<span class="string">"#F09ABD"</span>],[<span class="string">"山西"</span>,<span class="string">"#01933F"</span>],[<span class="string">"宁夏"</span>,<span class="string">"#FAC300"</span>]); //通过取色器获取各省颜色</span><br><span class="line"></span><br><span class="line">map.centerAndZoom(<span class="string">"兰州"</span>, <span class="number">5</span>); //取兰州作为中心点</span><br><span class="line"></span><br><span class="line">map.addControl(new <span class="symbol">BMap</span>.<span class="symbol">NavigationControl</span>()); // 缩放控件</span><br><span class="line">map.addControl(new <span class="symbol">BMap</span>.<span class="symbol">ScaleControl</span>()); // 比例尺</span><br><span class="line">map.enableScrollWheelZoom();</span><br><span class="line">function getBoundary(provItem)&#123;    </span><br><span class="line">  // console.log(provItem);   </span><br><span class="line">  var bdary = new <span class="symbol">BMap</span>.<span class="symbol">Boundary</span>();</span><br><span class="line">  bdary.get(provItem[<span class="number">0</span>], function(rs)&#123;       //获取行政区域</span><br><span class="line">    var count = rs.boundaries.length; //行政区域的点有多少个</span><br><span class="line">    if (count === <span class="number">0</span>) &#123;</span><br><span class="line">        alert(<span class="string">'未能获取当前输入行政区域'</span>);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    var pointArray = [];</span><br><span class="line">    for (var i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        let ply = new <span class="symbol">BMap</span>.<span class="symbol">Polygon</span>(rs.boundaries[i], &#123;strokeWeight: <span class="number">1</span>, strokeColor: <span class="string">"#aaaaaa"</span>, fillColor: provItem[<span class="number">1</span>]&#125;); //建立多边形覆盖物</span><br><span class="line">        map.addOverlay(ply);  //添加覆盖物</span><br><span class="line">        pointArray = pointArray.concat(ply.getPath());      </span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;);   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">  provList.forEach(function(item)&#123;</span><br><span class="line">    getBoundary(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://segmentfault.com/img/bV9UWN?w=1310&amp;h=551" alt="局部图"></p><p><img src="https://segmentfault.com/img/bV9UWQ?w=460&amp;h=443" alt="整体图"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.cnblogs.com/i-gps/archive/2012/07/17/2595733.html" target="_blank" rel="noopener">在百度地图或谷歌地图给中国各省着色并高亮显示</a></li><li><a href="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/crop%3D0%2C19%2C1024%2C676%3Bc0%3Dbaike116%2C5%2C5%2C116%2C38/sign=9918cb82b1a1cd1111f928608422e4cd/b8389b504fc2d562e4f1ff5fec1190ef77c66c82.jpg" target="_blank" rel="noopener">百度百科-中国地图</a></li><li><a href="http://fatedgar.iteye.com/blog/2025972" target="_blank" rel="noopener">百度地图画多边形区域</a></li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>svn学习手册-eclipse插件</title>
      <link href="/2018/04/27/svn%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C-eclipse%E6%8F%92%E4%BB%B6/"/>
      <url>/2018/04/27/svn%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C-eclipse%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>在eclipse上安装svn插件，便于代码编辑后可以直接提交。目前主机上已安装TortoiseSVN。<br><a id="more"></a></p><h2 id="安装subclipse"><a href="#安装subclipse" class="headerlink" title="安装subclipse"></a>安装subclipse</h2><h3 id="分析对应版本"><a href="#分析对应版本" class="headerlink" title="分析对应版本"></a>分析对应版本</h3><p>首先查看本机TortoiseSVN的版本：本地TortoiseSVN的版本可以通过：右键-&gt;TortoiseSVN-&gt;about 查看</p><blockquote><p>TortoiseSVN 1.9.1, Build 26747 - 64 Bit</p></blockquote><p>如下是subclipse与tortoise两者之间的版本对应关系（不是subclipse与svn的对应关系）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Subclipse</span> 1<span class="selector-class">.10</span><span class="selector-class">.x</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">TortoiseSVN</span> 1<span class="selector-class">.8</span><span class="selector-class">.x</span></span><br><span class="line"><span class="selector-tag">Subclipse</span> 1<span class="selector-class">.8</span><span class="selector-class">.x</span>  <span class="selector-tag">--</span>&gt; <span class="selector-tag">TortoiseSVN</span> 1<span class="selector-class">.7</span><span class="selector-class">.x</span></span><br><span class="line"><span class="selector-tag">Subclipse</span> 1<span class="selector-class">.6</span><span class="selector-class">.x</span>  <span class="selector-tag">--</span>&gt; <span class="selector-tag">TortoiseSVN</span> 1<span class="selector-class">.6</span><span class="selector-class">.x</span></span><br><span class="line"><span class="selector-tag">Subclipse</span> 1<span class="selector-class">.4</span><span class="selector-class">.x</span>  <span class="selector-tag">--</span>&gt; <span class="selector-tag">TortoiseSVN</span> 1<span class="selector-class">.5</span><span class="selector-class">.x</span></span><br></pre></td></tr></table></figure></p><p>注意：subclipse官网已不再维护，转到了github上：   <code>https://github.com/subclipse/subclipse/wiki</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Subclipse</span> 4<span class="selector-class">.2</span><span class="selector-class">.X</span> 可以用于 <span class="selector-tag">TortoiseSVN</span> 1<span class="selector-class">.9</span><span class="selector-class">.X</span>版本</span><br></pre></td></tr></table></figure></p><h3 id="subclipse插件安装流程"><a href="#subclipse插件安装流程" class="headerlink" title="subclipse插件安装流程"></a>subclipse插件安装流程</h3><p>本次使用eclipse<strong>在线安装</strong>，在eclipse中执行通过：</p><ol><li>eclipse工具栏选择：help-&gt;Install New Software，点击右侧<code>Add</code>按钮；</li><li>在<code>Location</code>输入框中输入<code>https://dl.bintray.com/subclipse/releases/subclipse/4.2.x/</code>，不需要填Name，点击<code>ok</code>；</li><li>等待<code>Pending</code>页面显示<code>Core SVNkit Library</code>、<code>Subclipse</code>等选项时，点击<code>Select All</code>，点击取消最下面的<code>Contact all update sites during install……</code>选项，点击<code>Finish</code>；</li><li>若有弹窗，一直点击<code>next</code>直到完成</li><li>确认eclipse立即重启</li></ol><p>eclipse重启后，查看工具栏：Window-&gt;Preferences-&gt;Team-&gt;SVN 查看<code>svn接口</code>，使用SVNKIT能够正常使用svn，使用javaHL有异常……</p><h2 id="连接到svn版本库"><a href="#连接到svn版本库" class="headerlink" title="连接到svn版本库"></a>连接到svn版本库</h2><ol><li>右键点击工程：dailyMonitor-&gt;Team-&gt;Share project 选择<code>svn</code> 点击<code>next</code> 准备进行与svn库连接；</li><li>选择<code>创建新的资源库位置</code>，点击<code>next</code>；</li><li>url配置为：<code>svn://132.XX.XX.XX:6666/dailyMonitor</code>，点击<code>next</code>；</li><li>选择<code>使用项目名称作为文件夹名</code>，点击<code>finish</code>；</li><li>输入用户名、密码：用户名为xukf1 密码为fS123，点击<code>ok</code>；</li><li>若弹窗提示<code>已存在于资源库中……</code>，选择<code>yes</code>；</li><li>对于<code>Confirm Open Perspective</code>弹窗，选择<code>yes</code></li></ol><p>配置完成后，可以查看相关svn操作</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://blog.csdn.net/yilylong/article/details/45970587" target="_blank" rel="noopener">TortoiseSVN 与SubEclipse 相互兼容版本对应</a></li><li><a href="https://www.cnblogs.com/reese-blogs/p/5557879.html" target="_blank" rel="noopener">Mac eclipse安装SVN +javaHL 安装使用详情</a></li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> FreshMan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>svn学习手册-服务器端离线安装</title>
      <link href="/2018/04/26/svn%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C-%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/"/>
      <url>/2018/04/26/svn%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C-%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>1.6版本的svn服务器端（Linux RedHat）离线安装流程，目前主机已经有：GCC、G++、openssl<br><a id="more"></a></p><h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><p>对于1.6.X来说，离线安装包分为两个：svn与它的<code>deps</code>依赖包。依赖包里包括：<code>apr</code>、<code>apr-util</code>、<code>zlib</code>等。如果是没有提供deps依赖包的其他版本svn，可能需要自行下载对应<code>apr</code>、<code>apr-util</code>等。  </p><p>查找Apache Subversion官网，选择<code>Source Download</code>-&gt;<code>archive download site</code> 查找历史档案，找到自己待下载的安装包：<a href="https://archive.apache.org/dist/subversion/" target="_blank" rel="noopener">官网下载</a></p><ol><li>subversion-1.6.16.tar.bz2</li><li>subversion-deps-1.6.16.tar.bz2</li></ol><h2 id="解压、安装"><a href="#解压、安装" class="headerlink" title="解压、安装"></a>解压、安装</h2><ol><li>将两个安装包上传到服务器端<code>/xukf/svn</code>目录下</li><li><p>安装包解压，两个安装包会解压到一个文件内：<code>subversion-1.6.16</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-jxvf</span> <span class="selector-tag">subversion-1</span><span class="selector-class">.6</span><span class="selector-class">.16</span><span class="selector-class">.tar</span><span class="selector-class">.bz2</span></span><br><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-jxvf</span> <span class="selector-tag">subversion-deps-1</span><span class="selector-class">.6</span><span class="selector-class">.16</span><span class="selector-class">.tar</span><span class="selector-class">.bz2</span></span><br></pre></td></tr></table></figure></li><li><p>指定路径安装  </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> subversion-1.6.16 <span class="comment"># 进入安装目录  </span></span><br><span class="line"><span class="string">./configure</span> <span class="params">--prefix=/xukf/svn</span> <span class="params">--without-berkeley-db</span> <span class="comment"># 安装到/xukf/svn目录下，不使用bdb数据库存储数据</span></span><br><span class="line">make  </span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p> 安装时报bdb错误，可以忽略：</p><blockquote><p>configure: WARNING: we have configured without BDB filesystem support  </p></blockquote><p> 如果<code>configure</code>报未找到<code>apr</code>与<code>apr-util</code>，可以尝试使用<code>./configure --prefix=/settle/svn --with-apr=/settle/svn/subversion-1.6.16/apr/ --with-apr-util=/settle/svn/subversion-1.6.16/apr-util/</code></p></li><li>验证<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/xukf/svn/bin</span> <span class="comment"># 进入svn目录</span></span><br><span class="line"><span class="string">./svn</span> <span class="params">--version</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>svn，版本 1.6.16 (r1073529)<br>  编译于 Apr 26 2018，15:09:55<br>版权所有 (C) 2000-2009 CollabNet。  </p></blockquote><p>正确输出<code>svn</code>版本，表示svn安装成功。</p><h2 id="服务启停"><a href="#服务启停" class="headerlink" title="服务启停"></a>服务启停</h2><h3 id="版本库配置"><a href="#版本库配置" class="headerlink" title="版本库配置"></a>版本库配置</h3><ol><li><p>建立版本库目录：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /xukf/svn  </span><br><span class="line"><span class="built_in">mkdir</span> -p svndata/dailyMonitor</span><br></pre></td></tr></table></figure></li><li><p>创建版本库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/xukf/</span>svn<span class="regexp">/bin/</span>svnadmin create <span class="regexp">/xukf/</span>svn<span class="regexp">/svndata/</span>dailyMonitor</span><br></pre></td></tr></table></figure></li><li><p>修改参数文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">cd /xukf/svn/svndata/dailyMonitor  </span><br><span class="line">cd conf  </span><br><span class="line">vim svnserve.conf  </span><br><span class="line">[general]  </span><br><span class="line">anon-access = none <span class="comment"># 非鉴权用户访问版本库的权限。取值范围为write、read和none，默认值为read  </span></span><br><span class="line">auth-access = write <span class="comment"># 鉴权用户访问版本库的权限。默认值为write  </span></span><br><span class="line">password-db = passwd <span class="comment"># 指定用户名口令文件名。除非指定绝对路径，否则文件位置为相对conf。默认值为passwd  </span></span><br><span class="line">authz-db = authz <span class="comment"># 指定权限配置文件名，通过该文件可以实现以路径为基础的访问控制  </span></span><br><span class="line">realm = jzjsMonitor <span class="comment"># 指定版本库的认证域，即在登录时提示的认证域名称  </span></span><br><span class="line">保存退出  </span><br><span class="line">vim passwd</span><br><span class="line">[users]</span><br><span class="line">xukf1 = fS123 <span class="comment"># 新增用户，注意左边不能有空格  </span></span><br><span class="line">xukf2 = Fs123  </span><br><span class="line">xukf3 = Fs123  </span><br><span class="line">保存退出  </span><br><span class="line">vim authz</span><br><span class="line">[groups]</span><br><span class="line">admin = xukf3 <span class="comment"># 分组管理权限</span></span><br><span class="line">weihu = xukf1,xukf2</span><br><span class="line"><span class="section">[dailyMonitor:/]</span></span><br><span class="line">@admin = rw <span class="comment"># 权限有""、"r"、"w"</span></span><br><span class="line">@weihu = rw  </span><br><span class="line">* = r  </span><br><span class="line">保存退出</span><br></pre></td></tr></table></figure></li></ol><h3 id="启停操作"><a href="#启停操作" class="headerlink" title="启停操作"></a>启停操作</h3><ol><li><p>启动svn服务</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/xukf/</span>svn<span class="meta-keyword">/bin/</span>svnserve -d -r <span class="meta-keyword">/xukf/</span>svn/svndata --listen-port <span class="number">6666</span>   </span><br><span class="line"><span class="meta"># -d：启动时运行在后台</span></span><br><span class="line"><span class="meta"># -r：将/xukf/svn/svndata作为根目录</span></span><br><span class="line"><span class="meta"># --listen-port：修改启动端口，默认为3690</span></span><br></pre></td></tr></table></figure><ul><li>访问路径为：<code>svn://132.XX.XX.XX:6666/dailyMonitor</code>  </li><li>注意启动路径，<code>/xukf/svn/svndata</code>时，url上需要带有<code>dailyMonitor</code>，如果直接用<code>/xukf/svn/svndata/dailyMonitor</code>，<code>/xukf/svn/svndata/dailyMonitor</code>为根目录，url上没有<code>dailyMonitor</code></li></ul></li><li><p>关闭svn服务<br>查找svn进程，直接杀死进程……</p></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://blog.csdn.net/design321/article/details/9346513" target="_blank" rel="noopener">linux svn下载,安装和使用</a></li><li><a href="https://blog.csdn.net/thinkerabc/article/details/1831025" target="_blank" rel="noopener">svnserve配置文件详析</a></li><li><a href="http://www.51testing.com/html/71/410671-836310.html" target="_blank" rel="noopener">linux下subversion的安装</a></li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> FreshMan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>监控平台-概述</title>
      <link href="/2018/04/22/%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0-%E6%A6%82%E8%BF%B0/"/>
      <url>/2018/04/22/%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0-%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>监控平台工程的概述，主要是对工程各层框架的描述；平台现已实现功能；并以一个功能为例讲述实现方式；钉钉微应用的相关知识；各层框架主要使用到的技术等。<br><a id="more"></a></p><h2 id="各层主要功能"><a href="#各层主要功能" class="headerlink" title="各层主要功能"></a>各层主要功能</h2><p>现在工程主要分为：前台、服务器端、数据整理脚本。</p><h3 id="1-前台"><a href="#1-前台" class="headerlink" title="1. 前台"></a>1. 前台</h3><p>用来进行用户交互与数据展示，前台包括PC端浏览器前台与钉钉微应用前台。  </p><ol><li>PC端前台</li></ol><p>包括1.0的界面与2.0界面。<br>1.0界面主要使用了<code>jQuery</code>库完成的前台渲染以及前后台交互。<br>2.0界面主要使用<code>React</code>对1.0界面进行了优化与新增功能开发。  </p><ol><li>钉钉微应用前台</li></ol><p>钉钉微应用前台还处于摸索开发阶段。<br>现阶段主要使用了React进行界面开发，部分功能涉及到调用钉钉API  </p><h3 id="2-服务器端"><a href="#2-服务器端" class="headerlink" title="2. 服务器端"></a>2. 服务器端</h3><p>服务器端主要完成了：对前台请求进行响应；调用短信网关发送告警短信；对文件读取方法进行封装；以及部分钉钉微应用服务器端调用方法的封装。</p><h3 id="3-数据整理脚本"><a href="#3-数据整理脚本" class="headerlink" title="3. 数据整理脚本"></a>3. 数据整理脚本</h3><p>数据整理脚本主要包括定时执行的监控脚本与相关信息的整理脚本。  </p><h2 id="已实现功能"><a href="#已实现功能" class="headerlink" title="已实现功能"></a>已实现功能</h2><ul><li>主机24小时CPU、内存、存储的使用情况监控</li><li>省间话单文件处理状态监控</li><li>2I2C、冰激凌等接口文件监控</li><li>省间文件级统计情况监控</li><li>短信告警</li><li>钉钉群自定义机器人发送消息</li><li>钉钉微应用试验性功能等</li></ul><h2 id="功能设计思路与实现流程"><a href="#功能设计思路与实现流程" class="headerlink" title="功能设计思路与实现流程"></a>功能设计思路与实现流程</h2><p>以国内漫游数据业务文件级统计结果检查功能为例：</p><p>设想一下，怎么做一个日统计结果查询到PC端浏览器前台展示的功能。</p><h3 id="一、分析手工进行的日统计结果正确性稽核方法"><a href="#一、分析手工进行的日统计结果正确性稽核方法" class="headerlink" title="一、分析手工进行的日统计结果正确性稽核方法"></a>一、分析手工进行的日统计结果正确性稽核方法</h3><p>通过比较统计中间表、统计日志表、file_info这三个表的各省话单量是否一致来判断。  </p><h3 id="二、对文件级统计监控功能点的总体流程梳理"><a href="#二、对文件级统计监控功能点的总体流程梳理" class="headerlink" title="二、对文件级统计监控功能点的总体流程梳理"></a>二、对文件级统计监控功能点的总体流程梳理</h3><ol><li>需要一个能够与用户交互的前台界面，用来给用户选择相应业务与待稽核时间，查看日文件级统计结果。</li><li>前台界面展示时，需要获取指定条件下的数据，这部分需要请求服务器端来进行数据查询并返回结果。</li><li>一般开发在前后端完成交互后基本功能就算完成了，考虑在实现日文件级统计监控时，如果多次查看该前台界面，会重复性的查询数据库这三个表，为了避免重复查询增加数据库负担，考虑编写脚本，每日只查询一次日统计结果，并将结果生成为落地日志文件，服务器端查询时，直接查询该日志文件。</li></ol><h3 id="三、相关流程详细设计"><a href="#三、相关流程详细设计" class="headerlink" title="三、相关流程详细设计"></a>三、相关流程详细设计</h3><ol><li>前台界面设计：<br>现在界面实现有两种方式：1.0采用<code>jQuery</code>，具体实现方案可查<code>js</code>目录下的<code>fskb.js</code>中<code>fileStat</code>相关函数；2.0采用<code>React</code>，具体实现方案可查<code>js/template</code>目录下的<code>HostFileStat.jsx</code>文件。总体设计思路如下：  <ol><li>进行页面布局设计，包括与用户交互设计、样例数据展示等；<br>1.0界面入口为<code>index.html</code>，新增监控功能导航需要修改该文件，并在<code>fskb.js</code>中完成相关函数编写；<br>2.0界面入口为<code>reactIndex.jsx</code>，新增监控功能导航需要修改该文件，并创建对应的<code>HostFileStat.jsx</code>文件，在<code>.jsx</code>文件中编写相关函数；</li><li>向服务器端发起请求与结果获取；使用Ajax向<code>FileStat_queryFileStat.action</code>发送<code>post</code>请求；</li><li>实际数据展示；通过Ajax获取到数据后，根据<code>jQuery</code>或者<code>React</code>框架来完成数据的展示。</li></ol></li><li>服务器端响应请求设计：<ol><li>对前台发起的请求进行响应；这部分通过<code>struts</code>框架来实现，创建<code>FileStatAction.java</code>文件，编写<code>queryFileStat</code>方法来响应前台<code>Ajax</code>发起的请求；</li><li>进行数据查询；根据面向接口编程，先创建java接口文件<code>FileStatDao.java</code>定义查询方法，再创建实现类<code>FileStatDaoImpl.java</code>,实现具体查询方法；</li><li>将查询结果返回至客户端前台；这部分依旧由<code>struts</code>来完成，在<code>FileStatAction.java</code>中将结果封装成json类型数据返回至前台。</li></ol></li><li>后台数据查询、整理脚本设计：<br>脚本连接49.151库查询国内漫游数据业务的统计中间表、统计日志表、file_info日话单量，并将查询结果形成落地日志文件。<ol><li>创建<code>statStatusCheck.py</code>脚本，定义获取各表数据的方法，例如<code>getStatLogInfo()</code>等；</li><li>创建<code>*.sql</code>文件，编写数据库查询语句，例如查询统计中间表的<code>gprsr_stat_final.sql</code>文件（所有的sql文件都在<code>sqlList</code>目录下）；</li><li>使用<code>sqlplus</code>连接数据库执行sql文件进行查询；</li><li>将查询结果写入到日志文件<code>gprsr_fileStat_YYYYMMDD.log</code>（存放在<code>fileStatInfo</code>目录下）；</li><li>将该脚本使用<code>crontab</code>定时，在每日定时执行一次，完成昨日文件级统计结果的查询。</li></ol></li></ol><h2 id="钉钉"><a href="#钉钉" class="headerlink" title="钉钉"></a>钉钉</h2><p>钉钉开发包括钉钉群机器人与钉钉微应用</p><h3 id="钉钉群自定义机器人"><a href="#钉钉群自定义机器人" class="headerlink" title="钉钉群自定义机器人"></a>钉钉群自定义机器人</h3><p>自定义机器人主要是通过调用钉钉API完成待发送信息发送至指定钉钉群。以出账进度钉钉群通知为例，进行流程分析：</p><ol><li>编写出账进度统计脚本<code>billMonitor.py</code>，主要实现对各业务的出账进度统计；</li><li>编写发送内容到钉钉群的脚本<code>billMonitorClient.py</code>，主要实现了将信息格式化成json串并通过钉钉API调用自定义机器人发送至钉钉群</li><li>由于没有外网主机，49.206不能直接与钉钉通信，所以编写了用于主机通信的服务器端<code>transitServer.py</code>与客户端<code>socketClient.py</code></li></ol><p>另外，通过分析钉钉自定义机器人API，形成了钉钉群自定义机器人工具类方法封装<code>dingTalkRobot.py</code></p><h3 id="钉钉微应用"><a href="#钉钉微应用" class="headerlink" title="钉钉微应用"></a>钉钉微应用</h3><p>在复用监控平台后台代码与数据的基础上，进行的移动端开发。主要使用antd-mobile UI库来进行移动端布局。</p><h2 id="短信服务"><a href="#短信服务" class="headerlink" title="短信服务"></a>短信服务</h2><p>通过调用短信网关发送自定义短信。<br>告警发送短信流程可以参考：<a href="http://localhost:8080" target="_blank" rel="noopener">国内漫游业务Redis短信告警监控实现</a></p><h2 id="工程各文件-目录含义"><a href="#工程各文件-目录含义" class="headerlink" title="工程各文件/目录含义"></a>工程各文件/目录含义</h2><h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><ul><li><code>js</code>目录：包含全局<code>*js</code>文件、<code>webpack</code>参数、以及编译入口的<code>*jsx</code>文件等</li><li><code>js/template</code>目录：包含各功能的<code>.jsx</code>文件</li><li><code>js/node_modules</code>目录：包含<code>webpack</code>相关库、挂载组件库等。该目录不需要特别关心</li><li><code>util</code>目录：工具类，包含日期选择插件、等待进度条等</li><li><code>hostShell</code>目录：客户端/服务器端脚本，例如：出账进度统计、socket通信等脚本</li><li><code>css</code>、<code>html</code>、<code>fonts</code>、<code>img</code>目录：前台相关样式、图片等</li><li><code>webcontent</code>目录下<code>*.py</code>文件、<code>*Info</code>目录、<code>*_info</code>文件、<code>*.txt</code>文件、<code>*Date</code>文件、<code>*Doc</code>等与49.206主机<code>/settle/settle/bin/xukf/autoMonitor/hostMonitor</code>目录下文件一一对应，具体含义在主机详述。在进行监控点调试时，从49.206主机上对应目录下获取日志文件。</li><li>其他目录使用频率极低</li></ul><h3 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h3><ul><li><code>*Info</code>目录：各监控点的监控结果日志文件</li><li><code>*_info</code>文件：各监控点的参数文件，类似于数据库的参数表</li><li><code>*.txt</code>文件：主机监控、进程监控的标识位文件，基本不用关注</li><li><code>*Date</code>目录：主机监控结果汇总日志文件</li><li><code>*Doc</code>目录：主机监控结果单独日志文件</li><li><code>*.py</code>、<code>*.sh</code>文件：监控脚本</li><li><code>log_*</code>文件：定时执行脚本时生成的日志文件</li></ul><h2 id="各架构具体技术"><a href="#各架构具体技术" class="headerlink" title="各架构具体技术"></a>各架构具体技术</h2><h3 id="前台-1"><a href="#前台-1" class="headerlink" title="前台"></a>前台</h3><ul><li>使用<code>bootstrap</code>、<code>antd</code>等UI框架，配合自定义的<code>HTML</code>、<code>CSS</code>进行界面展示</li><li>使用<code>Ajax</code>进行前后台数据交互（同步/异步）</li><li>使用<code>jQuery</code>或者<code>React</code>框架进行整合完成与用户的交互</li><li>使用<code>React</code>时，使用部分ES6语法，通过<code>webpack</code>后台打包方式完成JSX ES6语法转化</li><li>对于钉钉微应用，通过js调用钉钉API进行微应用鉴权、获取用户信息等。</li></ul><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><ul><li>主要分为Action层，dao层、dao实现层、pojo以及util工具类</li><li>使用JavaEE的<code>struts</code>框架作为控制器完成对前后台数据的交互。</li><li>使用<code>ojdbc</code>连接Oracle库进行增删改查。</li><li>使用<code>Tomcat</code>作为服务器容器。</li></ul><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><ul><li>python、bash shell选择使用，建议使用python</li><li>python使用sqlplus或者cx_oracle连接数据库，建议使用cx_oracle</li><li>使用crontab进行监控脚本定时</li></ul><h3 id="钉钉-1"><a href="#钉钉-1" class="headerlink" title="钉钉"></a>钉钉</h3><ul><li>使用python的socket暴露主机端口进行客户端与服务器端通信</li><li>使用钉钉自定义机器人自动发送钉钉群信息，具体方法有封装好的函数</li><li>使用钉钉API相关接口（包括jsapi与服务器端api）进行钉钉微应用的开发。</li></ul><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Echarts-tooltip</title>
      <link href="/2018/04/08/Echarts-tooltip/"/>
      <url>/2018/04/08/Echarts-tooltip/</url>
      <content type="html"><![CDATA[<p>用Echarts绘制的折线图中，鼠标悬浮到图上时给出的提示信息（由tooltip提示框组件提供）不满足要求，需要进行自定义化。<br><a id="more"></a></p><h2 id="tooltip-API"><a href="#tooltip-API" class="headerlink" title="tooltip API"></a>tooltip API</h2><p>可参考官方文档<a href="http://echarts.baidu.com/option3.html#tooltip" target="_blank" rel="noopener">tooltip</a>，本次是在<code>version: &#39;3.6.2&#39;</code>版本下进行的自定义内容设置。</p><h2 id="可自定义位置"><a href="#可自定义位置" class="headerlink" title="可自定义位置"></a>可自定义位置</h2><ul><li>全局，即在option中的<code>tooltip</code></li><li>坐标系中，即<code>grid.tooltip</code>、<code>polar.tooltip</code>、<code>single.tooltip</code></li><li>系列中，即<code>series.tooltip</code></li><li>系列里的每个数据项中，即<code>series.data.tooltip</code></li></ul><p>为满足<strong>坐标轴触发</strong>展示自定义内容的需求，本文暂时讨论全局<code>tooltip</code>与系列中<code>tooltip</code>，以及自定义<code>formatter</code>。</p><h2 id="默认tooltip"><a href="#默认tooltip" class="headerlink" title="默认tooltip"></a>默认tooltip</h2><p>最基本的配置为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tooltip</span> : &#123;</span><br><span class="line">    <span class="attribute">trigger</span>: <span class="string">'axis'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>鼠标悬浮到图上时，展示内容为：横坐标（name）、当前位置data值（value）、当前系列名称（seriesName）</p><h2 id="全局tooltip"><a href="#全局tooltip" class="headerlink" title="全局tooltip"></a>全局tooltip</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    tooltip : &#123;</span><br><span class="line">        trigger: <span class="string">'axis'</span>,</span><br><span class="line">        formatter: function(<span class="keyword">params</span>, ticket, callback)&#123;</span><br><span class="line">          <span class="keyword">var</span> recordCntArr = seriesContentArr[<span class="keyword">params</span>[<span class="number">0</span>].seriesIndex];</span><br><span class="line">          <span class="keyword">var</span> formatTxt = <span class="keyword">params</span>[<span class="number">0</span>].name + <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">          formatTxt += <span class="string">'&lt;span style="display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background-color:'</span> + <span class="keyword">params</span>[<span class="number">0</span>].color + <span class="string">'"&gt;&lt;/span&gt;'</span>;</span><br><span class="line">          formatTxt += <span class="string">"记录数："</span>+(<span class="keyword">params</span>[<span class="number">0</span>].<span class="keyword">value</span>+<span class="string">""</span>).replace(<span class="keyword">new</span> RegExp(<span class="string">'(\\d)(?=(\\d&#123;3&#125;)+$)'</span>,<span class="string">'ig'</span>),<span class="string">"$1,"</span>) + <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">params</span>[<span class="number">0</span>].dataIndex == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> formatTxt;</span><br><span class="line">          &#125;</span><br><span class="line">          formatTxt += <span class="string">"增长量："</span>+(recordCntArr[<span class="number">2</span>][<span class="keyword">params</span>[<span class="number">0</span>].dataIndex]+<span class="string">""</span>).replace(<span class="keyword">new</span> RegExp(<span class="string">'(\\d)(?=(\\d&#123;3&#125;)+$)'</span>,<span class="string">'ig'</span>),<span class="string">"$1,"</span>)+<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">          formatTxt += <span class="string">"增长率："</span>+recordCntArr[<span class="number">3</span>][<span class="keyword">params</span>[<span class="number">0</span>].dataIndex]+<span class="string">"%&lt;br /&gt;"</span>;</span><br><span class="line">          <span class="keyword">return</span> formatTxt;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过重写回调函数<code>formatter</code>的返回值来自定义提示信息。<code>&lt;span&gt;...&lt;/span&gt;</code>内为提示的小圆点。  </p><p>其中触发器<code>trigger</code>触发类型有三种：</p><ol><li><code>item</code>：数据项触发，对于折线图，是折线上的数据点</li><li><code>axis</code>：坐标轴触发，在折线图上，鼠标移动到数据点所在的坐标轴上便能触发</li><li><code>none</code>：不触发</li></ol><p>当<code>trigger</code>为<code>axis</code>时，<code>fomatter</code>中<code>params</code>为数组，为<code>item</code>时，<code>params</code>为对象。  </p><h2 id="系列中tooltip"><a href="#系列中tooltip" class="headerlink" title="系列中tooltip"></a>系列中tooltip</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">series : [</span><br><span class="line">    &#123;</span><br><span class="line">        name:<span class="string">'注册用户数'</span>,</span><br><span class="line">        type:<span class="string">'line'</span>,</span><br><span class="line">        data:userArr,</span><br><span class="line">        tooltip : &#123;</span><br><span class="line">          trigger: <span class="string">'item'</span>,</span><br><span class="line">          formatter: function(<span class="keyword">params</span>, ticket, callback)&#123;</span><br><span class="line">            console.log(<span class="keyword">params</span>);</span><br><span class="line">            <span class="keyword">var</span> formatTxt = <span class="keyword">params</span>.name + <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">            formatTxt += <span class="string">'&lt;span style="display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background-color:'</span> + <span class="keyword">params</span>.color + <span class="string">'"&gt;&lt;/span&gt;'</span>;</span><br><span class="line">            formatTxt += <span class="string">"记录数："</span>+(<span class="keyword">params</span>.<span class="keyword">value</span>+<span class="string">""</span>).replace(<span class="keyword">new</span> RegExp(<span class="string">'(\\d)(?=(\\d&#123;3&#125;)+$)'</span>,<span class="string">'ig'</span>),<span class="string">"$1,"</span>) + <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">            formatTxt += <span class="string">"增长量："</span>+(userGrowthArr[<span class="keyword">params</span>.dataIndex]+<span class="string">""</span>).replace(<span class="keyword">new</span> RegExp(<span class="string">'(\\d)(?=(\\d&#123;3&#125;)+$)'</span>,<span class="string">'ig'</span>),<span class="string">"$1,"</span>)+<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">            formatTxt += <span class="string">"增长率："</span>+userRateArr[<span class="keyword">params</span>.dataIndex]+<span class="string">"%&lt;br /&gt;"</span>;</span><br><span class="line">            <span class="keyword">return</span> formatTxt;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>系列中tooltip可分别定义各系列特定的样式，在回调函数<code>fomatter</code>中自定义样式并返回。系列中<code>tooltip</code>优先级要高于全局<code>tooltip</code>  </p><p>需要注意的是：<strong>series.tooltip仅在<code>trigger</code>为<code>item</code>时有效</strong></p><blockquote><p>注意：series.tooltip 仅在 tooltip.trigger 为 ‘item’ 时有效</p></blockquote><p>所以使用系列中<code>tooltip</code>时，只能当鼠标悬浮到数据点上时才有提示。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://echarts.baidu.com/option3.html#tooltip" target="_blank" rel="noopener">tooltip</a></li><li><a href="https://www.jianshu.com/p/aa585c304660" target="_blank" rel="noopener">在echarts中自定义提示框内容</a></li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React学习笔记-生命周期</title>
      <link href="/2018/04/07/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2018/04/07/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p>我要在何时给界面一个初始值；当内容变化时，我该在哪里控制界面重新渲染；为啥我的界面陷入了死循环……<br><a id="more"></a></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="https://segmentfault.com/img/remote/1460000011694930?w=761&amp;h=690" alt="React流程状态图"></p><p>这个流程图主要说明了按<code>createClass</code>的方式创建的React组件的生命周期，现在React推荐使用<code>Component</code>的方式创建组件，<code>createClass</code>与<code>Component</code>方式的不同主要为：</p><ol><li><code>createClass</code>为ES5的写法，<code>Component</code>为使用ES6语法</li><li><code>createClass</code>构造的组件中，各方法会自动绑定<code>this</code>。使用<code>Component</code>需要手动绑定<code>this</code>，例如在<code>constructor</code>构造器中绑定<code>this.getBaseInfo = this.getBaseInfo.bind(this);</code>或者在使用时绑定<code>onChange={this.categoryListChange.bind(this, &quot;CPU&quot;)}</code>，也可以使用箭头函数（arrow function）（匿名函数）<code>onChange={(&#39;CPU&#39;)=&gt;this.categoryListChange()</code>，使用箭头函数的方法不太提倡。</li><li>构造方法不同</li><li>对传入的<code>props</code>的默认值与配置不同<br>深入了解可见参考文章1</li></ol><h3 id="装载过程"><a href="#装载过程" class="headerlink" title="装载过程"></a>装载过程</h3><ul><li>constructor</li><li>componentWillMount</li><li>render</li><li>componentDidMount</li></ul><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p>并不是每个React组件都需要构造方法<code>constructor</code>，一般在有<code>state</code>与绑定<code>this</code>的需求的时候才使用<code>constructor</code>。<br>在该阶段主要完成的是：</p><ol><li>初始化<code>state</code>值</li><li>完成函数的<code>this</code>绑定</li></ol><h4 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h4><p>组件在加载之前调用的方法，一般此方法的功能都可以在<code>constructor</code>中完成，为了<code>constructor</code>的简洁，比较常用此方法与<code>constructor</code>配合使用。<code>componentWillMount</code>执行完之后会立即执行<code>render</code>方法。<br>在该阶段主要能够进行：</p><ol><li>调用只与后台请求一次的方法，进行<code>state</code>初始化。若使用非异步方法获取数据，会等到此阶段执行完成才调用<code>render</code>方法；</li></ol><h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><p>必需函数，完成<code>state</code>的更新与<code>DOM</code>渲染、更新。</p><h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h4><p>在组件装载完成后调用。需要注意的是，若有父子组件调用的情况，只有当所有子组件都完成<code>render</code>后，才依次调用各子组件与父组件的<code>componentDidMount</code>方法。<br>该阶段主要能够进行：</p><ol><li>与后台交互获取数据，可以避免界面渲染的等待时间；</li></ol><h3 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h3><ul><li>componentWillReceiveProps</li><li>shouldComponentUpdate</li><li>componentWillUpdate</li><li>render</li><li>componentDidUpdate</li></ul><h4 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps"></a>componentWillReceiveProps</h4><p>在父子组件的情况下，当父组件进行<code>render</code>时，子组件的该方法就会执行。在该方法中，可以根据原<code>props</code>的值与<code>nextProps</code>的值来决定是否进行组件的<code>state</code>更新。<br>该阶段主要能够进行：</p><ol><li>根据<code>nextProps</code>更新组件的<code>state</code>；</li></ol><h4 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h4><p>判断本组件本次是否需要渲染。默认返回值为<code>true</code>。可以通过<code>nextProps</code>、<code>nextState</code>与<code>props</code>、<code>state</code>来决定本次是否需要渲染DOM对象。在渲染DOM比较耗时或者是更新陷入死循环的情况下，可考虑通过此方法避免无意义渲染，进行性能调优。</p><h4 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate"></a>componentWillUpdate</h4><p>当<code>shouldComponentUpdate</code>返回结果为<code>true</code>时会执行此方法，需要注意的是，要避免在此方法内调用<code>setState</code>方法，否则会陷入<code>state</code>修改-&gt;渲染-&gt;<code>state</code>修改-&gt;渲染这样的死循环中。</p><h4 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h4><p>当更新过程执行完<code>render</code>后被调用，在此周期中可以使用<code>setState</code>，但要注意使用时也会引起更新过程，所以需要在<code>setState</code>之前限制条件，或者在<code>shouldComponentUpdate</code>中进行条件限制已避免陷入死循环。</p><h3 id="卸载过程"><a href="#卸载过程" class="headerlink" title="卸载过程"></a>卸载过程</h3><ul><li>componentWillUnmount</li></ul><h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h4><p>在组件卸载时被调用，在此过程中可以清理掉由<code>componentDidMount</code>方法中通过非React方法创建的DOM元素，以避免内存泄露。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.cnblogs.com/wonyun/p/5930333.html" target="_blank" rel="noopener">React创建组件的三种方式及其区别</a></li><li><a href="https://segmentfault.com/a/1190000011694925" target="_blank" rel="noopener">了解React组件生命周期</a></li><li><a href="http://react-china.org/t/react/1740" target="_blank" rel="noopener">React组件生命周期过程说明</a></li><li><a href="https://segmentfault.com/a/1190000006792687" target="_blank" rel="noopener">React组件生命周期</a></li><li><a href="https://segmentfault.com/q/1010000008133309" target="_blank" rel="noopener">React数据获取为什么一定要在componentDidMount里面调用？</a></li><li>深入浅出React和Redux</li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> FreshMan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React学习笔记-React是什么</title>
      <link href="/2018/04/05/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-React%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2018/04/05/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-React%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<p>这一章主要思考了选择React进行项目现有功能重构的原因，<strong>自己</strong>jQuery项目中遇到的使自己感到处理很复杂的问题，如果用react会不会简单；jQuery与react的区别是什么？JSX？虚拟DOM？生命周期？ES6？<br><a id="more"></a></p><h2 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h2><p>React是使用JSX语法扩展方式，通过虚拟DOM（Virtual DOM）进行渲染的js库。其他具体说明可以看<a href="https://reactjs.org/blog/2013/06/05/why-react.html" target="_blank" rel="noopener">Why did we build React?</a></p><h2 id="Why-not-jQuery"><a href="#Why-not-jQuery" class="headerlink" title="Why not jQuery"></a>Why not jQuery</h2><p>这是在思考是否选择其他框架时一直在想的问题，即使现在选择了React，也依然在反思这个问题。</p><h3 id="jQuery工作方式"><a href="#jQuery工作方式" class="headerlink" title="jQuery工作方式"></a>jQuery工作方式</h3><p>先从jQuery工作方式入手思考。常用的jQuery进行前台渲染的流程主要是：</p><ol><li><p>产生一个HTML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">'presentation'</span> <span class="attr">class</span>=<span class="string">'fs-article-bar active'</span> <span class="attr">id</span>=<span class="string">"hostLiOverview"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span> <span class="attr">id</span>=<span class="string">"hostOverview"</span> <span class="attr">role</span>=<span class="string">'button'</span>&gt;</span>概览<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>绑定事件处理函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hostOverviewShow</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">'#hostOverview'</span>).unbind(<span class="string">'click'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">'#hostLiOverview'</span>).hasClass(<span class="string">'disabled'</span>))&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">'li[id*="hostLi"]'</span>).removeClass(<span class="string">"disabled"</span>);</span><br><span class="line">    $(<span class="string">'li[id="hostLiOverview"]'</span>).addClass(<span class="string">"disabled"</span>);</span><br><span class="line">    $(<span class="string">'#hostInfoShow'</span>).empty();</span><br><span class="line">    queryHostInfo();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>可见jQuery的工作方式为：通过CSS规则找到对应id（或者class等）的DOM元素，将事件绑定到该元素上，读取元素内容或根据业务逻辑，对相应DOM元素进行修改。</p><h3 id="不足呢？"><a href="#不足呢？" class="headerlink" title="不足呢？"></a>不足呢？</h3><p>审视一下项目现有的jQuery代码，以上面代码为例，由于使用jQuery需要直接操作DOM元素，当<code>#hostOverview</code>元素点击时，需要对<code>li[id*=&quot;hostLi&quot;]</code>、<code>li[id=&quot;hostLiOverview&quot;]</code>、<code>#hostInfoShow</code>这三个DOM元素进行修改。如果关联的元素再增加，需要再修改<code>hostOverviewShow</code>方法。<br>通过这种事件处理与DOM修改的方式进行界面渲染，会导致程序结构变得复杂。也许可以通过重构来审视代码，进行结构调优，但对于尚未开发完的项目，必须想出良好的代码结构，在增加新功能的时候还需要特别注意是否影响代码的重构。保持良好的结构，很艰难……</p><h2 id="React程序流程"><a href="#React程序流程" class="headerlink" title="React程序流程"></a>React程序流程</h2><p>React对于事件处理到DOM修改的流程为：<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[事件<span class="number">1</span>,事件<span class="number">2</span>,...,事件<span class="function"><span class="title">n</span>] -&gt;</span> <span class="function"><span class="title">render</span> -&gt;</span> V<span class="function"><span class="title">irtual</span> DOM -&gt;</span> DOM</span><br></pre></td></tr></table></figure></p><p>不需要开发者关注某一事件触发后具体修改哪些DOM，修改会由React的<code>render</code>过程来分析比对虚拟DOM并修改真实DOM。</p><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>JSX是JavaScript的语法扩展。一个明显的特点是可以直接使用HTML的元素，当然，并不局限于HTML元素，也可以是任何一个React的组件。</p><h3 id="语法示例"><a href="#语法示例" class="headerlink" title="语法示例"></a>语法示例</h3><p>一个简单的JSX如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WelcomeHostMonitor</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;<span class="type">Hello</span> ~&lt;/h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="type">WelcomeHostMonitor</span></span><br></pre></td></tr></table></figure></p><p>在JSX中，可以直接使用<code>onClick</code>的方式给一个元素绑定事件处理函数，例如：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">topBarSelect(opType)&#123;</span><br><span class="line">  console.log(<span class="string">"Now opType is:"</span>+opType);</span><br><span class="line">&#125;</span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;<span class="keyword">div</span>&gt;</span><br><span class="line">      &lt;h1&gt;Hello ~&lt;/h1&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> onClick=&#123;<span class="keyword">this</span>.topBarSelect.bind(<span class="keyword">this</span>, <span class="string">"HostProvFile"</span>)&#125;&gt;文件监控&lt;/a&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="对元素增加onClick是否合理"><a href="#对元素增加onClick是否合理" class="headerlink" title="* 对元素增加onClick是否合理"></a>* 对元素增加onClick是否合理</h3><p>在学习jQuery的时候，一直避免在HTML元素上直接绑定<code>onclick</code>方法，HTML绑定<code>onclick</code>方法问题有很多，像：不方便管理、在删除DON的时候使用<code>removeEventListener</code>注销相关事件处理器等。但React的<code>onClick</code>不同于在HTML上的<code>onclick</code>，<del>因为它的C是大写的</del>，因为它只存在于组件的生命周期内，每个组件的<code>onClick</code>都会在组件卸载（unmount）时清除。</p><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><p>虚拟DOM（Virtual DOM）可以看做是对DOM的抽象，当React进行重复渲染来进行DON修改完成用户交互时，并不需要需改组件的全部DOM，它会比对本次的虚拟DOM与上次的虚拟DOM，找出真正需要修改的DOM点进行修改。这种渲染最少DOM方式的效率在当前项目中不需要担心。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>React中最需要学习的点，React在渲染的过程中，会按照流程调用各生命周期函数，所以一些逻辑处理可以在各生命周期函数中进行，生命周期的大体流程可见<a href="https://segmentfault.com/a/1190000011694925" target="_blank" rel="noopener">了解React组件生命周期</a></p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>使用ES6来写React能带来不少便捷，例如使用箭头函数会自动绑定this等（不知道该不该推荐这样使用），但当前部分浏览器并不支持ES6,所以需要转义成ES5，转义方式以后再分析，当然，ES6不是必需的，也可以直接使用ES5语言来编写，但强烈建议学习或者了解一下ES6。ES6语法的学习可以见参考文章的ECMAScript 6 入门。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.cnblogs.com/libin-1/p/6013490.html" target="_blank" rel="noopener">JavaScript常见的内存泄漏原因</a></li><li><a href="https://www.cnblogs.com/polk6/p/5097334.html" target="_blank" rel="noopener">HTML 事件(二) 事件的注册与注销</a></li><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></li><li>深入浅出React和Redux</li></ol><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> FreshMan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React学习笔记-索引</title>
      <link href="/2018/04/04/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%B4%A2%E5%BC%95/"/>
      <url>/2018/04/04/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%B4%A2%E5%BC%95/</url>
      <content type="html"><![CDATA[<p>用react有一段时间（&lt;= 3Months），主要用到了react的生命周期、父子组件通信、与其他组件结合使用等等。这一章为笔记索引。<br><a id="more"></a></p><h2 id="1、react是什么，为什么要替换jQuery"><a href="#1、react是什么，为什么要替换jQuery" class="headerlink" title="1、react是什么，为什么要替换jQuery"></a>1、react是什么，为什么要替换jQuery</h2><p>思考了一下<strong>自己</strong>jQuery项目中遇到的使自己感到处理很复杂的问题，如果用react会不会简单；jQuery与react的区别是什么？JSX？虚拟DOM？生命周期？ES6？。</p><h2 id="2、react最主要的生命周期"><a href="#2、react最主要的生命周期" class="headerlink" title="2、react最主要的生命周期"></a>2、react最主要的生命周期</h2><p>我要在何时给界面一个初始值；当内容变化时，我该在哪里控制界面重新渲染；为啥我的界面陷入了死循环……</p><h2 id="3、react父子组件如何通信"><a href="#3、react父子组件如何通信" class="headerlink" title="3、react父子组件如何通信"></a>3、react父子组件如何通信</h2><p>能接收父组件的传参吗？子组件想要给父组件返回值呢？</p><h2 id="4、react-ES6-babel转义"><a href="#4、react-ES6-babel转义" class="headerlink" title="4、react ES6 babel转义"></a>4、react ES6 babel转义</h2><p>啊哦，浏览器不支持ES6；咦，为什么我的前台界面渲染这么慢（前端解析ES6能不慢么）</p><h2 id="5、react-jQuery-jQuery组件应用等"><a href="#5、react-jQuery-jQuery组件应用等" class="headerlink" title="5、react+jQuery jQuery组件应用等"></a>5、react+jQuery jQuery组件应用等</h2><p>好纠结，原项目用jQuery封装好的方法类要不要重新写？不写的话我该怎么用？</p><h2 id="6、react-Ajax-后台交互，绑定变量等"><a href="#6、react-Ajax-后台交互，绑定变量等" class="headerlink" title="6、react+Ajax 后台交互，绑定变量等"></a>6、react+Ajax 后台交互，绑定变量等</h2><p>我想要找后台讨论一下当前条件下的查询结果，我该咋办？震惊！你还在用Ajax？</p><h2 id="7、react-Echarts-数据渲染等"><a href="#7、react-Echarts-数据渲染等" class="headerlink" title="7、react+Echarts 数据渲染等"></a>7、react+Echarts 数据渲染等</h2><p>“看别人的统计界面，折线图、柱状图、饼图各种直观化图形界面，看看你的，一堆数字表格，退回重做！”</p><h2 id="8、react-Antd-前台样式库"><a href="#8、react-Antd-前台样式库" class="headerlink" title="8、react+Antd 前台样式库"></a>8、react+Antd 前台样式库</h2><p>当你作为一个伪全栈，费劲所剩不多的脑子去搞前台样式时，不妨试一下Antd，即使样式不满足需求，至少可以提供思路。</p><h2 id="8、react-redux"><a href="#8、react-redux" class="headerlink" title="8、react+redux"></a>8、react+redux</h2><p>如何保证数据一致性？Flux is what？redux2333，</p><hr><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"></a><br>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_blank">知识共享署名-非商业性使用-禁止演绎 3.0 未本地化版本许可协议</a>进行许可。</p>]]></content>
      
      <categories>
          
          <category> FreshMan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle 数据库服务停启</title>
      <link href="/2018/02/23/Oracle-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%8D%E5%8A%A1%E5%81%9C%E5%90%AF/"/>
      <url>/2018/02/23/Oracle-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%8D%E5%8A%A1%E5%81%9C%E5%90%AF/</url>
      <content type="html"><![CDATA[<p>数据库服务宕掉该如何重启<br><a id="more"></a></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="查看数据库状态"><a href="#查看数据库状态" class="headerlink" title="查看数据库状态"></a>查看数据库状态</h4><pre><code>sqlplus / as sysdbaSELECT status FROM V$INSTANCE;</code></pre><p>查询报：<code>ORA-01034</code>则表示数据库服务未启动</p><h4 id="数据库服务关闭"><a href="#数据库服务关闭" class="headerlink" title="数据库服务关闭"></a>数据库服务关闭</h4><ol><li>SHUTDOWN IMMEDIATE<br>会中断正在执行的SQL语句，并将未提交的事务进行回滚，断开所有连接的用户</li><li>SHUTDOWN NORMAL<br>不允许新建连接，等待现有连接用户全部退出之后才关闭数据库。下次启动不需要进行任何实例恢复。</li><li><p>SHUTDOWN ABORT<br>类似于强制关闭，会中断正在执行的SQL语句，且不回滚未提交的事务。下次启动时需要进行实例恢复，启动时可能耗时较长。一般在如下场景使用该命令：  </p><ol><li>数据库处于一种非正常工作状态，不能用shutdown normal或者shutdown immediate这样的命令关闭数据库;</li><li>需要立即关闭数据库；</li><li>在启动数据库实例时遇到问题；</li></ol></li></ol><p>有关于checkPoint的知识点尚未接触，暂无。</p><h4 id="数据库服务启动"><a href="#数据库服务启动" class="headerlink" title="数据库服务启动"></a>数据库服务启动</h4><ol><li>STARTUP NOMOUNT<br>仅创建一个oracle实例，读取init.ora初始化参数文件、启动后台进程、初始化系统全局区（SGA）。需要继续执行以下命令才能打开数据库：<pre><code>ALTER DATABASE MOUNT;ALTER DATABASE OPEN;</code></pre></li><li>STARTUP MOUNT<br>创建实例并且挂载数据库，但没有打开数据库。 需要继续执行以下命令才能打开数据库：<pre><code>ALTER DATABASE OPEN;</code></pre></li><li>STARTUP<br>该命令包含：创建实例、挂载实例、打开数据库的所有步骤。成功结束后数据库系统便处于正常工作状态，可以接受用户请求。<br><img src="https://github.com/francisXKF/francisXKF.github.io/tree/master/images/orcle-startup.png" alt="STARTUP启动成功"></li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.cnblogs.com/guohu/p/4253418.html" target="_blank" rel="noopener">Oracle数据库实例的启动及关闭</a></p>]]></content>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OGG服务同步数据</title>
      <link href="/2018/02/10/OGG%E6%9C%8D%E5%8A%A1%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/02/10/OGG%E6%9C%8D%E5%8A%A1%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>想要通过OGG方式实现正式库的修改数据同步到备库中<br><a id="more"></a><br>前提：  </p><ul><li>Oracle 10g</li><li>OGG服务已安装</li><li>两个数据库已有相同用户</li><li>待同步的表已完成主备一致</li></ul><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>问题1：连接备库时，报<code>ora-12514 监听程序无法识别连接操作符中请求的服务</code><br>解决：查看<code>$ORACLE_HOME/network/admin</code>目录下没有<code>listener.ora</code>文件，参考其他数据库主机配置，新建了该文件，并写入以下内容，执行<code>lsnrctl status</code>查看监听状态，<code>lsnrctl stop</code>停止监听，<code>lsnrctl start</code>启动监听：</p><pre><code># listener.ora Network Configuration File: /oracle/product/10.2.0/network/admin/listener.ora# Generated by Oracle configuration tools.SID_LIST_LISTENER =  (SID_LIST =    (SID_DESC =      (SID_NAME = DBSID)      (ORACLE_HOME = ORACLE_HOME)    )  )LISTENER =  (DESCRIPTION_LIST =    (DESCRIPTION =      (ADDRESS = (PROTOCOL = TCP)(HOST = HOST_IP)(PORT = 1521))      (ADDRESS = (PROTOCOL = IPC)(KEY = DBSID))    )  )</code></pre><p>其中：</p><ul><li><code>SID_NAME</code>处，DBSID为Oracle实例iD，可以通过<code>echo $ORACLE_SID</code>来查看，若该环境变量未配置，可以通过<code>ps -ef | grep ora_</code>查看最后一个单词来进行分析</li><li><code>ORACLE_HOME</code>处，ORACLE_HOME应填上具体路径，与<code>echo $ORACLE_HOME</code>相同</li><li><code>HOST</code>处，填写数据库主机IP，如<code>10.131.23.10</code></li><li><code>KEY = DBSID</code>处，DBSID与<code>SID_NAME</code>处填写的一致</li></ul></li><li><p>问题2：报<code>ORA-01034</code>和<code>ORA-27101</code><br>解决：基本就是数据库挂了，需要使用oracle用户登录主机，使用sysdba登录数据库，启动数据库</p><pre><code>sqlplus / as sysdba # 使用sysdba登录数据库startup # 启动数据库</code></pre></li><li><p>问题3：执行./ggsci时报<code>libnnz10.so No such file or directory</code><br>解决：由于环境变量中没有加入<code>$ORACLE_HOME/lib</code>导致</p><pre><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ORACLE_HOME/lib</code></pre></li><li><p>问题4：启动OGG服务<br>解决：</p><pre><code># 启动cd $GG_HOME./ggscistart mgrstart *# 停止stop *stop mgr</code></pre></li><li><p>问题5：OGG服务启动后，修改正式库表记录，但备库未同步<br>解决：由于replicat服务ABENDED导致不同步，需要修改读检查点和写检查点，尚未完成学习</p></li><li><p>问题6：replicat服务ABENDED<br>解决：通过以下命令找到出问题的点：</p><pre><code>info allinfo REP_group #REP_group为要查询的REPLICAT的GROUP名sh more ggserr.log #查看日志文件</code></pre><p>可以键入v进入vim视图，通过G来到达最后一行查看最近报错信息。</p></li><li><p>问题7：查看REPLICAT进程的参数设置与状态  </p><pre><code>view params REP_group #REP_group为要查询的REPLICAT的GROUP名info REP_group detail #可以查看Error log文件的位置等</code></pre><p>详细可以看参考文章的<a href="http://blog.csdn.net/lqx0405/article/details/44777515" target="_blank" rel="noopener">Oracle GoldenGate学习之–GoldenGate的监控</a></p></li><li><p>问题8：处理ABANDON状态进程</p><pre><code>./ggsciinfo allinfo REP_groupsh ls ./dirrpt -l #查看最近程序执行的日志文件名sh more ./dirrpt/rep_group.dsc #查看最近日志文件内容，一般含有异常记录的描述./logdumpopen ./dirdat/jz000012 #进入logdump查看最近检查点alter replicat rep_group,extseqno 19,extrba 15042355 #修改检查点stop *start *</code></pre></li></ul><p>Tips：若能确认abandon状态中源主机没有任何操作，或许可以直接将检查点修改为<code>info REP_GROUP</code>里展示的检查点，19对应File的后缀，extrba对应RBA：</p><blockquote><p>Log Read Checkpoint  File ./dirdat/jz000019<br>                    2018-03-12 10:22:49.678621  RBA 15042355</p></blockquote><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://blog.csdn.net/u013519551/article/details/53485342" target="_blank" rel="noopener">ORA-01034和ORA-27101的解决方法</a><br><a href="http://blog.sina.com.cn/s/blog_6f7b73770101b6l5.html" target="_blank" rel="noopener">解决 ORA-12514: TNS: 监听程序当前无法识别连接描述符中请求的服务</a><br><a href="http://blog.csdn.net/eviswang/article/details/51034727" target="_blank" rel="noopener">./ggsci: error while loading shared libraries: libnnz11.so: cannot open shared object file: No such</a><br><a href="http://blog.csdn.net/lqx0405/article/details/44777515" target="_blank" rel="noopener">Oracle GoldenGate学习之–GoldenGate的监控</a><br><a href="http://blog.csdn.net/lbyyy/article/details/51775478" target="_blank" rel="noopener">OGG故障排除1例：因B机被修改数据导致replicat服务ABENDED修复</a><br><a href="https://www.cnblogs.com/tan-java/p/5613248.html" target="_blank" rel="noopener">ogg logdump工具使用介绍</a></p>]]></content>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo+GitHub简单命令</title>
      <link href="/2018/02/10/Hexo-github%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/02/10/Hexo-github%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h3><h4 id="创建文章、标签等"><a href="#创建文章、标签等" class="headerlink" title="创建文章、标签等"></a>创建文章、标签等</h4><ul><li>hexo new “postName” #新建文章</li><li>hexo new page “pageName” #新建页面</li></ul><h4 id="修改文章发布、同步到github等"><a href="#修改文章发布、同步到github等" class="headerlink" title="修改文章发布、同步到github等"></a>修改文章发布、同步到github等</h4><ul><li>hexo p == hexo publish</li><li>hexo g == hexo generate #生成</li><li>hexo s == hexo server #启动服务预览</li><li>hexo d == hexo deploy # 部署到github</li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="noopener">hexo常用命令笔记</a><br><a href="https://segmentfault.com/q/1010000002561642" target="_blank" rel="noopener">hexo分类与tags配置</a></p>]]></content>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lambda实现switch</title>
      <link href="/2018/02/08/lambda%E5%AE%9E%E7%8E%B0switch/"/>
      <url>/2018/02/08/lambda%E5%AE%9E%E7%8E%B0switch/</url>
      <content type="html"><![CDATA[<p>根据输入的条件符号，对两个输入的数字进行表达式判断<br><a id="more"></a></p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>查了查网上资料，总体有三种方案实现：<br>1、<strong>字典+函数</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcA</span><span class="params">(x)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">...</span><br><span class="line">funcDict&#123;</span><br><span class="line">    <span class="string">'A'</span> : funcA,</span><br><span class="line">    <span class="string">'B'</span> : funcB,</span><br><span class="line">    <span class="string">'C'</span> : funcC</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">funcDict.get(value, funcDefault)(x)</span><br></pre></td></tr></table></figure></p><p>2、<strong>字典+lambda</strong><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lambdaDict&#123;</span><br><span class="line"><span class="code">    'A' : lambda x : x,</span></span><br><span class="line"><span class="code">    'B' : lambda x : x,</span></span><br><span class="line"><span class="code">    'C' : lambda x : x</span></span><br><span class="line">&#125;[<span class="string">value</span>](<span class="link">x</span>)</span><br></pre></td></tr></table></figure></p><p>3、Brian Beck提供了一个类 switch 来实现其他语言中switch的功能</p><p>由于要实现的功能是两个数之间根据输入的表达式来进行比较，所以选择了写起来比较简洁（自认为简洁）的lambda<br><strong>样例</strong><br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def opJudge(processCnt, op, expectCnt):</span><br><span class="line">    judgeAns = &#123;</span><br><span class="line">        <span class="string">'='</span> : <span class="type">lambda</span> x, y : <span class="type">x</span> == y,</span><br><span class="line">        <span class="string">'&gt;'</span> : <span class="type">lambda</span> x, y : <span class="type">x</span> &gt; y,</span><br><span class="line">        <span class="string">'&lt;'</span> : <span class="type">lambda</span> x, y : <span class="type">x</span> &lt; y,</span><br><span class="line">        '&gt;=' : <span class="type">lambda</span> x, y : <span class="type">x</span> &gt;= y,</span><br><span class="line">        '&lt;=' : <span class="type">lambda</span> x, y : <span class="type">x</span> &lt;= y,</span><br><span class="line">        '!=' : <span class="type">lambda</span> x, y : <span class="type">x</span> != y,</span><br><span class="line">    &#125;[op](processCnt, expectCnt)</span><br><span class="line">    <span class="keyword">return</span> judgeAns</span><br></pre></td></tr></table></figure></p><p><small>写的时候对lambda的认识：lambda后面紧跟的是<strong>形参</strong>，就是func(x, y)里面的x、y，冒号后面的是<strong>方法</strong>，就是func(…){method}里面的method</small></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="http://blog.csdn.net/suiyunonghen/article/details/3734135" target="_blank" rel="noopener">Python中Swithch Case语法实现</a><br><a href="http://blog.csdn.net/mathboylinlin/article/details/9413551" target="_blank" rel="noopener">Python学习笔记（十二）：lambda表达式与函数式编程</a></p>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FirstBlog</title>
      <link href="/2018/02/08/FirstBlog/"/>
      <url>/2018/02/08/FirstBlog/</url>
      <content type="html"><![CDATA[<p>第一次使用<code>hexo</code>+<code>GitHub</code>的方式搭建个人博客，如果不搞各种插件的话，搭起来还是比较简单的，不过…确定<del>有定力</del>不去尝试各种插件么？<br><a id="more"></a></p><p>流程大概就是：</p><ol><li>观望<code>GitHub</code>对<code>hexo</code>与<code>jekyll</code>的支持程度，最终选择了自己曾经<strong>见过</strong>的<code>hexo</code></li><li>在<code>Github</code>上建立个人博客repository。这部分比较<del>简单</del>，主要纠结在了不断的404上。</li><li>主机上原来各种捣鼓都装上了Node.js、git这一堆东西</li><li><code>hexo init</code>开始装上了hexo，摸索了一下hexo结构</li><li>大概最纠结的事情出现了：找主题。前后试过<code>landscape</code>、<code>next</code>、<code>maupassant</code>、<code>light</code>，最喜欢的样式是<code>light</code>，在用的是<code>maupassant</code>。感觉<code>next</code>动画很足，缺点也是动画导致整体渲染看起来比较慢；<code>light</code>的样式看起来舒服，不足是提供的功能真的有点儿少……</li><li>花了一顿晚饭钱买了个域名，在考虑要不要注一个<code>.com</code>的。</li><li><a href="https://tongji.baidu.com/open/" target="_blank" rel="noopener">百度统计</a>、<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>、七牛、又拍等</li></ol><p>下一步计划？或者说是期望：  </p><ul><li>增加评论功能（现在没有，找我的话通过Github吧~）</li><li>租个云服务器做自己的后台服务</li><li>动手写一个前后端交互的页面</li><li>考虑如何将内容同步到简书或者segmentfault</li></ul><p>END……</p>]]></content>
      
      <categories>
          
          <category> Whisper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
